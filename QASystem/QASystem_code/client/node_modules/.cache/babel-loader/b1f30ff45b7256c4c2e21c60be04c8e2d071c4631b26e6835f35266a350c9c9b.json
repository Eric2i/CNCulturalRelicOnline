{"ast":null,"code":"import '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { useSizeProp } from '../../../hooks/use-size/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { isString } from '@vue/shared';\nimport { isNumber, isBoolean } from '@vueuse/core';\nconst checkboxProps = {\n  modelValue: {\n    type: [Number, String, Boolean],\n    default: void 0\n  },\n  label: {\n    type: [String, Boolean, Number, Object]\n  },\n  indeterminate: Boolean,\n  disabled: Boolean,\n  checked: Boolean,\n  name: {\n    type: String,\n    default: void 0\n  },\n  trueLabel: {\n    type: [String, Number],\n    default: void 0\n  },\n  falseLabel: {\n    type: [String, Number],\n    default: void 0\n  },\n  id: {\n    type: String,\n    default: void 0\n  },\n  controls: {\n    type: String,\n    default: void 0\n  },\n  border: Boolean,\n  size: useSizeProp,\n  tabindex: [String, Number],\n  validateEvent: {\n    type: Boolean,\n    default: true\n  }\n};\nconst checkboxEmits = {\n  [UPDATE_MODEL_EVENT]: val => isString(val) || isNumber(val) || isBoolean(val),\n  change: val => isString(val) || isNumber(val) || isBoolean(val)\n};\nexport { checkboxEmits, checkboxProps };","map":{"version":3,"names":["checkboxProps","modelValue","type","Number","String","Boolean","default","label","Object","indeterminate","disabled","checked","name","trueLabel","falseLabel","id","controls","border","size","useSizeProp","tabindex","validateEvent","checkboxEmits","UPDATE_MODEL_EVENT","val","isString","isNumber","isBoolean","change"],"sources":["../../../../../../packages/components/checkbox/src/checkbox.ts"],"sourcesContent":["import { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useSizeProp } from '@element-plus/hooks'\nimport { isBoolean, isNumber, isString } from '@element-plus/utils'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type Checkbox from './checkbox.vue'\n\nexport type CheckboxValueType = string | number | boolean\n\nexport const checkboxProps = {\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: [Number, String, Boolean],\n    default: undefined,\n  },\n  /**\n   * @description value of the Checkbox when used inside a `checkbox-group`\n   */\n  label: {\n    type: [String, Boolean, Number, Object],\n  },\n  /**\n   * @description Set indeterminate state, only responsible for style control\n   */\n  indeterminate: Boolean,\n  /**\n   * @description whether the Checkbox is disabled\n   */\n  disabled: Boolean,\n  /**\n   * @description if the Checkbox is checked\n   */\n  checked: Boolean,\n  /**\n   * @description native 'name' attribute\n   */\n  name: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description value of the Checkbox if it's checked\n   */\n  trueLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @description value of the Checkbox if it's not checked\n   */\n  falseLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @description input id\n   */\n  id: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description same as [aria-controls](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls), takes effect when `indeterminate` is `true`\n   */\n  controls: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description whether to add a border around Checkbox\n   */\n  border: Boolean,\n  /**\n   * @description size of the Checkbox\n   */\n  size: useSizeProp,\n  /**\n   * @description input tabindex\n   */\n  tabindex: [String, Number],\n  /**\n   * @description whether to trigger form validation\n   */\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n}\n\nexport const checkboxEmits = {\n  [UPDATE_MODEL_EVENT]: (val: CheckboxValueType) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n  change: (val: CheckboxValueType) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n}\n\nexport type CheckboxProps = ExtractPropTypes<typeof checkboxProps>\nexport type CheckboxEmits = typeof checkboxEmits\nexport type CheckboxInstance = InstanceType<typeof Checkbox>\n"],"mappings":";;;;;;;AAGY,MAACA,aAAa,GAAG;EAC3BC,UAAU,EAAE;IACVC,IAAI,EAAE,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,CAAC;IAC/BC,OAAO,EAAE,KAAK;EAClB,CAAG;EACDC,KAAK,EAAE;IACLL,IAAI,EAAE,CAACE,MAAM,EAAEC,OAAO,EAAEF,MAAM,EAAEK,MAAM;EAC1C,CAAG;EACDC,aAAa,EAAEJ,OAAO;EACtBK,QAAQ,EAAEL,OAAO;EACjBM,OAAO,EAAEN,OAAO;EAChBO,IAAI,EAAE;IACJV,IAAI,EAAEE,MAAM;IACZE,OAAO,EAAE,KAAK;EAClB,CAAG;EACDO,SAAS,EAAE;IACTX,IAAI,EAAE,CAACE,MAAM,EAAED,MAAM,CAAC;IACtBG,OAAO,EAAE,KAAK;EAClB,CAAG;EACDQ,UAAU,EAAE;IACVZ,IAAI,EAAE,CAACE,MAAM,EAAED,MAAM,CAAC;IACtBG,OAAO,EAAE,KAAK;EAClB,CAAG;EACDS,EAAE,EAAE;IACFb,IAAI,EAAEE,MAAM;IACZE,OAAO,EAAE,KAAK;EAClB,CAAG;EACDU,QAAQ,EAAE;IACRd,IAAI,EAAEE,MAAM;IACZE,OAAO,EAAE,KAAK;EAClB,CAAG;EACDW,MAAM,EAAEZ,OAAO;EACfa,IAAI,EAAEC,WAAW;EACjBC,QAAQ,EAAE,CAAChB,MAAM,EAAED,MAAM,CAAC;EAC1BkB,aAAa,EAAE;IACbnB,IAAI,EAAEG,OAAO;IACbC,OAAO,EAAE;EACb;AACA;AACY,MAACgB,aAAa,GAAG;EAC3B,CAACC,kBAAkB,GAAIC,GAAG,IAAKC,QAAQ,CAACD,GAAG,CAAC,IAAIE,QAAQ,CAACF,GAAG,CAAC,IAAIG,SAAS,CAACH,GAAG,CAAC;EAC/EI,MAAM,EAAGJ,GAAG,IAAKC,QAAQ,CAACD,GAAG,CAAC,IAAIE,QAAQ,CAACF,GAAG,CAAC,IAAIG,SAAS,CAACH,GAAG;AAClE"},"metadata":{},"sourceType":"module","externalDependencies":[]}