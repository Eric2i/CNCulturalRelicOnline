{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport { getCurrentInstance, toRefs, ref, watch, unref } from 'vue';\nimport '../../../../utils/index.mjs';\nimport { orderBy, getKeysMap, toggleRowStatus, getRowIdentity, getColumnById, getColumnByKey } from '../util.mjs';\nimport useExpand from './expand.mjs';\nimport useCurrent from './current.mjs';\nimport useTree from './tree.mjs';\nimport { hasOwn } from '@vue/shared';\nconst sortData = (data, states) => {\n  const sortingColumn = states.sortingColumn;\n  if (!sortingColumn || typeof sortingColumn.sortable === \"string\") {\n    return data;\n  }\n  return orderBy(data, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);\n};\nconst doFlattenColumns = columns => {\n  const result = [];\n  columns.forEach(column => {\n    if (column.children) {\n      result.push.apply(result, doFlattenColumns(column.children));\n    } else {\n      result.push(column);\n    }\n  });\n  return result;\n};\nfunction useWatcher() {\n  var _a;\n  const instance = getCurrentInstance();\n  const {\n    size: tableSize\n  } = toRefs((_a = instance.proxy) == null ? void 0 : _a.$props);\n  const rowKey = ref(null);\n  const data = ref([]);\n  const _data = ref([]);\n  const isComplex = ref(false);\n  const _columns = ref([]);\n  const originColumns = ref([]);\n  const columns = ref([]);\n  const fixedColumns = ref([]);\n  const rightFixedColumns = ref([]);\n  const leafColumns = ref([]);\n  const fixedLeafColumns = ref([]);\n  const rightFixedLeafColumns = ref([]);\n  const updateOrderFns = [];\n  const leafColumnsLength = ref(0);\n  const fixedLeafColumnsLength = ref(0);\n  const rightFixedLeafColumnsLength = ref(0);\n  const isAllSelected = ref(false);\n  const selection = ref([]);\n  const reserveSelection = ref(false);\n  const selectOnIndeterminate = ref(false);\n  const selectable = ref(null);\n  const filters = ref({});\n  const filteredData = ref(null);\n  const sortingColumn = ref(null);\n  const sortProp = ref(null);\n  const sortOrder = ref(null);\n  const hoverRow = ref(null);\n  watch(data, () => instance.state && scheduleLayout(false), {\n    deep: true\n  });\n  const assertRowKey = () => {\n    if (!rowKey.value) throw new Error(\"[ElTable] prop row-key is required\");\n  };\n  const updateChildFixed = column => {\n    var _a2;\n    (_a2 = column.children) == null ? void 0 : _a2.forEach(childColumn => {\n      childColumn.fixed = column.fixed;\n      updateChildFixed(childColumn);\n    });\n  };\n  const updateColumns = () => {\n    _columns.value.forEach(column => {\n      updateChildFixed(column);\n    });\n    fixedColumns.value = _columns.value.filter(column => column.fixed === true || column.fixed === \"left\");\n    rightFixedColumns.value = _columns.value.filter(column => column.fixed === \"right\");\n    if (fixedColumns.value.length > 0 && _columns.value[0] && _columns.value[0].type === \"selection\" && !_columns.value[0].fixed) {\n      _columns.value[0].fixed = true;\n      fixedColumns.value.unshift(_columns.value[0]);\n    }\n    const notFixedColumns = _columns.value.filter(column => !column.fixed);\n    originColumns.value = [].concat(fixedColumns.value).concat(notFixedColumns).concat(rightFixedColumns.value);\n    const leafColumns2 = doFlattenColumns(notFixedColumns);\n    const fixedLeafColumns2 = doFlattenColumns(fixedColumns.value);\n    const rightFixedLeafColumns2 = doFlattenColumns(rightFixedColumns.value);\n    leafColumnsLength.value = leafColumns2.length;\n    fixedLeafColumnsLength.value = fixedLeafColumns2.length;\n    rightFixedLeafColumnsLength.value = rightFixedLeafColumns2.length;\n    columns.value = [].concat(fixedLeafColumns2).concat(leafColumns2).concat(rightFixedLeafColumns2);\n    isComplex.value = fixedColumns.value.length > 0 || rightFixedColumns.value.length > 0;\n  };\n  const scheduleLayout = (needUpdateColumns, immediate = false) => {\n    if (needUpdateColumns) {\n      updateColumns();\n    }\n    if (immediate) {\n      instance.state.doLayout();\n    } else {\n      instance.state.debouncedUpdateLayout();\n    }\n  };\n  const isSelected = row => {\n    return selection.value.includes(row);\n  };\n  const clearSelection = () => {\n    isAllSelected.value = false;\n    const oldSelection = selection.value;\n    if (oldSelection.length) {\n      selection.value = [];\n      instance.emit(\"selection-change\", []);\n    }\n  };\n  const cleanSelection = () => {\n    let deleted;\n    if (rowKey.value) {\n      deleted = [];\n      const selectedMap = getKeysMap(selection.value, rowKey.value);\n      const dataMap = getKeysMap(data.value, rowKey.value);\n      for (const key in selectedMap) {\n        if (hasOwn(selectedMap, key) && !dataMap[key]) {\n          deleted.push(selectedMap[key].row);\n        }\n      }\n    } else {\n      deleted = selection.value.filter(item => !data.value.includes(item));\n    }\n    if (deleted.length) {\n      const newSelection = selection.value.filter(item => !deleted.includes(item));\n      selection.value = newSelection;\n      instance.emit(\"selection-change\", newSelection.slice());\n    }\n  };\n  const getSelectionRows = () => {\n    return (selection.value || []).slice();\n  };\n  const toggleRowSelection = (row, selected = void 0, emitChange = true) => {\n    const changed = toggleRowStatus(selection.value, row, selected);\n    if (changed) {\n      const newSelection = (selection.value || []).slice();\n      if (emitChange) {\n        instance.emit(\"select\", newSelection, row);\n      }\n      instance.emit(\"selection-change\", newSelection);\n    }\n  };\n  const _toggleAllSelection = () => {\n    var _a2, _b;\n    const value = selectOnIndeterminate.value ? !isAllSelected.value : !(isAllSelected.value || selection.value.length);\n    isAllSelected.value = value;\n    let selectionChanged = false;\n    let childrenCount = 0;\n    const rowKey2 = (_b = (_a2 = instance == null ? void 0 : instance.store) == null ? void 0 : _a2.states) == null ? void 0 : _b.rowKey.value;\n    data.value.forEach((row, index) => {\n      const rowIndex = index + childrenCount;\n      if (selectable.value) {\n        if (selectable.value.call(null, row, rowIndex) && toggleRowStatus(selection.value, row, value)) {\n          selectionChanged = true;\n        }\n      } else {\n        if (toggleRowStatus(selection.value, row, value)) {\n          selectionChanged = true;\n        }\n      }\n      childrenCount += getChildrenCount(getRowIdentity(row, rowKey2));\n    });\n    if (selectionChanged) {\n      instance.emit(\"selection-change\", selection.value ? selection.value.slice() : []);\n    }\n    instance.emit(\"select-all\", selection.value);\n  };\n  const updateSelectionByRowKey = () => {\n    const selectedMap = getKeysMap(selection.value, rowKey.value);\n    data.value.forEach(row => {\n      const rowId = getRowIdentity(row, rowKey.value);\n      const rowInfo = selectedMap[rowId];\n      if (rowInfo) {\n        selection.value[rowInfo.index] = row;\n      }\n    });\n  };\n  const updateAllSelected = () => {\n    var _a2, _b, _c;\n    if (((_a2 = data.value) == null ? void 0 : _a2.length) === 0) {\n      isAllSelected.value = false;\n      return;\n    }\n    let selectedMap;\n    if (rowKey.value) {\n      selectedMap = getKeysMap(selection.value, rowKey.value);\n    }\n    const isSelected2 = function (row) {\n      if (selectedMap) {\n        return !!selectedMap[getRowIdentity(row, rowKey.value)];\n      } else {\n        return selection.value.includes(row);\n      }\n    };\n    let isAllSelected_ = true;\n    let selectedCount = 0;\n    let childrenCount = 0;\n    for (let i = 0, j = (data.value || []).length; i < j; i++) {\n      const keyProp = (_c = (_b = instance == null ? void 0 : instance.store) == null ? void 0 : _b.states) == null ? void 0 : _c.rowKey.value;\n      const rowIndex = i + childrenCount;\n      const item = data.value[i];\n      const isRowSelectable = selectable.value && selectable.value.call(null, item, rowIndex);\n      if (!isSelected2(item)) {\n        if (!selectable.value || isRowSelectable) {\n          isAllSelected_ = false;\n          break;\n        }\n      } else {\n        selectedCount++;\n      }\n      childrenCount += getChildrenCount(getRowIdentity(item, keyProp));\n    }\n    if (selectedCount === 0) isAllSelected_ = false;\n    isAllSelected.value = isAllSelected_;\n  };\n  const getChildrenCount = rowKey2 => {\n    var _a2;\n    if (!instance || !instance.store) return 0;\n    const {\n      treeData\n    } = instance.store.states;\n    let count = 0;\n    const children = (_a2 = treeData.value[rowKey2]) == null ? void 0 : _a2.children;\n    if (children) {\n      count += children.length;\n      children.forEach(childKey => {\n        count += getChildrenCount(childKey);\n      });\n    }\n    return count;\n  };\n  const updateFilters = (columns2, values) => {\n    if (!Array.isArray(columns2)) {\n      columns2 = [columns2];\n    }\n    const filters_ = {};\n    columns2.forEach(col => {\n      filters.value[col.id] = values;\n      filters_[col.columnKey || col.id] = values;\n    });\n    return filters_;\n  };\n  const updateSort = (column, prop, order) => {\n    if (sortingColumn.value && sortingColumn.value !== column) {\n      sortingColumn.value.order = null;\n    }\n    sortingColumn.value = column;\n    sortProp.value = prop;\n    sortOrder.value = order;\n  };\n  const execFilter = () => {\n    let sourceData = unref(_data);\n    Object.keys(filters.value).forEach(columnId => {\n      const values = filters.value[columnId];\n      if (!values || values.length === 0) return;\n      const column = getColumnById({\n        columns: columns.value\n      }, columnId);\n      if (column && column.filterMethod) {\n        sourceData = sourceData.filter(row => {\n          return values.some(value => column.filterMethod.call(null, value, row, column));\n        });\n      }\n    });\n    filteredData.value = sourceData;\n  };\n  const execSort = () => {\n    data.value = sortData(filteredData.value, {\n      sortingColumn: sortingColumn.value,\n      sortProp: sortProp.value,\n      sortOrder: sortOrder.value\n    });\n  };\n  const execQuery = (ignore = void 0) => {\n    if (!(ignore && ignore.filter)) {\n      execFilter();\n    }\n    execSort();\n  };\n  const clearFilter = columnKeys => {\n    const {\n      tableHeaderRef\n    } = instance.refs;\n    if (!tableHeaderRef) return;\n    const panels = Object.assign({}, tableHeaderRef.filterPanels);\n    const keys = Object.keys(panels);\n    if (!keys.length) return;\n    if (typeof columnKeys === \"string\") {\n      columnKeys = [columnKeys];\n    }\n    if (Array.isArray(columnKeys)) {\n      const columns_ = columnKeys.map(key => getColumnByKey({\n        columns: columns.value\n      }, key));\n      keys.forEach(key => {\n        const column = columns_.find(col => col.id === key);\n        if (column) {\n          column.filteredValue = [];\n        }\n      });\n      instance.store.commit(\"filterChange\", {\n        column: columns_,\n        values: [],\n        silent: true,\n        multi: true\n      });\n    } else {\n      keys.forEach(key => {\n        const column = columns.value.find(col => col.id === key);\n        if (column) {\n          column.filteredValue = [];\n        }\n      });\n      filters.value = {};\n      instance.store.commit(\"filterChange\", {\n        column: {},\n        values: [],\n        silent: true\n      });\n    }\n  };\n  const clearSort = () => {\n    if (!sortingColumn.value) return;\n    updateSort(null, null, null);\n    instance.store.commit(\"changeSortCondition\", {\n      silent: true\n    });\n  };\n  const {\n    setExpandRowKeys,\n    toggleRowExpansion,\n    updateExpandRows,\n    states: expandStates,\n    isRowExpanded\n  } = useExpand({\n    data,\n    rowKey\n  });\n  const {\n    updateTreeExpandKeys,\n    toggleTreeExpansion,\n    updateTreeData,\n    loadOrToggle,\n    states: treeStates\n  } = useTree({\n    data,\n    rowKey\n  });\n  const {\n    updateCurrentRowData,\n    updateCurrentRow,\n    setCurrentRowKey,\n    states: currentData\n  } = useCurrent({\n    data,\n    rowKey\n  });\n  const setExpandRowKeysAdapter = val => {\n    setExpandRowKeys(val);\n    updateTreeExpandKeys(val);\n  };\n  const toggleRowExpansionAdapter = (row, expanded) => {\n    const hasExpandColumn = columns.value.some(({\n      type\n    }) => type === \"expand\");\n    if (hasExpandColumn) {\n      toggleRowExpansion(row, expanded);\n    } else {\n      toggleTreeExpansion(row, expanded);\n    }\n  };\n  return {\n    assertRowKey,\n    updateColumns,\n    scheduleLayout,\n    isSelected,\n    clearSelection,\n    cleanSelection,\n    getSelectionRows,\n    toggleRowSelection,\n    _toggleAllSelection,\n    toggleAllSelection: null,\n    updateSelectionByRowKey,\n    updateAllSelected,\n    updateFilters,\n    updateCurrentRow,\n    updateSort,\n    execFilter,\n    execSort,\n    execQuery,\n    clearFilter,\n    clearSort,\n    toggleRowExpansion,\n    setExpandRowKeysAdapter,\n    setCurrentRowKey,\n    toggleRowExpansionAdapter,\n    isRowExpanded,\n    updateExpandRows,\n    updateCurrentRowData,\n    loadOrToggle,\n    updateTreeData,\n    states: {\n      tableSize,\n      rowKey,\n      data,\n      _data,\n      isComplex,\n      _columns,\n      originColumns,\n      columns,\n      fixedColumns,\n      rightFixedColumns,\n      leafColumns,\n      fixedLeafColumns,\n      rightFixedLeafColumns,\n      updateOrderFns,\n      leafColumnsLength,\n      fixedLeafColumnsLength,\n      rightFixedLeafColumnsLength,\n      isAllSelected,\n      selection,\n      reserveSelection,\n      selectOnIndeterminate,\n      selectable,\n      filters,\n      filteredData,\n      sortingColumn,\n      sortProp,\n      sortOrder,\n      hoverRow,\n      ...expandStates,\n      ...treeStates,\n      ...currentData\n    }\n  };\n}\nexport { useWatcher as default };","map":{"version":3,"names":["sortData","data","states","sortingColumn","sortable","orderBy","sortProp","sortOrder","sortMethod","sortBy","doFlattenColumns","columns","result","forEach","column","children","push","apply","useWatcher","_a","instance","getCurrentInstance","size","tableSize","toRefs","proxy","$props","rowKey","ref","_data","isComplex","_columns","originColumns","fixedColumns","rightFixedColumns","leafColumns","fixedLeafColumns","rightFixedLeafColumns","updateOrderFns","leafColumnsLength","fixedLeafColumnsLength","rightFixedLeafColumnsLength","isAllSelected","selection","reserveSelection","selectOnIndeterminate","selectable","filters","filteredData","hoverRow","watch","state","scheduleLayout","deep","assertRowKey","value","Error","updateChildFixed","_a2","childColumn","fixed","updateColumns","filter","length","type","unshift","notFixedColumns","concat","leafColumns2","fixedLeafColumns2","rightFixedLeafColumns2","needUpdateColumns","immediate","doLayout","debouncedUpdateLayout","isSelected","row","includes","clearSelection","oldSelection","emit","cleanSelection","deleted","selectedMap","getKeysMap","dataMap","key","hasOwn","item","newSelection","slice","getSelectionRows","toggleRowSelection","selected","emitChange","changed","toggleRowStatus","_toggleAllSelection","_b","selectionChanged","childrenCount","rowKey2","store","index","rowIndex","call","getChildrenCount","getRowIdentity","updateSelectionByRowKey","rowId","rowInfo","updateAllSelected","_c","isSelected2","isAllSelected_","selectedCount","i","j","keyProp","isRowSelectable","treeData","count","childKey","updateFilters","columns2","values","Array","isArray","filters_","col","id","columnKey","updateSort","prop","order","execFilter","sourceData","unref","Object","keys","columnId","getColumnById","filterMethod","some","execSort","execQuery","ignore","clearFilter","columnKeys","tableHeaderRef","refs","panels","assign","filterPanels","columns_","map","getColumnByKey","find","filteredValue","commit","silent","multi","clearSort","setExpandRowKeys","toggleRowExpansion","updateExpandRows","expandStates","isRowExpanded","useExpand","updateTreeExpandKeys","toggleTreeExpansion","updateTreeData","loadOrToggle","treeStates","useTree","updateCurrentRowData","updateCurrentRow","setCurrentRowKey","currentData","useCurrent","setExpandRowKeysAdapter","val","toggleRowExpansionAdapter","expanded","hasExpandColumn","toggleAllSelection"],"sources":["../../../../../../../packages/components/table/src/store/watcher.ts"],"sourcesContent":["// @ts-nocheck\nimport { getCurrentInstance, ref, toRefs, unref, watch } from 'vue'\nimport { hasOwn } from '@element-plus/utils'\nimport {\n  getColumnById,\n  getColumnByKey,\n  getKeysMap,\n  getRowIdentity,\n  orderBy,\n  toggleRowStatus,\n} from '../util'\nimport useExpand from './expand'\nimport useCurrent from './current'\nimport useTree from './tree'\n\nimport type { Ref } from 'vue'\nimport type { TableColumnCtx } from '../table-column/defaults'\nimport type { Table, TableRefs } from '../table/defaults'\nimport type { StoreFilter } from '.'\n\nconst sortData = (data, states) => {\n  const sortingColumn = states.sortingColumn\n  if (!sortingColumn || typeof sortingColumn.sortable === 'string') {\n    return data\n  }\n  return orderBy(\n    data,\n    states.sortProp,\n    states.sortOrder,\n    sortingColumn.sortMethod,\n    sortingColumn.sortBy\n  )\n}\n\nconst doFlattenColumns = (columns) => {\n  const result = []\n  columns.forEach((column) => {\n    if (column.children) {\n      // eslint-disable-next-line prefer-spread\n      result.push.apply(result, doFlattenColumns(column.children))\n    } else {\n      result.push(column)\n    }\n  })\n  return result\n}\n\nfunction useWatcher<T>() {\n  const instance = getCurrentInstance() as Table<T>\n  const { size: tableSize } = toRefs(instance.proxy?.$props as any)\n  const rowKey: Ref<string> = ref(null)\n  const data: Ref<T[]> = ref([])\n  const _data: Ref<T[]> = ref([])\n  const isComplex = ref(false)\n  const _columns: Ref<TableColumnCtx<T>[]> = ref([])\n  const originColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const columns: Ref<TableColumnCtx<T>[]> = ref([])\n  const fixedColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const rightFixedColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const leafColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const fixedLeafColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const rightFixedLeafColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const updateOrderFns: (() => void)[] = []\n  const leafColumnsLength = ref(0)\n  const fixedLeafColumnsLength = ref(0)\n  const rightFixedLeafColumnsLength = ref(0)\n  const isAllSelected = ref(false)\n  const selection: Ref<T[]> = ref([])\n  const reserveSelection = ref(false)\n  const selectOnIndeterminate = ref(false)\n  const selectable: Ref<(row: T, index: number) => boolean> = ref(null)\n  const filters: Ref<StoreFilter> = ref({})\n  const filteredData = ref(null)\n  const sortingColumn = ref(null)\n  const sortProp = ref(null)\n  const sortOrder = ref(null)\n  const hoverRow = ref(null)\n\n  watch(data, () => instance.state && scheduleLayout(false), {\n    deep: true,\n  })\n\n  // 检查 rowKey 是否存在\n  const assertRowKey = () => {\n    if (!rowKey.value) throw new Error('[ElTable] prop row-key is required')\n  }\n\n  // 更新 fixed\n  const updateChildFixed = (column: TableColumnCtx<T>) => {\n    column.children?.forEach((childColumn) => {\n      childColumn.fixed = column.fixed\n      updateChildFixed(childColumn)\n    })\n  }\n\n  // 更新列\n  const updateColumns = () => {\n    _columns.value.forEach((column) => {\n      updateChildFixed(column)\n    })\n    fixedColumns.value = _columns.value.filter(\n      (column) => column.fixed === true || column.fixed === 'left'\n    )\n    rightFixedColumns.value = _columns.value.filter(\n      (column) => column.fixed === 'right'\n    )\n    if (\n      fixedColumns.value.length > 0 &&\n      _columns.value[0] &&\n      _columns.value[0].type === 'selection' &&\n      !_columns.value[0].fixed\n    ) {\n      _columns.value[0].fixed = true\n      fixedColumns.value.unshift(_columns.value[0])\n    }\n\n    const notFixedColumns = _columns.value.filter((column) => !column.fixed)\n    originColumns.value = []\n      .concat(fixedColumns.value)\n      .concat(notFixedColumns)\n      .concat(rightFixedColumns.value)\n    const leafColumns = doFlattenColumns(notFixedColumns)\n    const fixedLeafColumns = doFlattenColumns(fixedColumns.value)\n    const rightFixedLeafColumns = doFlattenColumns(rightFixedColumns.value)\n\n    leafColumnsLength.value = leafColumns.length\n    fixedLeafColumnsLength.value = fixedLeafColumns.length\n    rightFixedLeafColumnsLength.value = rightFixedLeafColumns.length\n\n    columns.value = []\n      .concat(fixedLeafColumns)\n      .concat(leafColumns)\n      .concat(rightFixedLeafColumns)\n    isComplex.value =\n      fixedColumns.value.length > 0 || rightFixedColumns.value.length > 0\n  }\n\n  // 更新 DOM\n  const scheduleLayout = (needUpdateColumns?: boolean, immediate = false) => {\n    if (needUpdateColumns) {\n      updateColumns()\n    }\n    if (immediate) {\n      instance.state.doLayout()\n    } else {\n      instance.state.debouncedUpdateLayout()\n    }\n  }\n\n  // 选择\n  const isSelected = (row) => {\n    return selection.value.includes(row)\n  }\n\n  const clearSelection = () => {\n    isAllSelected.value = false\n    const oldSelection = selection.value\n    if (oldSelection.length) {\n      selection.value = []\n      instance.emit('selection-change', [])\n    }\n  }\n\n  const cleanSelection = () => {\n    let deleted\n    if (rowKey.value) {\n      deleted = []\n      const selectedMap = getKeysMap(selection.value, rowKey.value)\n      const dataMap = getKeysMap(data.value, rowKey.value)\n      for (const key in selectedMap) {\n        if (hasOwn(selectedMap, key) && !dataMap[key]) {\n          deleted.push(selectedMap[key].row)\n        }\n      }\n    } else {\n      deleted = selection.value.filter((item) => !data.value.includes(item))\n    }\n    if (deleted.length) {\n      const newSelection = selection.value.filter(\n        (item) => !deleted.includes(item)\n      )\n      selection.value = newSelection\n      instance.emit('selection-change', newSelection.slice())\n    }\n  }\n\n  const getSelectionRows = () => {\n    return (selection.value || []).slice()\n  }\n\n  const toggleRowSelection = (\n    row: T,\n    selected = undefined,\n    emitChange = true\n  ) => {\n    const changed = toggleRowStatus(selection.value, row, selected)\n    if (changed) {\n      const newSelection = (selection.value || []).slice()\n      // 调用 API 修改选中值，不触发 select 事件\n      if (emitChange) {\n        instance.emit('select', newSelection, row)\n      }\n      instance.emit('selection-change', newSelection)\n    }\n  }\n\n  const _toggleAllSelection = () => {\n    // when only some rows are selected (but not all), select or deselect all of them\n    // depending on the value of selectOnIndeterminate\n    const value = selectOnIndeterminate.value\n      ? !isAllSelected.value\n      : !(isAllSelected.value || selection.value.length)\n    isAllSelected.value = value\n\n    let selectionChanged = false\n    let childrenCount = 0\n    const rowKey = instance?.store?.states?.rowKey.value\n    data.value.forEach((row, index) => {\n      const rowIndex = index + childrenCount\n      if (selectable.value) {\n        if (\n          selectable.value.call(null, row, rowIndex) &&\n          toggleRowStatus(selection.value, row, value)\n        ) {\n          selectionChanged = true\n        }\n      } else {\n        if (toggleRowStatus(selection.value, row, value)) {\n          selectionChanged = true\n        }\n      }\n      childrenCount += getChildrenCount(getRowIdentity(row, rowKey))\n    })\n\n    if (selectionChanged) {\n      instance.emit(\n        'selection-change',\n        selection.value ? selection.value.slice() : []\n      )\n    }\n    instance.emit('select-all', selection.value)\n  }\n\n  const updateSelectionByRowKey = () => {\n    const selectedMap = getKeysMap(selection.value, rowKey.value)\n    data.value.forEach((row) => {\n      const rowId = getRowIdentity(row, rowKey.value)\n      const rowInfo = selectedMap[rowId]\n      if (rowInfo) {\n        selection.value[rowInfo.index] = row\n      }\n    })\n  }\n\n  const updateAllSelected = () => {\n    // data 为 null 时，解构时的默认值会被忽略\n    if (data.value?.length === 0) {\n      isAllSelected.value = false\n      return\n    }\n\n    let selectedMap\n    if (rowKey.value) {\n      selectedMap = getKeysMap(selection.value, rowKey.value)\n    }\n    const isSelected = function (row) {\n      if (selectedMap) {\n        return !!selectedMap[getRowIdentity(row, rowKey.value)]\n      } else {\n        return selection.value.includes(row)\n      }\n    }\n    let isAllSelected_ = true\n    let selectedCount = 0\n    let childrenCount = 0\n    for (let i = 0, j = (data.value || []).length; i < j; i++) {\n      const keyProp = instance?.store?.states?.rowKey.value\n      const rowIndex = i + childrenCount\n      const item = data.value[i]\n      const isRowSelectable =\n        selectable.value && selectable.value.call(null, item, rowIndex)\n      if (!isSelected(item)) {\n        if (!selectable.value || isRowSelectable) {\n          isAllSelected_ = false\n          break\n        }\n      } else {\n        selectedCount++\n      }\n      childrenCount += getChildrenCount(getRowIdentity(item, keyProp))\n    }\n\n    if (selectedCount === 0) isAllSelected_ = false\n    isAllSelected.value = isAllSelected_\n  }\n\n  // gets the number of all child nodes by rowKey\n  const getChildrenCount = (rowKey: string) => {\n    if (!instance || !instance.store) return 0\n    const { treeData } = instance.store.states\n    let count = 0\n    const children = treeData.value[rowKey]?.children\n    if (children) {\n      count += children.length\n      children.forEach((childKey) => {\n        count += getChildrenCount(childKey)\n      })\n    }\n    return count\n  }\n\n  // 过滤与排序\n  const updateFilters = (columns, values) => {\n    if (!Array.isArray(columns)) {\n      columns = [columns]\n    }\n    const filters_ = {}\n    columns.forEach((col) => {\n      filters.value[col.id] = values\n      filters_[col.columnKey || col.id] = values\n    })\n    return filters_\n  }\n\n  const updateSort = (column, prop, order) => {\n    if (sortingColumn.value && sortingColumn.value !== column) {\n      sortingColumn.value.order = null\n    }\n    sortingColumn.value = column\n    sortProp.value = prop\n    sortOrder.value = order\n  }\n\n  const execFilter = () => {\n    let sourceData = unref(_data)\n    Object.keys(filters.value).forEach((columnId) => {\n      const values = filters.value[columnId]\n      if (!values || values.length === 0) return\n      const column = getColumnById(\n        {\n          columns: columns.value,\n        },\n        columnId\n      )\n      if (column && column.filterMethod) {\n        sourceData = sourceData.filter((row) => {\n          return values.some((value) =>\n            column.filterMethod.call(null, value, row, column)\n          )\n        })\n      }\n    })\n\n    filteredData.value = sourceData\n  }\n\n  const execSort = () => {\n    data.value = sortData(filteredData.value, {\n      sortingColumn: sortingColumn.value,\n      sortProp: sortProp.value,\n      sortOrder: sortOrder.value,\n    })\n  }\n\n  // 根据 filters 与 sort 去过滤 data\n  const execQuery = (ignore = undefined) => {\n    if (!(ignore && ignore.filter)) {\n      execFilter()\n    }\n    execSort()\n  }\n\n  const clearFilter = (columnKeys) => {\n    const { tableHeaderRef } = instance.refs as TableRefs\n    if (!tableHeaderRef) return\n    const panels = Object.assign({}, tableHeaderRef.filterPanels)\n\n    const keys = Object.keys(panels)\n    if (!keys.length) return\n\n    if (typeof columnKeys === 'string') {\n      columnKeys = [columnKeys]\n    }\n\n    if (Array.isArray(columnKeys)) {\n      const columns_ = columnKeys.map((key) =>\n        getColumnByKey(\n          {\n            columns: columns.value,\n          },\n          key\n        )\n      )\n      keys.forEach((key) => {\n        const column = columns_.find((col) => col.id === key)\n        if (column) {\n          column.filteredValue = []\n        }\n      })\n      instance.store.commit('filterChange', {\n        column: columns_,\n        values: [],\n        silent: true,\n        multi: true,\n      })\n    } else {\n      keys.forEach((key) => {\n        const column = columns.value.find((col) => col.id === key)\n        if (column) {\n          column.filteredValue = []\n        }\n      })\n\n      filters.value = {}\n      instance.store.commit('filterChange', {\n        column: {},\n        values: [],\n        silent: true,\n      })\n    }\n  }\n\n  const clearSort = () => {\n    if (!sortingColumn.value) return\n\n    updateSort(null, null, null)\n    instance.store.commit('changeSortCondition', {\n      silent: true,\n    })\n  }\n  const {\n    setExpandRowKeys,\n    toggleRowExpansion,\n    updateExpandRows,\n    states: expandStates,\n    isRowExpanded,\n  } = useExpand({\n    data,\n    rowKey,\n  })\n  const {\n    updateTreeExpandKeys,\n    toggleTreeExpansion,\n    updateTreeData,\n    loadOrToggle,\n    states: treeStates,\n  } = useTree({\n    data,\n    rowKey,\n  })\n  const {\n    updateCurrentRowData,\n    updateCurrentRow,\n    setCurrentRowKey,\n    states: currentData,\n  } = useCurrent({\n    data,\n    rowKey,\n  })\n  // 适配层，expand-row-keys 在 Expand 与 TreeTable 中都有使用\n  const setExpandRowKeysAdapter = (val: string[]) => {\n    // 这里会触发额外的计算，但为了兼容性，暂时这么做\n    setExpandRowKeys(val)\n    updateTreeExpandKeys(val)\n  }\n\n  // 展开行与 TreeTable 都要使用\n  const toggleRowExpansionAdapter = (row: T, expanded?: boolean) => {\n    const hasExpandColumn = columns.value.some(({ type }) => type === 'expand')\n    if (hasExpandColumn) {\n      toggleRowExpansion(row, expanded)\n    } else {\n      toggleTreeExpansion(row, expanded)\n    }\n  }\n\n  return {\n    assertRowKey,\n    updateColumns,\n    scheduleLayout,\n    isSelected,\n    clearSelection,\n    cleanSelection,\n    getSelectionRows,\n    toggleRowSelection,\n    _toggleAllSelection,\n    toggleAllSelection: null,\n    updateSelectionByRowKey,\n    updateAllSelected,\n    updateFilters,\n    updateCurrentRow,\n    updateSort,\n    execFilter,\n    execSort,\n    execQuery,\n    clearFilter,\n    clearSort,\n    toggleRowExpansion,\n    setExpandRowKeysAdapter,\n    setCurrentRowKey,\n    toggleRowExpansionAdapter,\n    isRowExpanded,\n    updateExpandRows,\n    updateCurrentRowData,\n    loadOrToggle,\n    updateTreeData,\n    states: {\n      tableSize,\n      rowKey,\n      data,\n      _data,\n      isComplex,\n      _columns,\n      originColumns,\n      columns,\n      fixedColumns,\n      rightFixedColumns,\n      leafColumns,\n      fixedLeafColumns,\n      rightFixedLeafColumns,\n      updateOrderFns,\n      leafColumnsLength,\n      fixedLeafColumnsLength,\n      rightFixedLeafColumnsLength,\n      isAllSelected,\n      selection,\n      reserveSelection,\n      selectOnIndeterminate,\n      selectable,\n      filters,\n      filteredData,\n      sortingColumn,\n      sortProp,\n      sortOrder,\n      hoverRow,\n      ...expandStates,\n      ...treeStates,\n      ...currentData,\n    },\n  }\n}\n\nexport default useWatcher\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}