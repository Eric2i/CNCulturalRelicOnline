{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, computed, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementBlock, Fragment, renderList, createVNode, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport ElCascaderNode from './node2.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { generateId } from '../../../utils/rand.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElCascaderMenu\",\n  components: {\n    Loading,\n    ElIcon,\n    ElScrollbar,\n    ElCascaderNode\n  },\n  props: {\n    nodes: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const instance = getCurrentInstance();\n    const ns = useNamespace(\"cascader-menu\");\n    const {\n      t\n    } = useLocale();\n    const id = generateId();\n    let activeNode = null;\n    let hoverTimer = null;\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    const hoverZone = ref(null);\n    const isEmpty = computed(() => !props.nodes.length);\n    const isLoading = computed(() => !panel.initialLoaded);\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`);\n    const handleExpand = e => {\n      activeNode = e.target;\n    };\n    const handleMouseMove = e => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return;\n      if (activeNode.contains(e.target)) {\n        clearHoverTimer();\n        const el = instance.vnode.el;\n        const {\n          left\n        } = el.getBoundingClientRect();\n        const {\n          offsetWidth,\n          offsetHeight\n        } = el;\n        const startX = e.clientX - left;\n        const top = activeNode.offsetTop;\n        const bottom = top + activeNode.offsetHeight;\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `;\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);\n      }\n    };\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return;\n      clearTimeout(hoverTimer);\n      hoverTimer = null;\n    };\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return;\n      hoverZone.value.innerHTML = \"\";\n      clearHoverTimer();\n    };\n    return {\n      ns,\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_cascader_node = resolveComponent(\"el-cascader-node\");\n  const _component_loading = resolveComponent(\"loading\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n  return openBlock(), createBlock(_component_el_scrollbar, {\n    key: _ctx.menuId,\n    tag: \"ul\",\n    role: \"menu\",\n    class: normalizeClass(_ctx.ns.b()),\n    \"wrap-class\": _ctx.ns.e(\"wrap\"),\n    \"view-class\": [_ctx.ns.e(\"list\"), _ctx.ns.is(\"empty\", _ctx.isEmpty)],\n    onMousemove: _ctx.handleMouseMove,\n    onMouseleave: _ctx.clearHoverZone\n  }, {\n    default: withCtx(() => {\n      var _a;\n      return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.nodes, node => {\n        return openBlock(), createBlock(_component_el_cascader_node, {\n          key: node.uid,\n          node,\n          \"menu-id\": _ctx.menuId,\n          onExpand: _ctx.handleExpand\n        }, null, 8, [\"node\", \"menu-id\", \"onExpand\"]);\n      }), 128)), _ctx.isLoading ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, [createVNode(_component_el_icon, {\n        size: \"14\",\n        class: normalizeClass(_ctx.ns.is(\"loading\"))\n      }, {\n        default: withCtx(() => [createVNode(_component_loading)]),\n        _: 1\n      }, 8, [\"class\"]), createTextVNode(\" \" + toDisplayString(_ctx.t(\"el.cascader.loading\")), 1)], 2)) : _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, toDisplayString(_ctx.t(\"el.cascader.noData\")), 3)) : ((_a = _ctx.panel) == null ? void 0 : _a.isHoverMenu) ? (openBlock(), createElementBlock(\"svg\", {\n        key: 2,\n        ref: \"hoverZone\",\n        class: normalizeClass(_ctx.ns.e(\"hover-zone\"))\n      }, null, 2)) : createCommentVNode(\"v-if\", true)];\n    }),\n    _: 1\n  }, 8, [\"class\", \"wrap-class\", \"view-class\", \"onMousemove\", \"onMouseleave\"]);\n}\nvar ElCascaderMenu = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/menu.vue\"]]);\nexport { ElCascaderMenu as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","Loading","ElIcon","ElScrollbar","ElCascaderNode","props","nodes","type","Array","required","index","Number","setup","instance","getCurrentInstance","ns","useNamespace","t","useLocale","id","generateId","activeNode","hoverTimer","panel","inject","CASCADER_PANEL_INJECTION_KEY","hoverZone","ref","isEmpty","computed","length","isLoading","initialLoaded","menuId","handleExpand","e","target","handleMouseMove","isHoverMenu","value","contains","clearHoverTimer","el","vnode","left","getBoundingClientRect","offsetWidth","offsetHeight","startX","clientX","top","offsetTop","bottom","innerHTML","window","setTimeout","clearHoverZone","config","hoverThreshold","clearTimeout","createBlock","_component_el_scrollbar","key","_ctx","tag","role","class","normalizeClass","b","is","onMousemove","onMouseleave","_a","openBlock","createElementBlock","Fragment","renderList","node","_component_el_cascader_node","uid","createVNode","_component_el_icon","size","default","withCtx","_","createTextVNode","toDisplayString"],"sources":["../../../../../../packages/components/cascader-panel/src/menu.vue"],"sourcesContent":["<template>\n  <el-scrollbar\n    :key=\"menuId\"\n    tag=\"ul\"\n    role=\"menu\"\n    :class=\"ns.b()\"\n    :wrap-class=\"ns.e('wrap')\"\n    :view-class=\"[ns.e('list'), ns.is('empty', isEmpty)]\"\n    @mousemove=\"handleMouseMove\"\n    @mouseleave=\"clearHoverZone\"\n  >\n    <el-cascader-node\n      v-for=\"node in nodes\"\n      :key=\"node.uid\"\n      :node=\"node\"\n      :menu-id=\"menuId\"\n      @expand=\"handleExpand\"\n    />\n    <div v-if=\"isLoading\" :class=\"ns.e('empty-text')\">\n      <el-icon size=\"14\" :class=\"ns.is('loading')\">\n        <loading />\n      </el-icon>\n      {{ t('el.cascader.loading') }}\n    </div>\n    <div v-else-if=\"isEmpty\" :class=\"ns.e('empty-text')\">\n      {{ t('el.cascader.noData') }}\n    </div>\n    <svg\n      v-else-if=\"panel?.isHoverMenu\"\n      ref=\"hoverZone\"\n      :class=\"ns.e('hover-zone')\"\n    />\n  </el-scrollbar>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, inject, ref } from 'vue'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { generateId } from '@element-plus/utils'\nimport { Loading } from '@element-plus/icons-vue'\nimport ElIcon from '@element-plus/components/icon'\nimport ElCascaderNode from './node.vue'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { default as CascaderNode } from './node'\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\n\nexport default defineComponent({\n  name: 'ElCascaderMenu',\n\n  components: {\n    Loading,\n    ElIcon,\n    ElScrollbar,\n    ElCascaderNode,\n  },\n\n  props: {\n    nodes: {\n      type: Array as PropType<CascaderNode[]>,\n      required: true,\n    },\n    index: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const ns = useNamespace('cascader-menu')\n\n    const { t } = useLocale()\n    const id = generateId()\n    let activeNode: Nullable<HTMLElement> = null\n    let hoverTimer: Nullable<number> = null\n\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\n    const hoverZone = ref<null | SVGSVGElement>(null)\n\n    const isEmpty = computed(() => !props.nodes.length)\n    const isLoading = computed(() => !panel.initialLoaded)\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`)\n\n    const handleExpand = (e: MouseEvent) => {\n      activeNode = e.target as HTMLElement\n    }\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return\n\n      if (activeNode.contains(e.target as HTMLElement)) {\n        clearHoverTimer()\n\n        const el = instance.vnode.el as HTMLElement\n        const { left } = el.getBoundingClientRect()\n        const { offsetWidth, offsetHeight } = el\n        const startX = e.clientX - left\n        const top = activeNode.offsetTop\n        const bottom = top + activeNode.offsetHeight\n\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(\n          clearHoverZone,\n          panel.config.hoverThreshold\n        )\n      }\n    }\n\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return\n      clearTimeout(hoverTimer)\n      hoverTimer = null\n    }\n\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return\n      hoverZone.value.innerHTML = ''\n      clearHoverTimer()\n    }\n    return {\n      ns,\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}