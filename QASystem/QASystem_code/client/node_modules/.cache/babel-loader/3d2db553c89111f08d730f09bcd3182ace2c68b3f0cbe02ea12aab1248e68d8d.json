{"ast":null,"code":"import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, unref, renderSlot, createVNode, Transition, withCtx, withDirectives, createElementVNode, toDisplayString, vShow } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { badgeProps } from './badge.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isNumber } from '@vueuse/core';\nconst _hoisted_1 = [\"textContent\"];\nconst __default__ = defineComponent({\n  name: \"ElBadge\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: badgeProps,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"badge\");\n    const content = computed(() => {\n      if (props.isDot) return \"\";\n      if (isNumber(props.value) && isNumber(props.max)) {\n        return props.max < props.value ? `${props.max}+` : `${props.value}`;\n      }\n      return `${props.value}`;\n    });\n    expose({\n      content\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass(unref(ns).b())\n      }, [renderSlot(_ctx.$slots, \"default\"), createVNode(Transition, {\n        name: `${unref(ns).namespace.value}-zoom-in-center`,\n        persisted: \"\"\n      }, {\n        default: withCtx(() => [withDirectives(createElementVNode(\"sup\", {\n          class: normalizeClass([unref(ns).e(\"content\"), unref(ns).em(\"content\", _ctx.type), unref(ns).is(\"fixed\", !!_ctx.$slots.default), unref(ns).is(\"dot\", _ctx.isDot)]),\n          textContent: toDisplayString(unref(content))\n        }, null, 10, _hoisted_1), [[vShow, !_ctx.hidden && (unref(content) || _ctx.isDot)]])]),\n        _: 1\n      }, 8, [\"name\"])], 2);\n    };\n  }\n});\nvar Badge = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/badge/src/badge.vue\"]]);\nexport { Badge as default };","map":{"version":3,"names":["name","ns","useNamespace","content","computed","props","isDot","isNumber","value","max","expose"],"sources":["../../../../../../packages/components/badge/src/badge.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\">\n    <slot />\n    <transition :name=\"`${ns.namespace.value}-zoom-in-center`\">\n      <sup\n        v-show=\"!hidden && (content || isDot)\"\n        :class=\"[\n          ns.e('content'),\n          ns.em('content', type),\n          ns.is('fixed', !!$slots.default),\n          ns.is('dot', isDot),\n        ]\"\n        v-text=\"content\"\n      />\n    </transition>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { isNumber } from '@element-plus/utils'\nimport { badgeProps } from './badge'\n\ndefineOptions({\n  name: 'ElBadge',\n})\n\nconst props = defineProps(badgeProps)\n\nconst ns = useNamespace('badge')\n\nconst content = computed<string>(() => {\n  if (props.isDot) return ''\n\n  if (isNumber(props.value) && isNumber(props.max)) {\n    return props.max < props.value ? `${props.max}+` : `${props.value}`\n  }\n  return `${props.value}`\n})\n\ndefineExpose({\n  /** @description badge content */\n  content,\n})\n</script>\n"],"mappings":";;;;;;;;mCAwBc;EACZA,IAAM;AACR;;;;;;;;IAIM,MAAAC,EAAA,GAAKC,YAAA,CAAa,OAAO;IAEzB,MAAAC,OAAA,GAAUC,QAAA,CAAiB,MAAM;MACrC,IAAIC,KAAM,CAAAC,KAAA,EAAc;MAExB,IAAIC,QAAA,CAASF,KAAM,CAAAG,KAAK,KAAKD,QAAS,CAAAF,KAAA,CAAMI,GAAG,CAAG;QACzC,OAAAJ,KAAA,CAAMI,GAAA,GAAMJ,KAAM,CAAAG,KAAA,GAAQ,GAAGH,KAAM,CAAAI,GAAA,MAAS,GAAGJ,KAAM,CAAAG,KAAA;MAAA;MAE9D,OAAO,GAAGH,KAAM,CAAAG,KAAA;IAAA,CACjB;IAEYE,MAAA;MAEXP;IAAA,CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}