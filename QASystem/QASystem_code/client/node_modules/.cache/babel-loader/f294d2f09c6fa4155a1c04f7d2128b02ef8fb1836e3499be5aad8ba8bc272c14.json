{"ast":null,"code":"import { defineComponent, useSlots, shallowRef, computed, onBeforeUnmount, provide, toRef, openBlock, createElementBlock, unref, createBlock, createSlots, withCtx, createVNode, mergeProps, renderSlot, createCommentVNode } from 'vue';\nimport '../../form/index.mjs';\nimport { uploadContextKey } from './constants.mjs';\nimport UploadList from './upload-list2.mjs';\nimport UploadContent from './upload-content2.mjs';\nimport { useHandlers } from './use-handlers.mjs';\nimport { uploadProps } from './upload.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nconst __default__ = defineComponent({\n  name: \"ElUpload\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: uploadProps,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const slots = useSlots();\n    const disabled = useFormDisabled();\n    const uploadRef = shallowRef();\n    const {\n      abort,\n      submit,\n      clearFiles,\n      uploadFiles,\n      handleStart,\n      handleError,\n      handleRemove,\n      handleSuccess,\n      handleProgress\n    } = useHandlers(props, uploadRef);\n    const isPictureCard = computed(() => props.listType === \"picture-card\");\n    const uploadContentProps = computed(() => ({\n      ...props,\n      fileList: uploadFiles.value,\n      onStart: handleStart,\n      onProgress: handleProgress,\n      onSuccess: handleSuccess,\n      onError: handleError,\n      onRemove: handleRemove\n    }));\n    onBeforeUnmount(() => {\n      uploadFiles.value.forEach(({\n        url\n      }) => {\n        if (url == null ? void 0 : url.startsWith(\"blob:\")) URL.revokeObjectURL(url);\n      });\n    });\n    provide(uploadContextKey, {\n      accept: toRef(props, \"accept\")\n    });\n    expose({\n      abort,\n      submit,\n      clearFiles,\n      handleStart,\n      handleRemove\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", null, [unref(isPictureCard) && _ctx.showFileList ? (openBlock(), createBlock(UploadList, {\n        key: 0,\n        disabled: unref(disabled),\n        \"list-type\": _ctx.listType,\n        files: unref(uploadFiles),\n        \"handle-preview\": _ctx.onPreview,\n        onRemove: unref(handleRemove)\n      }, createSlots({\n        append: withCtx(() => [createVNode(UploadContent, mergeProps({\n          ref_key: \"uploadRef\",\n          ref: uploadRef\n        }, unref(uploadContentProps)), {\n          default: withCtx(() => [unref(slots).trigger ? renderSlot(_ctx.$slots, \"trigger\", {\n            key: 0\n          }) : createCommentVNode(\"v-if\", true), !unref(slots).trigger && unref(slots).default ? renderSlot(_ctx.$slots, \"default\", {\n            key: 1\n          }) : createCommentVNode(\"v-if\", true)]),\n          _: 3\n        }, 16)]),\n        _: 2\n      }, [_ctx.$slots.file ? {\n        name: \"default\",\n        fn: withCtx(({\n          file\n        }) => [renderSlot(_ctx.$slots, \"file\", {\n          file\n        })])\n      } : void 0]), 1032, [\"disabled\", \"list-type\", \"files\", \"handle-preview\", \"onRemove\"])) : createCommentVNode(\"v-if\", true), !unref(isPictureCard) || unref(isPictureCard) && !_ctx.showFileList ? (openBlock(), createBlock(UploadContent, mergeProps({\n        key: 1,\n        ref_key: \"uploadRef\",\n        ref: uploadRef\n      }, unref(uploadContentProps)), {\n        default: withCtx(() => [unref(slots).trigger ? renderSlot(_ctx.$slots, \"trigger\", {\n          key: 0\n        }) : createCommentVNode(\"v-if\", true), !unref(slots).trigger && unref(slots).default ? renderSlot(_ctx.$slots, \"default\", {\n          key: 1\n        }) : createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 16)) : createCommentVNode(\"v-if\", true), _ctx.$slots.trigger ? renderSlot(_ctx.$slots, \"default\", {\n        key: 2\n      }) : createCommentVNode(\"v-if\", true), renderSlot(_ctx.$slots, \"tip\"), !unref(isPictureCard) && _ctx.showFileList ? (openBlock(), createBlock(UploadList, {\n        key: 3,\n        disabled: unref(disabled),\n        \"list-type\": _ctx.listType,\n        files: unref(uploadFiles),\n        \"handle-preview\": _ctx.onPreview,\n        onRemove: unref(handleRemove)\n      }, createSlots({\n        _: 2\n      }, [_ctx.$slots.file ? {\n        name: \"default\",\n        fn: withCtx(({\n          file\n        }) => [renderSlot(_ctx.$slots, \"file\", {\n          file\n        })])\n      } : void 0]), 1032, [\"disabled\", \"list-type\", \"files\", \"handle-preview\", \"onRemove\"])) : createCommentVNode(\"v-if\", true)]);\n    };\n  }\n});\nvar Upload = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload.vue\"]]);\nexport { Upload as default };","map":{"version":3,"names":["name","slots","useSlots","disabled","useFormDisabled","uploadRef","shallowRef","abort","submit","clearFiles","uploadFiles","handleStart","handleError","handleRemove","handleSuccess","handleProgress","useHandlers","props","isPictureCard","computed","listType","uploadContentProps","fileList","value","onStart","onProgress","onSuccess","onError","onRemove","onBeforeUnmount","forEach","url","startsWith","URL","revokeObjectURL","provide","uploadContextKey","accept","toRef","expose"],"sources":["../../../../../../packages/components/upload/src/upload.vue"],"sourcesContent":["<template>\n  <div>\n    <upload-list\n      v-if=\"isPictureCard && showFileList\"\n      :disabled=\"disabled\"\n      :list-type=\"listType\"\n      :files=\"uploadFiles\"\n      :handle-preview=\"onPreview\"\n      @remove=\"handleRemove\"\n    >\n      <template v-if=\"$slots.file\" #default=\"{ file }\">\n        <slot name=\"file\" :file=\"file\" />\n      </template>\n      <template #append>\n        <upload-content ref=\"uploadRef\" v-bind=\"uploadContentProps\">\n          <slot v-if=\"slots.trigger\" name=\"trigger\" />\n          <slot v-if=\"!slots.trigger && slots.default\" />\n        </upload-content>\n      </template>\n    </upload-list>\n\n    <upload-content\n      v-if=\"!isPictureCard || (isPictureCard && !showFileList)\"\n      ref=\"uploadRef\"\n      v-bind=\"uploadContentProps\"\n    >\n      <slot v-if=\"slots.trigger\" name=\"trigger\" />\n      <slot v-if=\"!slots.trigger && slots.default\" />\n    </upload-content>\n\n    <slot v-if=\"$slots.trigger\" />\n    <slot name=\"tip\" />\n    <upload-list\n      v-if=\"!isPictureCard && showFileList\"\n      :disabled=\"disabled\"\n      :list-type=\"listType\"\n      :files=\"uploadFiles\"\n      :handle-preview=\"onPreview\"\n      @remove=\"handleRemove\"\n    >\n      <template v-if=\"$slots.file\" #default=\"{ file }\">\n        <slot name=\"file\" :file=\"file\" />\n      </template>\n    </upload-list>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  onBeforeUnmount,\n  provide,\n  shallowRef,\n  toRef,\n  useSlots,\n} from 'vue'\nimport { useFormDisabled } from '@element-plus/components/form'\nimport { uploadContextKey } from './constants'\nimport UploadList from './upload-list.vue'\nimport UploadContent from './upload-content.vue'\nimport { useHandlers } from './use-handlers'\nimport { uploadProps } from './upload'\n\nimport type {\n  UploadContentInstance,\n  UploadContentProps,\n} from './upload-content'\n\ndefineOptions({\n  name: 'ElUpload',\n})\n\nconst props = defineProps(uploadProps)\n\nconst slots = useSlots()\nconst disabled = useFormDisabled()\n\nconst uploadRef = shallowRef<UploadContentInstance>()\nconst {\n  abort,\n  submit,\n  clearFiles,\n  uploadFiles,\n  handleStart,\n  handleError,\n  handleRemove,\n  handleSuccess,\n  handleProgress,\n} = useHandlers(props, uploadRef)\n\nconst isPictureCard = computed(() => props.listType === 'picture-card')\n\nconst uploadContentProps = computed<UploadContentProps>(() => ({\n  ...props,\n  fileList: uploadFiles.value,\n  onStart: handleStart,\n  onProgress: handleProgress,\n  onSuccess: handleSuccess,\n  onError: handleError,\n  onRemove: handleRemove,\n}))\n\nonBeforeUnmount(() => {\n  uploadFiles.value.forEach(({ url }) => {\n    if (url?.startsWith('blob:')) URL.revokeObjectURL(url)\n  })\n})\n\nprovide(uploadContextKey, {\n  accept: toRef(props, 'accept'),\n})\n\ndefineExpose({\n  /** @description cancel upload request */\n  abort,\n  /** @description upload the file list manually */\n  submit,\n  /** @description clear the file list  */\n  clearFiles,\n  /** @description select the file manually */\n  handleStart,\n  /** @description remove the file manually */\n  handleRemove,\n})\n</script>\n"],"mappings":";;;;;;;;;mCAoEc;EACZA,IAAM;AACR;;;;;;;;IAIA,MAAMC,KAAA,GAAQC,QAAS;IACvB,MAAMC,QAAA,GAAWC,eAAgB;IAEjC,MAAMC,SAAA,GAAYC,UAAkC;IAC9C;MACJC,KAAA;MACAC,MAAA;MACAC,UAAA;MACAC,WAAA;MACAC,WAAA;MACAC,WAAA;MACAC,YAAA;MACAC,aAAA;MACAC;IAAA,CACE,GAAAC,WAAA,CAAYC,KAAA,EAAOZ,SAAS;IAEhC,MAAMa,aAAgB,GAAAC,QAAA,CAAS,MAAMF,KAAA,CAAMG,QAAA,KAAa,cAAc;IAEhE,MAAAC,kBAAA,GAAqBF,QAAA,CAA6B,OAAO;MAC7D,GAAGF,KAAA;MACHK,QAAA,EAAUZ,WAAY,CAAAa,KAAA;MACtBC,OAAS,EAAAb,WAAA;MACTc,UAAY,EAAAV,cAAA;MACZW,SAAW,EAAAZ,aAAA;MACXa,OAAS,EAAAf,WAAA;MACTgB,QAAU,EAAAf;IAAA,CACV;IAEFgB,eAAA,CAAgB,MAAM;MACpBnB,WAAA,CAAYa,KAAM,CAAAO,OAAA,CAAQ,CAAC;QAAEC;MAAU;QACjC,IAAAA,GAAA,gBAAuB,IAAAA,GAAA,CAAAC,UAAA,WAAGC,GAAA,CAAIC,eAAA,CAAgBH,GAAG;MAAA,CACtD;IAAA,CACF;IAEDI,OAAA,CAAQC,gBAAkB;MACxBC,MAAA,EAAQC,KAAM,CAAArB,KAAA,EAAO,QAAQ;IAAA,CAC9B;IAEYsB,MAAA;MAEXhC,KAAA;MAEAC,MAAA;MAEAC,UAAA;MAEAE,WAAA;MAEAE;IAAA,CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}