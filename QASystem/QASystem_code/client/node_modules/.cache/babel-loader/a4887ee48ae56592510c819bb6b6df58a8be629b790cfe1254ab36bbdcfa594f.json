{"ast":null,"code":"import './components/config-provider/index.mjs';\nimport './constants/index.mjs';\nimport { version } from './version.mjs';\nimport { INSTALLED_KEY } from './constants/key.mjs';\nimport { provideGlobalConfig } from './components/config-provider/src/hooks/use-global-config.mjs';\nconst makeInstaller = (components = []) => {\n  const install = (app, options) => {\n    if (app[INSTALLED_KEY]) return;\n    app[INSTALLED_KEY] = true;\n    components.forEach(c => app.use(c));\n    if (options) provideGlobalConfig(options, app, true);\n  };\n  return {\n    version,\n    install\n  };\n};\nexport { makeInstaller };","map":{"version":3,"names":["makeInstaller","components","install","app","options","INSTALLED_KEY","forEach","c","use","provideGlobalConfig","version"],"sources":["../../../packages/element-plus/make-installer.ts"],"sourcesContent":["import { provideGlobalConfig } from '@element-plus/components/config-provider'\nimport { INSTALLED_KEY } from '@element-plus/constants'\nimport { version } from './version'\n\nimport type { App, Plugin } from '@vue/runtime-core'\nimport type { ConfigProviderContext } from '@element-plus/components/config-provider'\n\nexport const makeInstaller = (components: Plugin[] = []) => {\n  const install = (app: App, options?: ConfigProviderContext) => {\n    if (app[INSTALLED_KEY]) return\n\n    app[INSTALLED_KEY] = true\n    components.forEach((c) => app.use(c))\n\n    if (options) provideGlobalConfig(options, app, true)\n  }\n\n  return {\n    version,\n    install,\n  }\n}\n"],"mappings":";;;;;AAGY,MAACA,aAAa,GAAGA,CAACC,UAAU,GAAG,EAAE,KAAK;EAChD,MAAMC,OAAO,GAAGA,CAACC,GAAG,EAAEC,OAAO,KAAK;IAChC,IAAID,GAAG,CAACE,aAAa,CAAC,EACpB;IACFF,GAAG,CAACE,aAAa,CAAC,GAAG,IAAI;IACzBJ,UAAU,CAACK,OAAO,CAAEC,CAAC,IAAKJ,GAAG,CAACK,GAAG,CAACD,CAAC,CAAC,CAAC;IACrC,IAAIH,OAAO,EACTK,mBAAmB,CAACL,OAAO,EAAED,GAAG,EAAE,IAAI,CAAC;EAC7C,CAAG;EACD,OAAO;IACLO,OAAO;IACPR;EACJ,CAAG;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}