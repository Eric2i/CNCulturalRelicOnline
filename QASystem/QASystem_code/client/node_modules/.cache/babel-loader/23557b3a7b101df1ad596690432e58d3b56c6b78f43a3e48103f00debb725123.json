{"ast":null,"code":"import { defineComponent, inject, ref, computed, watch, unref, createVNode, mergeProps } from 'vue';\nimport { get } from 'lodash-unified';\nimport '../../../utils/index.mjs';\nimport '../../virtual-list/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport GroupItem from './group-item.mjs';\nimport OptionItem from './option-item.mjs';\nimport { selectV2InjectionKey } from './token.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { isObject } from '@vue/shared';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport DynamicSizeList from '../../virtual-list/src/components/dynamic-size-list.mjs';\nvar ElSelectMenu = defineComponent({\n  name: \"ElSelectDropdown\",\n  props: {\n    data: {\n      type: Array,\n      required: true\n    },\n    hoveringIndex: Number,\n    width: Number\n  },\n  setup(props, {\n    slots,\n    expose\n  }) {\n    const select = inject(selectV2InjectionKey);\n    const ns = useNamespace(\"select\");\n    const cachedHeights = ref([]);\n    const listRef = ref();\n    const size = computed(() => props.data.length);\n    watch(() => size.value, () => {\n      var _a, _b;\n      (_b = (_a = select.popper.value).updatePopper) == null ? void 0 : _b.call(_a);\n    });\n    const isSized = computed(() => isUndefined(select.props.estimatedOptionHeight));\n    const listProps = computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight\n        };\n      }\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: idx => cachedHeights.value[idx]\n      };\n    });\n    const contains = (arr = [], target) => {\n      const {\n        props: {\n          valueKey\n        }\n      } = select;\n      if (!isObject(target)) {\n        return arr.includes(target);\n      }\n      return arr && arr.some(item => {\n        return get(item, valueKey) === get(target, valueKey);\n      });\n    };\n    const isEqual = (selected, target) => {\n      if (!isObject(target)) {\n        return selected === target;\n      } else {\n        const {\n          valueKey\n        } = select.props;\n        return get(selected, valueKey) === get(target, valueKey);\n      }\n    };\n    const isItemSelected = (modelValue, target) => {\n      const {\n        valueKey\n      } = select.props;\n      if (select.props.multiple) {\n        return contains(modelValue, get(target, valueKey));\n      }\n      return isEqual(modelValue, get(target, valueKey));\n    };\n    const isItemDisabled = (modelValue, selected) => {\n      const {\n        disabled,\n        multiple,\n        multipleLimit\n      } = select.props;\n      return disabled || !selected && (multiple ? multipleLimit > 0 && modelValue.length >= multipleLimit : false);\n    };\n    const isItemHovering = target => props.hoveringIndex === target;\n    const scrollToItem = index => {\n      const list = listRef.value;\n      if (list) {\n        list.scrollToItem(index);\n      }\n    };\n    const resetScrollTop = () => {\n      const list = listRef.value;\n      if (list) {\n        list.resetScrollTop();\n      }\n    };\n    expose({\n      listRef,\n      isSized,\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n      scrollToItem,\n      resetScrollTop\n    });\n    const Item = itemProps => {\n      const {\n        index,\n        data,\n        style\n      } = itemProps;\n      const sized = unref(isSized);\n      const {\n        itemSize,\n        estimatedSize\n      } = unref(listProps);\n      const {\n        modelValue\n      } = select.props;\n      const {\n        onSelect,\n        onHover\n      } = select;\n      const item = data[index];\n      if (item.type === \"Group\") {\n        return createVNode(GroupItem, {\n          \"item\": item,\n          \"style\": style,\n          \"height\": sized ? itemSize : estimatedSize\n        }, null);\n      }\n      const isSelected = isItemSelected(modelValue, item);\n      const isDisabled = isItemDisabled(modelValue, isSelected);\n      const isHovering = isItemHovering(index);\n      return createVNode(OptionItem, mergeProps(itemProps, {\n        \"selected\": isSelected,\n        \"disabled\": item.disabled || isDisabled,\n        \"created\": !!item.created,\n        \"hovering\": isHovering,\n        \"item\": item,\n        \"onSelect\": onSelect,\n        \"onHover\": onHover\n      }), {\n        default: props2 => {\n          var _a;\n          return ((_a = slots.default) == null ? void 0 : _a.call(slots, props2)) || createVNode(\"span\", null, [item.label]);\n        }\n      });\n    };\n    const {\n      onKeyboardNavigate,\n      onKeyboardSelect\n    } = select;\n    const onForward = () => {\n      onKeyboardNavigate(\"forward\");\n    };\n    const onBackward = () => {\n      onKeyboardNavigate(\"backward\");\n    };\n    const onEscOrTab = () => {\n      select.expanded = false;\n    };\n    const onKeydown = e => {\n      const {\n        code\n      } = e;\n      const {\n        tab,\n        esc,\n        down,\n        up,\n        enter\n      } = EVENT_CODE;\n      if (code !== tab) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      switch (code) {\n        case tab:\n        case esc:\n          {\n            onEscOrTab();\n            break;\n          }\n        case down:\n          {\n            onForward();\n            break;\n          }\n        case up:\n          {\n            onBackward();\n            break;\n          }\n        case enter:\n          {\n            onKeyboardSelect();\n            break;\n          }\n      }\n    };\n    return () => {\n      var _a;\n      const {\n        data,\n        width\n      } = props;\n      const {\n        height,\n        multiple,\n        scrollbarAlwaysOn\n      } = select.props;\n      if (data.length === 0) {\n        return createVNode(\"div\", {\n          \"class\": ns.b(\"dropdown\"),\n          \"style\": {\n            width: `${width}px`\n          }\n        }, [(_a = slots.empty) == null ? void 0 : _a.call(slots)]);\n      }\n      const List = unref(isSized) ? FixedSizeList : DynamicSizeList;\n      return createVNode(\"div\", {\n        \"class\": [ns.b(\"dropdown\"), ns.is(\"multiple\", multiple)]\n      }, [createVNode(List, mergeProps({\n        \"ref\": listRef\n      }, unref(listProps), {\n        \"className\": ns.be(\"dropdown\", \"list\"),\n        \"scrollbarAlwaysOn\": scrollbarAlwaysOn,\n        \"data\": data,\n        \"height\": height,\n        \"width\": width,\n        \"total\": data.length,\n        \"onKeydown\": onKeydown\n      }), {\n        default: props2 => createVNode(Item, props2, null)\n      })]);\n    };\n  }\n});\nexport { ElSelectMenu as default };","map":{"version":3,"names":["ElSelectMenu","defineComponent","name","props","data","type","Array","required","hoveringIndex","Number","width","slots","expose","select","inject","selectV2InjectionKey","ns","useNamespace","cachedHeights","ref","listRef","size","computed","length","watch","value","_a","_b","popper","updatePopper","call","isSized","isUndefined","estimatedOptionHeight","listProps","itemSize","itemHeight","estimatedSize","idx","contains","arr","target","valueKey","isObject","includes","some","item","get","isEqual","selected","isItemSelected","modelValue","multiple","isItemDisabled","disabled","multipleLimit","scrollToItem","index","list","resetScrollTop","isItemHovering","style","sized","unref","onHover","createVNode","GroupItem","isSelected","isDisabled","isHovering","OptionItem","mergeProps","itemProps","created","default","props2","label","onKeyboardNavigate","onKeyboardSelect","onForward","onBackward","onEscOrTab","expanded","onKeydown","e","tab","esc","down","enter","EVENT_CODE","code","stopPropagation","up","scrollbarAlwaysOn","b","empty","List","FixedSizeList","DynamicSizeList","is","be","height","Item"],"sources":["../../../../../../packages/components/select-v2/src/select-dropdown.tsx"],"sourcesContent":["import { computed, defineComponent, inject, ref, unref, watch } from 'vue'\nimport { get } from 'lodash-unified'\nimport { isObject, isUndefined } from '@element-plus/utils'\nimport {\n  DynamicSizeList,\n  FixedSizeList,\n} from '@element-plus/components/virtual-list'\nimport { useNamespace } from '@element-plus/hooks'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport GroupItem from './group-item.vue'\nimport OptionItem from './option-item.vue'\n\nimport { selectV2InjectionKey } from './token'\n\nimport type { ItemProps } from '@element-plus/components/virtual-list'\nimport type { Option, OptionItemProps } from './select.types'\n\nexport default defineComponent({\n  name: 'ElSelectDropdown',\n\n  props: {\n    data: {\n      type: Array,\n      required: true,\n    },\n    hoveringIndex: Number,\n    width: Number,\n  },\n  setup(props, { slots, expose }) {\n    const select = inject(selectV2InjectionKey)!\n    const ns = useNamespace('select')\n    const cachedHeights = ref<Array<number>>([])\n\n    const listRef = ref()\n\n    const size = computed(() => props.data.length)\n    watch(\n      () => size.value,\n      () => {\n        select.popper.value.updatePopper?.()\n      }\n    )\n\n    const isSized = computed(() =>\n      isUndefined(select.props.estimatedOptionHeight)\n    )\n    const listProps = computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight,\n        }\n      }\n\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: (idx: number) => cachedHeights.value[idx],\n      }\n    })\n\n    const contains = (arr: Array<any> = [], target: any) => {\n      const {\n        props: { valueKey },\n      } = select\n\n      if (!isObject(target)) {\n        return arr.includes(target)\n      }\n\n      return (\n        arr &&\n        arr.some((item) => {\n          return get(item, valueKey) === get(target, valueKey)\n        })\n      )\n    }\n    const isEqual = (selected: unknown, target: unknown) => {\n      if (!isObject(target)) {\n        return selected === target\n      } else {\n        const { valueKey } = select.props\n        return get(selected, valueKey) === get(target, valueKey)\n      }\n    }\n\n    const isItemSelected = (modelValue: any[] | any, target: Option) => {\n      const { valueKey } = select.props\n      if (select.props.multiple) {\n        return contains(modelValue, get(target, valueKey))\n      }\n      return isEqual(modelValue, get(target, valueKey))\n    }\n\n    const isItemDisabled = (modelValue: any[] | any, selected: boolean) => {\n      const { disabled, multiple, multipleLimit } = select.props\n      return (\n        disabled ||\n        (!selected &&\n          (multiple\n            ? multipleLimit > 0 && modelValue.length >= multipleLimit\n            : false))\n      )\n    }\n\n    const isItemHovering = (target: number) => props.hoveringIndex === target\n\n    const scrollToItem = (index: number) => {\n      const list = listRef.value as any\n      if (list) {\n        list.scrollToItem(index)\n      }\n    }\n\n    const resetScrollTop = () => {\n      const list = listRef.value as any\n      if (list) {\n        list.resetScrollTop()\n      }\n    }\n\n    expose({\n      listRef,\n      isSized,\n\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n      scrollToItem,\n      resetScrollTop,\n    })\n\n    const Item = (itemProps: ItemProps<any>) => {\n      const { index, data, style } = itemProps\n      const sized = unref(isSized)\n      const { itemSize, estimatedSize } = unref(listProps)\n      const { modelValue } = select.props\n      const { onSelect, onHover } = select\n      const item = data[index]\n      if (item.type === 'Group') {\n        return (\n          <GroupItem\n            item={item}\n            style={style}\n            height={(sized ? itemSize : estimatedSize) as number}\n          />\n        )\n      }\n\n      const isSelected = isItemSelected(modelValue, item)\n      const isDisabled = isItemDisabled(modelValue, isSelected)\n      const isHovering = isItemHovering(index)\n      return (\n        <OptionItem\n          {...itemProps}\n          selected={isSelected}\n          disabled={item.disabled || isDisabled}\n          created={!!item.created}\n          hovering={isHovering}\n          item={item}\n          onSelect={onSelect}\n          onHover={onHover}\n        >\n          {{\n            default: (props: OptionItemProps) =>\n              slots.default?.(props) || <span>{item.label}</span>,\n          }}\n        </OptionItem>\n      )\n    }\n\n    // computed\n    const { onKeyboardNavigate, onKeyboardSelect } = select\n\n    const onForward = () => {\n      onKeyboardNavigate('forward')\n    }\n\n    const onBackward = () => {\n      onKeyboardNavigate('backward')\n    }\n\n    const onEscOrTab = () => {\n      select.expanded = false\n    }\n\n    const onKeydown = (e: KeyboardEvent) => {\n      const { code } = e\n      const { tab, esc, down, up, enter } = EVENT_CODE\n      if (code !== tab) {\n        e.preventDefault()\n        e.stopPropagation()\n      }\n\n      switch (code) {\n        case tab:\n        case esc: {\n          onEscOrTab()\n          break\n        }\n        case down: {\n          onForward()\n          break\n        }\n        case up: {\n          onBackward()\n          break\n        }\n        case enter: {\n          onKeyboardSelect()\n          break\n        }\n      }\n    }\n\n    return () => {\n      const { data, width } = props\n      const { height, multiple, scrollbarAlwaysOn } = select.props\n\n      if (data.length === 0) {\n        return (\n          <div\n            class={ns.b('dropdown')}\n            style={{\n              width: `${width}px`,\n            }}\n          >\n            {slots.empty?.()}\n          </div>\n        )\n      }\n\n      const List = unref(isSized) ? FixedSizeList : DynamicSizeList\n\n      return (\n        <div class={[ns.b('dropdown'), ns.is('multiple', multiple)]}>\n          <List\n            ref={listRef}\n            {...unref(listProps)}\n            className={ns.be('dropdown', 'list')}\n            scrollbarAlwaysOn={scrollbarAlwaysOn}\n            data={data}\n            height={height}\n            width={width}\n            total={data.length}\n            // @ts-ignore - dts problem\n            onKeydown={onKeydown}\n          >\n            {{\n              default: (props: ItemProps<any>) => <Item {...props} />,\n            }}\n          </List>\n        </div>\n      )\n    }\n  },\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}