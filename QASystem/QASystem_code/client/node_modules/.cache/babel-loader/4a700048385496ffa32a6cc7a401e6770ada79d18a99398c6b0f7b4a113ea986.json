{"ast":null,"code":"import { defineComponent, nextTick, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, withDirectives, isRef, vModelRadio, withModifiers, renderSlot, createTextVNode, toDisplayString } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { radioProps, radioEmits } from './radio.mjs';\nimport { useRadio } from './use-radio.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _hoisted_1 = [\"value\", \"name\", \"disabled\"];\nconst __default__ = defineComponent({\n  name: \"ElRadio\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: radioProps,\n  emits: radioEmits,\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"radio\");\n    const {\n      radioRef,\n      radioGroup,\n      focus,\n      size,\n      disabled,\n      modelValue\n    } = useRadio(props, emit);\n    function handleChange() {\n      nextTick(() => emit(\"change\", modelValue.value));\n    }\n    return (_ctx, _cache) => {\n      var _a;\n      return openBlock(), createElementBlock(\"label\", {\n        class: normalizeClass([unref(ns).b(), unref(ns).is(\"disabled\", unref(disabled)), unref(ns).is(\"focus\", unref(focus)), unref(ns).is(\"bordered\", _ctx.border), unref(ns).is(\"checked\", unref(modelValue) === _ctx.label), unref(ns).m(unref(size))])\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass([unref(ns).e(\"input\"), unref(ns).is(\"disabled\", unref(disabled)), unref(ns).is(\"checked\", unref(modelValue) === _ctx.label)])\n      }, [withDirectives(createElementVNode(\"input\", {\n        ref_key: \"radioRef\",\n        ref: radioRef,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => isRef(modelValue) ? modelValue.value = $event : null),\n        class: normalizeClass(unref(ns).e(\"original\")),\n        value: _ctx.label,\n        name: _ctx.name || ((_a = unref(radioGroup)) == null ? void 0 : _a.name),\n        disabled: unref(disabled),\n        type: \"radio\",\n        onFocus: _cache[1] || (_cache[1] = $event => focus.value = true),\n        onBlur: _cache[2] || (_cache[2] = $event => focus.value = false),\n        onChange: handleChange\n      }, null, 42, _hoisted_1), [[vModelRadio, unref(modelValue)]]), createElementVNode(\"span\", {\n        class: normalizeClass(unref(ns).e(\"inner\"))\n      }, null, 2)], 2), createElementVNode(\"span\", {\n        class: normalizeClass(unref(ns).e(\"label\")),\n        onKeydown: _cache[3] || (_cache[3] = withModifiers(() => {}, [\"stop\"]))\n      }, [renderSlot(_ctx.$slots, \"default\", {}, () => [createTextVNode(toDisplayString(_ctx.label), 1)])], 34)], 2);\n    };\n  }\n});\nvar Radio = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/radio/src/radio.vue\"]]);\nexport { Radio as default };","map":{"version":3,"names":["name","ns","useNamespace","radioRef","radioGroup","focus","size","disabled","modelValue","useRadio","props","emit","handleChange","nextTick","value"],"sources":["../../../../../../packages/components/radio/src/radio.vue"],"sourcesContent":["<template>\n  <label\n    :class=\"[\n      ns.b(),\n      ns.is('disabled', disabled),\n      ns.is('focus', focus),\n      ns.is('bordered', border),\n      ns.is('checked', modelValue === label),\n      ns.m(size),\n    ]\"\n  >\n    <span\n      :class=\"[\n        ns.e('input'),\n        ns.is('disabled', disabled),\n        ns.is('checked', modelValue === label),\n      ]\"\n    >\n      <input\n        ref=\"radioRef\"\n        v-model=\"modelValue\"\n        :class=\"ns.e('original')\"\n        :value=\"label\"\n        :name=\"name || radioGroup?.name\"\n        :disabled=\"disabled\"\n        type=\"radio\"\n        @focus=\"focus = true\"\n        @blur=\"focus = false\"\n        @change=\"handleChange\"\n      />\n      <span :class=\"ns.e('inner')\" />\n    </span>\n    <span :class=\"ns.e('label')\" @keydown.stop>\n      <slot>\n        {{ label }}\n      </slot>\n    </span>\n  </label>\n</template>\n\n<script lang=\"ts\" setup>\nimport { nextTick } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { radioEmits, radioProps } from './radio'\nimport { useRadio } from './use-radio'\n\ndefineOptions({\n  name: 'ElRadio',\n})\n\nconst props = defineProps(radioProps)\nconst emit = defineEmits(radioEmits)\n\nconst ns = useNamespace('radio')\nconst { radioRef, radioGroup, focus, size, disabled, modelValue } = useRadio(\n  props,\n  emit\n)\n\nfunction handleChange() {\n  nextTick(() => emit('change', modelValue.value))\n}\n</script>\n"],"mappings":";;;;;;;mCA8Cc;EACZA,IAAM;AACR;;;;;;;;;IAKM,MAAAC,EAAA,GAAKC,YAAA,CAAa,OAAO;IACzB;MAAEC,QAAA;MAAUC,UAAY;MAAAC,KAAA;MAAOC,IAAA;MAAMC,QAAU;MAAAC;IAAA,IAAeC,QAClE,CAAAC,KAAA,EACAC,IACF;IAEwB,SAAAC,aAAA;MACtBC,QAAA,CAAS,MAAMF,IAAA,CAAK,QAAU,EAAAH,UAAA,CAAWM,KAAK,CAAC;IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}