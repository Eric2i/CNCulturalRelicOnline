{"ast":null,"code":"import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, normalizeStyle, renderSlot, toDisplayString, createCommentVNode, createBlock, withCtx, resolveDynamicComponent } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { WarningFilled, CircleCheck, CircleClose, Check, Close } from '@element-plus/icons-vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { progressProps } from './progress.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isString, isFunction } from '@vue/shared';\nconst _hoisted_1 = [\"aria-valuenow\"];\nconst _hoisted_2 = {\n  viewBox: \"0 0 100 100\"\n};\nconst _hoisted_3 = [\"d\", \"stroke\", \"stroke-width\"];\nconst _hoisted_4 = [\"d\", \"stroke\", \"opacity\", \"stroke-linecap\", \"stroke-width\"];\nconst _hoisted_5 = {\n  key: 0\n};\nconst __default__ = defineComponent({\n  name: \"ElProgress\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: progressProps,\n  setup(__props) {\n    const props = __props;\n    const STATUS_COLOR_MAP = {\n      success: \"#13ce66\",\n      exception: \"#ff4949\",\n      warning: \"#e6a23c\",\n      default: \"#20a0ff\"\n    };\n    const ns = useNamespace(\"progress\");\n    const barStyle = computed(() => ({\n      width: `${props.percentage}%`,\n      animationDuration: `${props.duration}s`,\n      backgroundColor: getCurrentColor(props.percentage)\n    }));\n    const relativeStrokeWidth = computed(() => (props.strokeWidth / props.width * 100).toFixed(1));\n    const radius = computed(() => {\n      if ([\"circle\", \"dashboard\"].includes(props.type)) {\n        return Number.parseInt(`${50 - Number.parseFloat(relativeStrokeWidth.value) / 2}`, 10);\n      }\n      return 0;\n    });\n    const trackPath = computed(() => {\n      const r = radius.value;\n      const isDashboard = props.type === \"dashboard\";\n      return `\n          M 50 50\n          m 0 ${isDashboard ? \"\" : \"-\"}${r}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? \"-\" : \"\"}${r * 2}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? \"\" : \"-\"}${r * 2}\n          `;\n    });\n    const perimeter = computed(() => 2 * Math.PI * radius.value);\n    const rate = computed(() => props.type === \"dashboard\" ? 0.75 : 1);\n    const strokeDashoffset = computed(() => {\n      const offset = -1 * perimeter.value * (1 - rate.value) / 2;\n      return `${offset}px`;\n    });\n    const trailPathStyle = computed(() => ({\n      strokeDasharray: `${perimeter.value * rate.value}px, ${perimeter.value}px`,\n      strokeDashoffset: strokeDashoffset.value\n    }));\n    const circlePathStyle = computed(() => ({\n      strokeDasharray: `${perimeter.value * rate.value * (props.percentage / 100)}px, ${perimeter.value}px`,\n      strokeDashoffset: strokeDashoffset.value,\n      transition: \"stroke-dasharray 0.6s ease 0s, stroke 0.6s ease, opacity ease 0.6s\"\n    }));\n    const stroke = computed(() => {\n      let ret;\n      if (props.color) {\n        ret = getCurrentColor(props.percentage);\n      } else {\n        ret = STATUS_COLOR_MAP[props.status] || STATUS_COLOR_MAP.default;\n      }\n      return ret;\n    });\n    const statusIcon = computed(() => {\n      if (props.status === \"warning\") {\n        return WarningFilled;\n      }\n      if (props.type === \"line\") {\n        return props.status === \"success\" ? CircleCheck : CircleClose;\n      } else {\n        return props.status === \"success\" ? Check : Close;\n      }\n    });\n    const progressTextSize = computed(() => {\n      return props.type === \"line\" ? 12 + props.strokeWidth * 0.4 : props.width * 0.111111 + 2;\n    });\n    const content = computed(() => props.format(props.percentage));\n    function getColors(color) {\n      const span = 100 / color.length;\n      const seriesColors = color.map((seriesColor, index) => {\n        if (isString(seriesColor)) {\n          return {\n            color: seriesColor,\n            percentage: (index + 1) * span\n          };\n        }\n        return seriesColor;\n      });\n      return seriesColors.sort((a, b) => a.percentage - b.percentage);\n    }\n    const getCurrentColor = percentage => {\n      var _a;\n      const {\n        color\n      } = props;\n      if (isFunction(color)) {\n        return color(percentage);\n      } else if (isString(color)) {\n        return color;\n      } else {\n        const colors = getColors(color);\n        for (const color2 of colors) {\n          if (color2.percentage > percentage) return color2.color;\n        }\n        return (_a = colors[colors.length - 1]) == null ? void 0 : _a.color;\n      }\n    };\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ns).b(), unref(ns).m(_ctx.type), unref(ns).is(_ctx.status), {\n          [unref(ns).m(\"without-text\")]: !_ctx.showText,\n          [unref(ns).m(\"text-inside\")]: _ctx.textInside\n        }]),\n        role: \"progressbar\",\n        \"aria-valuenow\": _ctx.percentage,\n        \"aria-valuemin\": \"0\",\n        \"aria-valuemax\": \"100\"\n      }, [_ctx.type === \"line\" ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(ns).b(\"bar\"))\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).be(\"bar\", \"outer\")),\n        style: normalizeStyle({\n          height: `${_ctx.strokeWidth}px`\n        })\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass([unref(ns).be(\"bar\", \"inner\"), {\n          [unref(ns).bem(\"bar\", \"inner\", \"indeterminate\")]: _ctx.indeterminate\n        }]),\n        style: normalizeStyle(unref(barStyle))\n      }, [(_ctx.showText || _ctx.$slots.default) && _ctx.textInside ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(ns).be(\"bar\", \"innerText\"))\n      }, [renderSlot(_ctx.$slots, \"default\", {\n        percentage: _ctx.percentage\n      }, () => [createElementVNode(\"span\", null, toDisplayString(unref(content)), 1)])], 2)) : createCommentVNode(\"v-if\", true)], 6)], 6)], 2)) : (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(unref(ns).b(\"circle\")),\n        style: normalizeStyle({\n          height: `${_ctx.width}px`,\n          width: `${_ctx.width}px`\n        })\n      }, [(openBlock(), createElementBlock(\"svg\", _hoisted_2, [createElementVNode(\"path\", {\n        class: normalizeClass(unref(ns).be(\"circle\", \"track\")),\n        d: unref(trackPath),\n        stroke: `var(${unref(ns).cssVarName(\"fill-color-light\")}, #e5e9f2)`,\n        \"stroke-width\": unref(relativeStrokeWidth),\n        fill: \"none\",\n        style: normalizeStyle(unref(trailPathStyle))\n      }, null, 14, _hoisted_3), createElementVNode(\"path\", {\n        class: normalizeClass(unref(ns).be(\"circle\", \"path\")),\n        d: unref(trackPath),\n        stroke: unref(stroke),\n        fill: \"none\",\n        opacity: _ctx.percentage ? 1 : 0,\n        \"stroke-linecap\": _ctx.strokeLinecap,\n        \"stroke-width\": unref(relativeStrokeWidth),\n        style: normalizeStyle(unref(circlePathStyle))\n      }, null, 14, _hoisted_4)]))], 6)), (_ctx.showText || _ctx.$slots.default) && !_ctx.textInside ? (openBlock(), createElementBlock(\"div\", {\n        key: 2,\n        class: normalizeClass(unref(ns).e(\"text\")),\n        style: normalizeStyle({\n          fontSize: `${unref(progressTextSize)}px`\n        })\n      }, [renderSlot(_ctx.$slots, \"default\", {\n        percentage: _ctx.percentage\n      }, () => [!_ctx.status ? (openBlock(), createElementBlock(\"span\", _hoisted_5, toDisplayString(unref(content)), 1)) : (openBlock(), createBlock(unref(ElIcon), {\n        key: 1\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(unref(statusIcon))))]),\n        _: 1\n      }))])], 6)) : createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n    };\n  }\n});\nvar Progress = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/progress/src/progress.vue\"]]);\nexport { Progress as default };","map":{"version":3,"names":["name","STATUS_COLOR_MAP","success","exception","warning","default","ns","useNamespace","barStyle","computed","width","props","percentage","animationDuration","duration","backgroundColor","getCurrentColor","relativeStrokeWidth","strokeWidth","toFixed","radius","includes","type","Number","parseInt","parseFloat","value","trackPath","r","isDashboard","perimeter","Math","PI","rate","strokeDashoffset","offset","trailPathStyle","strokeDasharray","circlePathStyle","transition","stroke","ret","color","status","statusIcon","WarningFilled","CircleCheck","CircleClose","Check","Close","progressTextSize","content","format","getColors","span","length","seriesColors","map","seriesColor","index","isString","sort","a","b","_a","isFunction","colors","color2"],"sources":["../../../../../../packages/components/progress/src/progress.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ns.b(),\n      ns.m(type),\n      ns.is(status),\n      {\n        [ns.m('without-text')]: !showText,\n        [ns.m('text-inside')]: textInside,\n      },\n    ]\"\n    role=\"progressbar\"\n    :aria-valuenow=\"percentage\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n  >\n    <div v-if=\"type === 'line'\" :class=\"ns.b('bar')\">\n      <div\n        :class=\"ns.be('bar', 'outer')\"\n        :style=\"{ height: `${strokeWidth}px` }\"\n      >\n        <div\n          :class=\"[\n            ns.be('bar', 'inner'),\n            { [ns.bem('bar', 'inner', 'indeterminate')]: indeterminate },\n          ]\"\n          :style=\"barStyle\"\n        >\n          <div\n            v-if=\"(showText || $slots.default) && textInside\"\n            :class=\"ns.be('bar', 'innerText')\"\n          >\n            <slot :percentage=\"percentage\">\n              <span>{{ content }}</span>\n            </slot>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      v-else\n      :class=\"ns.b('circle')\"\n      :style=\"{ height: `${width}px`, width: `${width}px` }\"\n    >\n      <svg viewBox=\"0 0 100 100\">\n        <path\n          :class=\"ns.be('circle', 'track')\"\n          :d=\"trackPath\"\n          :stroke=\"`var(${ns.cssVarName('fill-color-light')}, #e5e9f2)`\"\n          :stroke-width=\"relativeStrokeWidth\"\n          fill=\"none\"\n          :style=\"trailPathStyle\"\n        />\n        <path\n          :class=\"ns.be('circle', 'path')\"\n          :d=\"trackPath\"\n          :stroke=\"stroke\"\n          fill=\"none\"\n          :opacity=\"percentage ? 1 : 0\"\n          :stroke-linecap=\"strokeLinecap\"\n          :stroke-width=\"relativeStrokeWidth\"\n          :style=\"circlePathStyle\"\n        />\n      </svg>\n    </div>\n    <div\n      v-if=\"(showText || $slots.default) && !textInside\"\n      :class=\"ns.e('text')\"\n      :style=\"{ fontSize: `${progressTextSize}px` }\"\n    >\n      <slot :percentage=\"percentage\">\n        <span v-if=\"!status\">{{ content }}</span>\n        <el-icon v-else><component :is=\"statusIcon\" /></el-icon>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  Check,\n  CircleCheck,\n  CircleClose,\n  Close,\n  WarningFilled,\n} from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { isFunction, isString } from '@element-plus/utils'\nimport { progressProps } from './progress'\nimport type { CSSProperties } from 'vue'\nimport type { ProgressColor } from './progress'\n\ndefineOptions({\n  name: 'ElProgress',\n})\n\nconst STATUS_COLOR_MAP: Record<string, string> = {\n  success: '#13ce66',\n  exception: '#ff4949',\n  warning: '#e6a23c',\n  default: '#20a0ff',\n}\n\nconst props = defineProps(progressProps)\n\nconst ns = useNamespace('progress')\n\nconst barStyle = computed<CSSProperties>(() => ({\n  width: `${props.percentage}%`,\n  animationDuration: `${props.duration}s`,\n  backgroundColor: getCurrentColor(props.percentage),\n}))\n\nconst relativeStrokeWidth = computed(() =>\n  ((props.strokeWidth / props.width) * 100).toFixed(1)\n)\n\nconst radius = computed(() => {\n  if (['circle', 'dashboard'].includes(props.type)) {\n    return Number.parseInt(\n      `${50 - Number.parseFloat(relativeStrokeWidth.value) / 2}`,\n      10\n    )\n  }\n  return 0\n})\n\nconst trackPath = computed(() => {\n  const r = radius.value\n  const isDashboard = props.type === 'dashboard'\n  return `\n          M 50 50\n          m 0 ${isDashboard ? '' : '-'}${r}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? '-' : ''}${r * 2}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? '' : '-'}${r * 2}\n          `\n})\n\nconst perimeter = computed(() => 2 * Math.PI * radius.value)\n\nconst rate = computed(() => (props.type === 'dashboard' ? 0.75 : 1))\n\nconst strokeDashoffset = computed(() => {\n  const offset = (-1 * perimeter.value * (1 - rate.value)) / 2\n  return `${offset}px`\n})\n\nconst trailPathStyle = computed<CSSProperties>(() => ({\n  strokeDasharray: `${perimeter.value * rate.value}px, ${perimeter.value}px`,\n  strokeDashoffset: strokeDashoffset.value,\n}))\n\nconst circlePathStyle = computed<CSSProperties>(() => ({\n  strokeDasharray: `${\n    perimeter.value * rate.value * (props.percentage / 100)\n  }px, ${perimeter.value}px`,\n  strokeDashoffset: strokeDashoffset.value,\n  transition:\n    'stroke-dasharray 0.6s ease 0s, stroke 0.6s ease, opacity ease 0.6s',\n}))\n\nconst stroke = computed(() => {\n  let ret: string\n  if (props.color) {\n    ret = getCurrentColor(props.percentage)\n  } else {\n    ret = STATUS_COLOR_MAP[props.status] || STATUS_COLOR_MAP.default\n  }\n  return ret\n})\n\nconst statusIcon = computed(() => {\n  if (props.status === 'warning') {\n    return WarningFilled\n  }\n  if (props.type === 'line') {\n    return props.status === 'success' ? CircleCheck : CircleClose\n  } else {\n    return props.status === 'success' ? Check : Close\n  }\n})\n\nconst progressTextSize = computed(() => {\n  return props.type === 'line'\n    ? 12 + props.strokeWidth * 0.4\n    : props.width * 0.111111 + 2\n})\n\nconst content = computed(() => props.format(props.percentage))\n\nfunction getColors(color: ProgressColor[]) {\n  const span = 100 / color.length\n  const seriesColors = color.map((seriesColor, index) => {\n    if (isString(seriesColor)) {\n      return {\n        color: seriesColor,\n        percentage: (index + 1) * span,\n      }\n    }\n    return seriesColor\n  })\n  return seriesColors.sort((a, b) => a.percentage - b.percentage)\n}\n\nconst getCurrentColor = (percentage: number) => {\n  const { color } = props\n  if (isFunction(color)) {\n    return color(percentage)\n  } else if (isString(color)) {\n    return color\n  } else {\n    const colors = getColors(color)\n    for (const color of colors) {\n      if (color.percentage > percentage) return color.color\n    }\n    return colors[colors.length - 1]?.color\n  }\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}