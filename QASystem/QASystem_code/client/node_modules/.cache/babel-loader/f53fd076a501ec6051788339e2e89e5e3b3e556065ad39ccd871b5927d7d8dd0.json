{"ast":null,"code":"import { defineComponent, inject, ref, unref, toRef, openBlock, createBlock, normalizeClass, withCtx, renderSlot } from 'vue';\nimport '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './constants.mjs';\nimport { useTooltipTriggerProps } from './trigger.mjs';\nimport { whenTrigger } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport ElPopperTrigger from '../../popper/src/trigger2.mjs';\nconst __default__ = defineComponent({\n  name: \"ElTooltipTrigger\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: useTooltipTriggerProps,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"tooltip\");\n    const {\n      controlled,\n      id,\n      open,\n      onOpen,\n      onClose,\n      onToggle\n    } = inject(TOOLTIP_INJECTION_KEY, void 0);\n    const triggerRef = ref(null);\n    const stopWhenControlledOrDisabled = () => {\n      if (unref(controlled) || props.disabled) {\n        return true;\n      }\n    };\n    const trigger = toRef(props, \"trigger\");\n    const onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"hover\", onOpen));\n    const onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"hover\", onClose));\n    const onClick = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"click\", e => {\n      if (e.button === 0) {\n        onToggle(e);\n      }\n    }));\n    const onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"focus\", onOpen));\n    const onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"focus\", onClose));\n    const onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"contextmenu\", e => {\n      e.preventDefault();\n      onToggle(e);\n    }));\n    const onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, e => {\n      const {\n        code\n      } = e;\n      if (props.triggerKeys.includes(code)) {\n        e.preventDefault();\n        onToggle(e);\n      }\n    });\n    expose({\n      triggerRef\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElPopperTrigger), {\n        id: unref(id),\n        \"virtual-ref\": _ctx.virtualRef,\n        open: unref(open),\n        \"virtual-triggering\": _ctx.virtualTriggering,\n        class: normalizeClass(unref(ns).e(\"trigger\")),\n        onBlur: unref(onBlur),\n        onClick: unref(onClick),\n        onContextmenu: unref(onContextMenu),\n        onFocus: unref(onFocus),\n        onMouseenter: unref(onMouseenter),\n        onMouseleave: unref(onMouseleave),\n        onKeydown: unref(onKeydown)\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"id\", \"virtual-ref\", \"open\", \"virtual-triggering\", \"class\", \"onBlur\", \"onClick\", \"onContextmenu\", \"onFocus\", \"onMouseenter\", \"onMouseleave\", \"onKeydown\"]);\n    };\n  }\n});\nvar ElTooltipTrigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/trigger.vue\"]]);\nexport { ElTooltipTrigger as default };","map":{"version":3,"names":["name","ns","useNamespace","controlled","id","open","onOpen","onClose","onToggle","inject","TOOLTIP_INJECTION_KEY","triggerRef","ref","stopWhenControlledOrDisabled","unref","props","disabled","trigger","toRef","onMouseenter","composeEventHandlers","whenTrigger","onMouseleave","onClick","e","button","onFocus","onBlur","onContextMenu","preventDefault","onKeydown","code","triggerKeys","includes","expose"],"sources":["../../../../../../packages/components/tooltip/src/trigger.vue"],"sourcesContent":["<template>\n  <el-popper-trigger\n    :id=\"id\"\n    :virtual-ref=\"virtualRef\"\n    :open=\"open\"\n    :virtual-triggering=\"virtualTriggering\"\n    :class=\"ns.e('trigger')\"\n    @blur=\"onBlur\"\n    @click=\"onClick\"\n    @contextmenu=\"onContextMenu\"\n    @focus=\"onFocus\"\n    @mouseenter=\"onMouseenter\"\n    @mouseleave=\"onMouseleave\"\n    @keydown=\"onKeydown\"\n  >\n    <slot />\n  </el-popper-trigger>\n</template>\n<script lang=\"ts\" setup>\nimport { inject, ref, toRef, unref } from 'vue'\nimport { ElPopperTrigger } from '@element-plus/components/popper'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { TOOLTIP_INJECTION_KEY } from './constants'\nimport { useTooltipTriggerProps } from './trigger'\nimport { whenTrigger } from './utils'\nimport type { OnlyChildExpose } from '@element-plus/components/slot'\n\ndefineOptions({\n  name: 'ElTooltipTrigger',\n})\n\nconst props = defineProps(useTooltipTriggerProps)\n\nconst ns = useNamespace('tooltip')\nconst { controlled, id, open, onOpen, onClose, onToggle } = inject(\n  TOOLTIP_INJECTION_KEY,\n  undefined\n)!\n\nconst triggerRef = ref<OnlyChildExpose | null>(null)\n\nconst stopWhenControlledOrDisabled = () => {\n  if (unref(controlled) || props.disabled) {\n    return true\n  }\n}\nconst trigger = toRef(props, 'trigger')\nconst onMouseenter = composeEventHandlers(\n  stopWhenControlledOrDisabled,\n  whenTrigger(trigger, 'hover', onOpen)\n)\nconst onMouseleave = composeEventHandlers(\n  stopWhenControlledOrDisabled,\n  whenTrigger(trigger, 'hover', onClose)\n)\nconst onClick = composeEventHandlers(\n  stopWhenControlledOrDisabled,\n  whenTrigger(trigger, 'click', (e) => {\n    // distinguish left click\n    if ((e as MouseEvent).button === 0) {\n      onToggle(e)\n    }\n  })\n)\n\nconst onFocus = composeEventHandlers(\n  stopWhenControlledOrDisabled,\n  whenTrigger(trigger, 'focus', onOpen)\n)\n\nconst onBlur = composeEventHandlers(\n  stopWhenControlledOrDisabled,\n  whenTrigger(trigger, 'focus', onClose)\n)\n\nconst onContextMenu = composeEventHandlers(\n  stopWhenControlledOrDisabled,\n  whenTrigger(trigger, 'contextmenu', (e: Event) => {\n    e.preventDefault()\n    onToggle(e)\n  })\n)\n\nconst onKeydown = composeEventHandlers(\n  stopWhenControlledOrDisabled,\n  (e: KeyboardEvent) => {\n    const { code } = e\n    if (props.triggerKeys.includes(code)) {\n      e.preventDefault()\n      onToggle(e)\n    }\n  }\n)\n\ndefineExpose({\n  /**\n   * @description trigger element\n   */\n  triggerRef,\n})\n</script>\n"],"mappings":";;;;;;;;;;;mCA4Bc;EACZA,IAAM;AACR;;;;;;;;IAIM,MAAAC,EAAA,GAAKC,YAAA,CAAa,SAAS;IAC3B;MAAEC,UAAA;MAAYC,EAAI;MAAAC,IAAA;MAAMC,MAAA;MAAQC,OAAS;MAAAC;IAAA,IAAaC,MAC1D,CAAAC,qBAAA,EACA,KACF;IAEM,MAAAC,UAAA,GAAaC,GAAA,CAA4B,IAAI;IAEnD,MAAMC,4BAAA,GAA+BA,CAAA,KAAM;MACzC,IAAIC,KAAM,CAAAX,UAAU,CAAK,IAAAY,KAAA,CAAMC,QAAU;QAChC;MAAA;IACT,CACF;IACM,MAAAC,OAAA,GAAUC,KAAM,CAAAH,KAAA,EAAO,SAAS;IACtC,MAAMI,YAAA,GAAeC,oBACnB,CAAAP,4BAAA,EACAQ,WAAA,CAAYJ,OAAS,WAASX,MAAM,CACtC;IACA,MAAMgB,YAAA,GAAeF,oBACnB,CAAAP,4BAAA,EACAQ,WAAA,CAAYJ,OAAS,WAASV,OAAO,CACvC;IACA,MAAMgB,OAAA,GAAUH,oBACd,CAAAP,4BAAA,EACAQ,WAAA,CAAYJ,OAAS,WAAUO,CAAM;MAE9B,IAAAA,CAAA,CAAiBC,MAAA,KAAW,CAAG;QAClCjB,QAAA,CAASgB,CAAC;MAAA;IACZ,CACD,CACH;IAEA,MAAME,OAAA,GAAUN,oBACd,CAAAP,4BAAA,EACAQ,WAAA,CAAYJ,OAAS,WAASX,MAAM,CACtC;IAEA,MAAMqB,MAAA,GAASP,oBACb,CAAAP,4BAAA,EACAQ,WAAA,CAAYJ,OAAS,WAASV,OAAO,CACvC;IAEA,MAAMqB,aAAA,GAAgBR,oBACpB,CAAAP,4BAAA,EACAQ,WAAA,CAAYJ,OAAS,iBAAgBO,CAAa;MAChDA,CAAA,CAAEK,cAAe;MACjBrB,QAAA,CAASgB,CAAC;IAAA,CACX,CACH;IAEA,MAAMM,SAAY,GAAAV,oBAAA,CAChBP,4BACA,EAACW,CAAqB;MACpB,MAAM;QAAEO;MAAS,IAAAP,CAAA;MACjB,IAAIT,KAAM,CAAAiB,WAAA,CAAYC,QAAS,CAAAF,IAAI,CAAG;QACpCP,CAAA,CAAEK,cAAe;QACjBrB,QAAA,CAASgB,CAAC;MAAA;IACZ,CAEJ;IAEaU,MAAA;MAIXvB;IAAA,CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}