{"ast":null,"code":"import { computed } from 'vue';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport '../../../hooks/index.mjs';\nimport '../../form/index.mjs';\nimport { useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nfunction darken(color, amount = 20) {\n  return color.mix(\"#141414\", amount).toString();\n}\nfunction useButtonCustomStyle(props) {\n  const _disabled = useFormDisabled();\n  const ns = useNamespace(\"button\");\n  return computed(() => {\n    let styles = {};\n    const buttonColor = props.color;\n    if (buttonColor) {\n      const color = new TinyColor(buttonColor);\n      const activeBgColor = props.dark ? color.tint(20).toString() : darken(color, 20);\n      if (props.plain) {\n        styles = ns.cssVarBlock({\n          \"bg-color\": props.dark ? darken(color, 90) : color.tint(90).toString(),\n          \"text-color\": buttonColor,\n          \"border-color\": props.dark ? darken(color, 50) : color.tint(50).toString(),\n          \"hover-text-color\": `var(${ns.cssVarName(\"color-white\")})`,\n          \"hover-bg-color\": buttonColor,\n          \"hover-border-color\": buttonColor,\n          \"active-bg-color\": activeBgColor,\n          \"active-text-color\": `var(${ns.cssVarName(\"color-white\")})`,\n          \"active-border-color\": activeBgColor\n        });\n        if (_disabled.value) {\n          styles[ns.cssVarBlockName(\"disabled-bg-color\")] = props.dark ? darken(color, 90) : color.tint(90).toString();\n          styles[ns.cssVarBlockName(\"disabled-text-color\")] = props.dark ? darken(color, 50) : color.tint(50).toString();\n          styles[ns.cssVarBlockName(\"disabled-border-color\")] = props.dark ? darken(color, 80) : color.tint(80).toString();\n        }\n      } else {\n        const hoverBgColor = props.dark ? darken(color, 30) : color.tint(30).toString();\n        const textColor = color.isDark() ? `var(${ns.cssVarName(\"color-white\")})` : `var(${ns.cssVarName(\"color-black\")})`;\n        styles = ns.cssVarBlock({\n          \"bg-color\": buttonColor,\n          \"text-color\": textColor,\n          \"border-color\": buttonColor,\n          \"hover-bg-color\": hoverBgColor,\n          \"hover-text-color\": textColor,\n          \"hover-border-color\": hoverBgColor,\n          \"active-bg-color\": activeBgColor,\n          \"active-border-color\": activeBgColor\n        });\n        if (_disabled.value) {\n          const disabledButtonColor = props.dark ? darken(color, 50) : color.tint(50).toString();\n          styles[ns.cssVarBlockName(\"disabled-bg-color\")] = disabledButtonColor;\n          styles[ns.cssVarBlockName(\"disabled-text-color\")] = props.dark ? \"rgba(255, 255, 255, 0.5)\" : `var(${ns.cssVarName(\"color-white\")})`;\n          styles[ns.cssVarBlockName(\"disabled-border-color\")] = disabledButtonColor;\n        }\n      }\n    }\n    return styles;\n  });\n}\nexport { darken, useButtonCustomStyle };","map":{"version":3,"names":["darken","color","amount","mix","toString","useButtonCustomStyle","props","_disabled","useFormDisabled","ns","useNamespace","computed","styles","buttonColor","TinyColor","activeBgColor","dark","tint","plain","cssVarBlock","cssVarName","value","cssVarBlockName","hoverBgColor","textColor","isDark","disabledButtonColor"],"sources":["../../../../../../packages/components/button/src/button-custom.ts"],"sourcesContent":["import { computed } from 'vue'\nimport { TinyColor } from '@ctrl/tinycolor'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormDisabled } from '@element-plus/components/form'\nimport type { ButtonProps } from './button'\n\nexport function darken(color: TinyColor, amount = 20) {\n  return color.mix('#141414', amount).toString()\n}\n\nexport function useButtonCustomStyle(props: ButtonProps) {\n  const _disabled = useFormDisabled()\n  const ns = useNamespace('button')\n\n  // calculate hover & active color by custom color\n  // only work when custom color\n  return computed(() => {\n    let styles: Record<string, string> = {}\n\n    const buttonColor = props.color\n\n    if (buttonColor) {\n      const color = new TinyColor(buttonColor)\n      const activeBgColor = props.dark\n        ? color.tint(20).toString()\n        : darken(color, 20)\n\n      if (props.plain) {\n        styles = ns.cssVarBlock({\n          'bg-color': props.dark\n            ? darken(color, 90)\n            : color.tint(90).toString(),\n          'text-color': buttonColor,\n          'border-color': props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString(),\n          'hover-text-color': `var(${ns.cssVarName('color-white')})`,\n          'hover-bg-color': buttonColor,\n          'hover-border-color': buttonColor,\n          'active-bg-color': activeBgColor,\n          'active-text-color': `var(${ns.cssVarName('color-white')})`,\n          'active-border-color': activeBgColor,\n        })\n\n        if (_disabled.value) {\n          styles[ns.cssVarBlockName('disabled-bg-color')] = props.dark\n            ? darken(color, 90)\n            : color.tint(90).toString()\n          styles[ns.cssVarBlockName('disabled-text-color')] = props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString()\n          styles[ns.cssVarBlockName('disabled-border-color')] = props.dark\n            ? darken(color, 80)\n            : color.tint(80).toString()\n        }\n      } else {\n        const hoverBgColor = props.dark\n          ? darken(color, 30)\n          : color.tint(30).toString()\n        const textColor = color.isDark()\n          ? `var(${ns.cssVarName('color-white')})`\n          : `var(${ns.cssVarName('color-black')})`\n        styles = ns.cssVarBlock({\n          'bg-color': buttonColor,\n          'text-color': textColor,\n          'border-color': buttonColor,\n          'hover-bg-color': hoverBgColor,\n          'hover-text-color': textColor,\n          'hover-border-color': hoverBgColor,\n          'active-bg-color': activeBgColor,\n          'active-border-color': activeBgColor,\n        })\n\n        if (_disabled.value) {\n          const disabledButtonColor = props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString()\n          styles[ns.cssVarBlockName('disabled-bg-color')] = disabledButtonColor\n          styles[ns.cssVarBlockName('disabled-text-color')] = props.dark\n            ? 'rgba(255, 255, 255, 0.5)'\n            : `var(${ns.cssVarName('color-white')})`\n          styles[ns.cssVarBlockName('disabled-border-color')] =\n            disabledButtonColor\n        }\n      }\n    }\n\n    return styles\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}