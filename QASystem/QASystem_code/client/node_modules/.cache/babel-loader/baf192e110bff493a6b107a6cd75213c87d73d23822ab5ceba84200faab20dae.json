{"ast":null,"code":"import '../../../utils/index.mjs';\nimport '../../popper/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { useDelayedToggleProps } from '../../../hooks/use-delayed-toggle/index.mjs';\nimport { popperContentProps } from '../../popper/src/content.mjs';\nconst useTooltipContentProps = buildProps({\n  ...useDelayedToggleProps,\n  ...popperContentProps,\n  appendTo: {\n    type: definePropType([String, Object])\n  },\n  content: {\n    type: String,\n    default: \"\"\n  },\n  rawContent: {\n    type: Boolean,\n    default: false\n  },\n  persistent: Boolean,\n  ariaLabel: String,\n  visible: {\n    type: definePropType(Boolean),\n    default: null\n  },\n  transition: String,\n  teleported: {\n    type: Boolean,\n    default: true\n  },\n  disabled: Boolean\n});\nexport { useTooltipContentProps };","map":{"version":3,"names":["useTooltipContentProps","buildProps","useDelayedToggleProps","popperContentProps","appendTo","type","definePropType","String","Object","content","default","rawContent","Boolean","persistent","ariaLabel","visible","transition","teleported","disabled"],"sources":["../../../../../../packages/components/tooltip/src/content.ts"],"sourcesContent":["import { buildProps, definePropType } from '@element-plus/utils'\nimport { popperContentProps } from '@element-plus/components/popper'\nimport { useDelayedToggleProps } from '@element-plus/hooks'\n\nimport type TooltipContent from './content.vue'\nimport type { ExtractPropTypes } from 'vue'\n\nexport const useTooltipContentProps = buildProps({\n  ...useDelayedToggleProps,\n  ...popperContentProps,\n  /**\n   * @description which element the tooltip CONTENT appends to\n   */\n  appendTo: {\n    type: definePropType<string | HTMLElement>([String, Object]),\n  },\n  /**\n   * @description display content, can be overridden by `slot#content`\n   */\n  content: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description whether `content` is treated as HTML string\n   */\n  rawContent: {\n    type: Boolean,\n    default: false,\n  },\n  /**\n   * @description when tooltip inactive and `persistent` is `false` , popconfirm will be destroyed\n   */\n  persistent: Boolean,\n  /**\n   * @description same as `aria-label`\n   */\n  ariaLabel: String,\n  // because model toggle prop is generated dynamically\n  // so the typing cannot be evaluated by typescript as type:\n  // [name]: { type: Boolean, default: null }\n  // so we need to declare that again for type checking.\n  /**\n   * @description visibility of Tooltip\n   */\n  visible: {\n    type: definePropType<boolean | null>(Boolean),\n    default: null,\n  },\n  /**\n   * @description animation name\n   */\n  transition: String,\n  /**\n   * @description whether tooltip content is teleported, if `true` it will be teleported to where `append-to` sets\n   */\n  teleported: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description whether Tooltip is disabled\n   */\n  disabled: Boolean,\n} as const)\n\nexport type ElTooltipContentProps = ExtractPropTypes<\n  typeof useTooltipContentProps\n>\n\nexport type TooltipContentInstance = InstanceType<typeof TooltipContent>\n"],"mappings":";;;;;;AAGY,MAACA,sBAAsB,GAAGC,UAAU,CAAC;EAC/C,GAAGC,qBAAqB;EACxB,GAAGC,kBAAkB;EACrBC,QAAQ,EAAE;IACRC,IAAI,EAAEC,cAAc,CAAC,CAACC,MAAM,EAAEC,MAAM,CAAC;EACzC,CAAG;EACDC,OAAO,EAAE;IACPJ,IAAI,EAAEE,MAAM;IACZG,OAAO,EAAE;EACb,CAAG;EACDC,UAAU,EAAE;IACVN,IAAI,EAAEO,OAAO;IACbF,OAAO,EAAE;EACb,CAAG;EACDG,UAAU,EAAED,OAAO;EACnBE,SAAS,EAAEP,MAAM;EACjBQ,OAAO,EAAE;IACPV,IAAI,EAAEC,cAAc,CAACM,OAAO,CAAC;IAC7BF,OAAO,EAAE;EACb,CAAG;EACDM,UAAU,EAAET,MAAM;EAClBU,UAAU,EAAE;IACVZ,IAAI,EAAEO,OAAO;IACbF,OAAO,EAAE;EACb,CAAG;EACDQ,QAAQ,EAAEN;AACZ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}