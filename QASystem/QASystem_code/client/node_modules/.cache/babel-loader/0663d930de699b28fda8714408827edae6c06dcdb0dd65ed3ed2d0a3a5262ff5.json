{"ast":null,"code":"import { defineComponent, ref, inject, computed, unref, provide, readonly, toRef, watch, renderSlot } from 'vue';\nimport { useEventListener } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport { rovingFocusGroupProps, ROVING_FOCUS_COLLECTION_INJECTION_KEY as COLLECTION_INJECTION_KEY } from './roving-focus-group.mjs';\nimport { ROVING_FOCUS_GROUP_INJECTION_KEY } from './tokens.mjs';\nimport { focusFirst } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nconst CURRENT_TAB_ID_CHANGE_EVT = \"currentTabIdChange\";\nconst ENTRY_FOCUS_EVT = \"rovingFocusGroup.entryFocus\";\nconst EVT_OPTS = {\n  bubbles: false,\n  cancelable: true\n};\nconst _sfc_main = defineComponent({\n  name: \"ElRovingFocusGroupImpl\",\n  inheritAttrs: false,\n  props: rovingFocusGroupProps,\n  emits: [CURRENT_TAB_ID_CHANGE_EVT, \"entryFocus\"],\n  setup(props, {\n    emit\n  }) {\n    var _a;\n    const currentTabbedId = ref((_a = props.currentTabId || props.defaultCurrentTabId) != null ? _a : null);\n    const isBackingOut = ref(false);\n    const isClickFocus = ref(false);\n    const rovingFocusGroupRef = ref(null);\n    const {\n      getItems\n    } = inject(COLLECTION_INJECTION_KEY, void 0);\n    const rovingFocusGroupRootStyle = computed(() => {\n      return [{\n        outline: \"none\"\n      }, props.style];\n    });\n    const onItemFocus = tabbedId => {\n      emit(CURRENT_TAB_ID_CHANGE_EVT, tabbedId);\n    };\n    const onItemShiftTab = () => {\n      isBackingOut.value = true;\n    };\n    const onMousedown = composeEventHandlers(e => {\n      var _a2;\n      (_a2 = props.onMousedown) == null ? void 0 : _a2.call(props, e);\n    }, () => {\n      isClickFocus.value = true;\n    });\n    const onFocus = composeEventHandlers(e => {\n      var _a2;\n      (_a2 = props.onFocus) == null ? void 0 : _a2.call(props, e);\n    }, e => {\n      const isKeyboardFocus = !unref(isClickFocus);\n      const {\n        target,\n        currentTarget\n      } = e;\n      if (target === currentTarget && isKeyboardFocus && !unref(isBackingOut)) {\n        const entryFocusEvt = new Event(ENTRY_FOCUS_EVT, EVT_OPTS);\n        currentTarget == null ? void 0 : currentTarget.dispatchEvent(entryFocusEvt);\n        if (!entryFocusEvt.defaultPrevented) {\n          const items = getItems().filter(item => item.focusable);\n          const activeItem = items.find(item => item.active);\n          const currentItem = items.find(item => item.id === unref(currentTabbedId));\n          const candidates = [activeItem, currentItem, ...items].filter(Boolean);\n          const candidateNodes = candidates.map(item => item.ref);\n          focusFirst(candidateNodes);\n        }\n      }\n      isClickFocus.value = false;\n    });\n    const onBlur = composeEventHandlers(e => {\n      var _a2;\n      (_a2 = props.onBlur) == null ? void 0 : _a2.call(props, e);\n    }, () => {\n      isBackingOut.value = false;\n    });\n    const handleEntryFocus = (...args) => {\n      emit(\"entryFocus\", ...args);\n    };\n    provide(ROVING_FOCUS_GROUP_INJECTION_KEY, {\n      currentTabbedId: readonly(currentTabbedId),\n      loop: toRef(props, \"loop\"),\n      tabIndex: computed(() => {\n        return unref(isBackingOut) ? -1 : 0;\n      }),\n      rovingFocusGroupRef,\n      rovingFocusGroupRootStyle,\n      orientation: toRef(props, \"orientation\"),\n      dir: toRef(props, \"dir\"),\n      onItemFocus,\n      onItemShiftTab,\n      onBlur,\n      onFocus,\n      onMousedown\n    });\n    watch(() => props.currentTabId, val => {\n      currentTabbedId.value = val != null ? val : null;\n    });\n    useEventListener(rovingFocusGroupRef, ENTRY_FOCUS_EVT, handleEntryFocus);\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return renderSlot(_ctx.$slots, \"default\");\n}\nvar ElRovingFocusGroupImpl = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-group-impl.vue\"]]);\nexport { ElRovingFocusGroupImpl as default };","map":{"version":3,"names":["CURRENT_TAB_ID_CHANGE_EVT","ENTRY_FOCUS_EVT","EVT_OPTS","bubbles","cancelable","_sfc_main","defineComponent","name","inheritAttrs","props","rovingFocusGroupProps","emits","setup","emit","_a","currentTabbedId","ref","currentTabId","defaultCurrentTabId","isBackingOut","isClickFocus","rovingFocusGroupRef","getItems","inject","COLLECTION_INJECTION_KEY","rovingFocusGroupRootStyle","computed","outline","style","onItemFocus","tabbedId","onItemShiftTab","value","onMousedown","composeEventHandlers","e","_a2","call","onFocus","isKeyboardFocus","unref","target","currentTarget","entryFocusEvt","Event","dispatchEvent","defaultPrevented","items","filter","item","focusable","activeItem","find","active","currentItem","id","candidates","Boolean","candidateNodes","map","focusFirst","onBlur","handleEntryFocus","args","provide","ROVING_FOCUS_GROUP_INJECTION_KEY","readonly","loop","toRef","tabIndex","orientation","dir","watch","val"],"sources":["../../../../../../packages/components/roving-focus-group/src/roving-focus-group-impl.vue"],"sourcesContent":["<template>\n  <slot />\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  provide,\n  readonly,\n  ref,\n  toRef,\n  unref,\n  watch,\n} from 'vue'\nimport { useEventListener } from '@vueuse/core'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport {\n  ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n  rovingFocusGroupProps,\n} from './roving-focus-group'\nimport { ROVING_FOCUS_GROUP_INJECTION_KEY } from './tokens'\nimport { focusFirst } from './utils'\n\nimport type { StyleValue } from 'vue'\n\nconst CURRENT_TAB_ID_CHANGE_EVT = 'currentTabIdChange'\n\nconst ENTRY_FOCUS_EVT = 'rovingFocusGroup.entryFocus'\nconst EVT_OPTS: EventInit = { bubbles: false, cancelable: true }\nexport default defineComponent({\n  name: 'ElRovingFocusGroupImpl',\n  inheritAttrs: false,\n  props: rovingFocusGroupProps,\n  emits: [CURRENT_TAB_ID_CHANGE_EVT, 'entryFocus'],\n  setup(props, { emit }) {\n    const currentTabbedId = ref<string | null>(\n      (props.currentTabId || props.defaultCurrentTabId) ?? null\n    )\n    const isBackingOut = ref(false)\n    const isClickFocus = ref(false)\n    const rovingFocusGroupRef = ref<HTMLElement | null>(null)\n    const { getItems } = inject(\n      ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n      undefined\n    )!\n    const rovingFocusGroupRootStyle = computed(() => {\n      // casting to any for fix compiler error since HTMLElement.StyleValue does not\n      // support CSSProperties\n      return [\n        {\n          outline: 'none',\n        },\n        props.style as StyleValue,\n      ] as any\n    })\n\n    const onItemFocus = (tabbedId: string) => {\n      emit(CURRENT_TAB_ID_CHANGE_EVT, tabbedId)\n    }\n\n    const onItemShiftTab = () => {\n      isBackingOut.value = true\n    }\n\n    const onMousedown = composeEventHandlers(\n      (e: Event) => {\n        props.onMousedown?.(e)\n      },\n      () => {\n        isClickFocus.value = true\n      }\n    )\n\n    const onFocus = composeEventHandlers(\n      (e: FocusEvent) => {\n        props.onFocus?.(e)\n      },\n      (e) => {\n        const isKeyboardFocus = !unref(isClickFocus)\n        const { target, currentTarget } = e\n        if (\n          target === currentTarget &&\n          isKeyboardFocus &&\n          !unref(isBackingOut)\n        ) {\n          const entryFocusEvt = new Event(ENTRY_FOCUS_EVT, EVT_OPTS)\n          currentTarget?.dispatchEvent(entryFocusEvt)\n\n          if (!entryFocusEvt.defaultPrevented) {\n            const items = getItems<{\n              id: string\n              focusable: boolean\n              active: boolean\n            }>().filter((item) => item.focusable)\n            const activeItem = items.find((item) => item.active)\n            const currentItem = items.find(\n              (item) => item.id === unref(currentTabbedId)\n            )\n            const candidates = [activeItem!, currentItem!, ...items].filter(\n              Boolean\n            )\n            const candidateNodes = candidates.map((item) => item.ref!)\n            focusFirst(candidateNodes)\n          }\n        }\n\n        isClickFocus.value = false\n      }\n    )\n\n    const onBlur = composeEventHandlers(\n      (e: Event) => {\n        props.onBlur?.(e)\n      },\n      () => {\n        isBackingOut.value = false\n      }\n    )\n\n    const handleEntryFocus = (...args: any[]) => {\n      emit('entryFocus', ...args)\n    }\n\n    provide(ROVING_FOCUS_GROUP_INJECTION_KEY, {\n      currentTabbedId: readonly(currentTabbedId),\n      loop: toRef(props, 'loop'),\n      tabIndex: computed(() => {\n        return unref(isBackingOut) ? -1 : 0\n      }),\n      rovingFocusGroupRef,\n      rovingFocusGroupRootStyle,\n      orientation: toRef(props, 'orientation'),\n      dir: toRef(props, 'dir'),\n      onItemFocus,\n      onItemShiftTab,\n      onBlur,\n      onFocus,\n      onMousedown,\n    })\n\n    watch(\n      () => props.currentTabId,\n      (val) => {\n        currentTabbedId.value = val ?? null\n      }\n    )\n\n    useEventListener(rovingFocusGroupRef, ENTRY_FOCUS_EVT, handleEntryFocus)\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}