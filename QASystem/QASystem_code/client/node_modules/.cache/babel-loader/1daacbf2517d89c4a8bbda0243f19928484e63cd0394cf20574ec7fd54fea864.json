{"ast":null,"code":"import { defineComponent, useAttrs as useAttrs$1, ref, computed, nextTick, onMounted, openBlock, createBlock, unref, withCtx, createElementVNode, normalizeClass, normalizeStyle, createVNode, createElementBlock, Fragment, renderList, renderSlot, createTextVNode, toDisplayString, mergeProps, withKeys, withModifiers, createSlots } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport { onClickOutside } from '@vueuse/core';\nimport { Loading } from '@element-plus/icons-vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../form/index.mjs';\nimport { autocompleteProps, autocompleteEmits } from './autocomplete.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useAttrs } from '../../../hooks/use-attrs/index.mjs';\nimport { useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { generateId } from '../../../utils/rand.mjs';\nimport { isArray } from '@vue/shared';\nimport { throwError } from '../../../utils/error.mjs';\nimport { INPUT_EVENT, UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nconst _hoisted_1 = [\"aria-expanded\", \"aria-owns\"];\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"id\", \"aria-selected\", \"onClick\"];\nconst COMPONENT_NAME = \"ElAutocomplete\";\nconst __default__ = defineComponent({\n  name: COMPONENT_NAME,\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: autocompleteProps,\n  emits: autocompleteEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const attrs = useAttrs();\n    const rawAttrs = useAttrs$1();\n    const disabled = useFormDisabled();\n    const ns = useNamespace(\"autocomplete\");\n    const inputRef = ref();\n    const regionRef = ref();\n    const popperRef = ref();\n    const listboxRef = ref();\n    let readonly = false;\n    let ignoreFocusEvent = false;\n    const suggestions = ref([]);\n    const highlightedIndex = ref(-1);\n    const dropdownWidth = ref(\"\");\n    const activated = ref(false);\n    const suggestionDisabled = ref(false);\n    const loading = ref(false);\n    const listboxId = computed(() => ns.b(String(generateId())));\n    const styles = computed(() => rawAttrs.style);\n    const suggestionVisible = computed(() => {\n      const isValidData = suggestions.value.length > 0;\n      return (isValidData || loading.value) && activated.value;\n    });\n    const suggestionLoading = computed(() => !props.hideLoading && loading.value);\n    const refInput = computed(() => {\n      if (inputRef.value) {\n        return Array.from(inputRef.value.$el.querySelectorAll(\"input\"));\n      }\n      return [];\n    });\n    const onSuggestionShow = async () => {\n      await nextTick();\n      if (suggestionVisible.value) {\n        dropdownWidth.value = `${inputRef.value.$el.offsetWidth}px`;\n      }\n    };\n    const onHide = () => {\n      highlightedIndex.value = -1;\n    };\n    const getData = async queryString => {\n      if (suggestionDisabled.value) return;\n      const cb = suggestionList => {\n        loading.value = false;\n        if (suggestionDisabled.value) return;\n        if (isArray(suggestionList)) {\n          suggestions.value = suggestionList;\n          highlightedIndex.value = props.highlightFirstItem ? 0 : -1;\n        } else {\n          throwError(COMPONENT_NAME, \"autocomplete suggestions must be an array\");\n        }\n      };\n      loading.value = true;\n      if (isArray(props.fetchSuggestions)) {\n        cb(props.fetchSuggestions);\n      } else {\n        const result = await props.fetchSuggestions(queryString, cb);\n        if (isArray(result)) cb(result);\n      }\n    };\n    const debouncedGetData = debounce(getData, props.debounce);\n    const handleInput = value => {\n      const valuePresented = !!value;\n      emit(INPUT_EVENT, value);\n      emit(UPDATE_MODEL_EVENT, value);\n      suggestionDisabled.value = false;\n      activated.value || (activated.value = valuePresented);\n      if (!props.triggerOnFocus && !value) {\n        suggestionDisabled.value = true;\n        suggestions.value = [];\n        return;\n      }\n      debouncedGetData(value);\n    };\n    const handleMouseDown = event => {\n      var _a;\n      if (disabled.value) return;\n      if (((_a = event.target) == null ? void 0 : _a.tagName) !== \"INPUT\" || refInput.value.includes(document.activeElement)) {\n        activated.value = true;\n      }\n    };\n    const handleChange = value => {\n      emit(CHANGE_EVENT, value);\n    };\n    const handleFocus = evt => {\n      if (!ignoreFocusEvent) {\n        activated.value = true;\n        emit(\"focus\", evt);\n        if (props.triggerOnFocus && !readonly) {\n          debouncedGetData(String(props.modelValue));\n        }\n      } else {\n        ignoreFocusEvent = false;\n      }\n    };\n    const handleBlur = evt => {\n      setTimeout(() => {\n        var _a;\n        if ((_a = popperRef.value) == null ? void 0 : _a.isFocusInsideContent()) {\n          ignoreFocusEvent = true;\n          return;\n        }\n        activated.value && close();\n        emit(\"blur\", evt);\n      });\n    };\n    const handleClear = () => {\n      activated.value = false;\n      emit(UPDATE_MODEL_EVENT, \"\");\n      emit(\"clear\");\n    };\n    const handleKeyEnter = async () => {\n      if (suggestionVisible.value && highlightedIndex.value >= 0 && highlightedIndex.value < suggestions.value.length) {\n        handleSelect(suggestions.value[highlightedIndex.value]);\n      } else if (props.selectWhenUnmatched) {\n        emit(\"select\", {\n          value: props.modelValue\n        });\n        suggestions.value = [];\n        highlightedIndex.value = -1;\n      }\n    };\n    const handleKeyEscape = evt => {\n      if (suggestionVisible.value) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        close();\n      }\n    };\n    const close = () => {\n      activated.value = false;\n    };\n    const focus = () => {\n      var _a;\n      (_a = inputRef.value) == null ? void 0 : _a.focus();\n    };\n    const blur = () => {\n      var _a;\n      (_a = inputRef.value) == null ? void 0 : _a.blur();\n    };\n    const handleSelect = async item => {\n      emit(INPUT_EVENT, item[props.valueKey]);\n      emit(UPDATE_MODEL_EVENT, item[props.valueKey]);\n      emit(\"select\", item);\n      suggestions.value = [];\n      highlightedIndex.value = -1;\n    };\n    const highlight = index => {\n      if (!suggestionVisible.value || loading.value) return;\n      if (index < 0) {\n        highlightedIndex.value = -1;\n        return;\n      }\n      if (index >= suggestions.value.length) {\n        index = suggestions.value.length - 1;\n      }\n      const suggestion = regionRef.value.querySelector(`.${ns.be(\"suggestion\", \"wrap\")}`);\n      const suggestionList = suggestion.querySelectorAll(`.${ns.be(\"suggestion\", \"list\")} li`);\n      const highlightItem = suggestionList[index];\n      const scrollTop = suggestion.scrollTop;\n      const {\n        offsetTop,\n        scrollHeight\n      } = highlightItem;\n      if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {\n        suggestion.scrollTop += scrollHeight;\n      }\n      if (offsetTop < scrollTop) {\n        suggestion.scrollTop -= scrollHeight;\n      }\n      highlightedIndex.value = index;\n      inputRef.value.ref.setAttribute(\"aria-activedescendant\", `${listboxId.value}-item-${highlightedIndex.value}`);\n    };\n    onClickOutside(listboxRef, () => {\n      suggestionVisible.value && close();\n    });\n    onMounted(() => {\n      ;\n      inputRef.value.ref.setAttribute(\"role\", \"textbox\");\n      inputRef.value.ref.setAttribute(\"aria-autocomplete\", \"list\");\n      inputRef.value.ref.setAttribute(\"aria-controls\", \"id\");\n      inputRef.value.ref.setAttribute(\"aria-activedescendant\", `${listboxId.value}-item-${highlightedIndex.value}`);\n      readonly = inputRef.value.ref.hasAttribute(\"readonly\");\n    });\n    expose({\n      highlightedIndex,\n      activated,\n      loading,\n      inputRef,\n      popperRef,\n      suggestions,\n      handleSelect,\n      handleKeyEnter,\n      focus,\n      blur,\n      close,\n      highlight\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"popperRef\",\n        ref: popperRef,\n        visible: unref(suggestionVisible),\n        placement: _ctx.placement,\n        \"fallback-placements\": [\"bottom-start\", \"top-start\"],\n        \"popper-class\": [unref(ns).e(\"popper\"), _ctx.popperClass],\n        teleported: _ctx.teleported,\n        \"gpu-acceleration\": false,\n        pure: \"\",\n        \"manual-mode\": \"\",\n        effect: \"light\",\n        trigger: \"click\",\n        transition: `${unref(ns).namespace.value}-zoom-in-top`,\n        persistent: \"\",\n        onBeforeShow: onSuggestionShow,\n        onHide\n      }, {\n        content: withCtx(() => [createElementVNode(\"div\", {\n          ref_key: \"regionRef\",\n          ref: regionRef,\n          class: normalizeClass([unref(ns).b(\"suggestion\"), unref(ns).is(\"loading\", unref(suggestionLoading))]),\n          style: normalizeStyle({\n            [_ctx.fitInputWidth ? \"width\" : \"minWidth\"]: dropdownWidth.value,\n            outline: \"none\"\n          }),\n          role: \"region\"\n        }, [createVNode(unref(ElScrollbar), {\n          id: unref(listboxId),\n          tag: \"ul\",\n          \"wrap-class\": unref(ns).be(\"suggestion\", \"wrap\"),\n          \"view-class\": unref(ns).be(\"suggestion\", \"list\"),\n          role: \"listbox\"\n        }, {\n          default: withCtx(() => [unref(suggestionLoading) ? (openBlock(), createElementBlock(\"li\", _hoisted_2, [createVNode(unref(ElIcon), {\n            class: normalizeClass(unref(ns).is(\"loading\"))\n          }, {\n            default: withCtx(() => [createVNode(unref(Loading))]),\n            _: 1\n          }, 8, [\"class\"])])) : (openBlock(true), createElementBlock(Fragment, {\n            key: 1\n          }, renderList(suggestions.value, (item, index) => {\n            return openBlock(), createElementBlock(\"li\", {\n              id: `${unref(listboxId)}-item-${index}`,\n              key: index,\n              class: normalizeClass({\n                highlighted: highlightedIndex.value === index\n              }),\n              role: \"option\",\n              \"aria-selected\": highlightedIndex.value === index,\n              onClick: $event => handleSelect(item)\n            }, [renderSlot(_ctx.$slots, \"default\", {\n              item\n            }, () => [createTextVNode(toDisplayString(item[_ctx.valueKey]), 1)])], 10, _hoisted_3);\n          }), 128))]),\n          _: 3\n        }, 8, [\"id\", \"wrap-class\", \"view-class\"])], 6)]),\n        default: withCtx(() => [createElementVNode(\"div\", {\n          ref_key: \"listboxRef\",\n          ref: listboxRef,\n          class: normalizeClass([unref(ns).b(), _ctx.$attrs.class]),\n          style: normalizeStyle(unref(styles)),\n          role: \"combobox\",\n          \"aria-haspopup\": \"listbox\",\n          \"aria-expanded\": unref(suggestionVisible),\n          \"aria-owns\": unref(listboxId)\n        }, [createVNode(unref(ElInput), mergeProps({\n          ref_key: \"inputRef\",\n          ref: inputRef\n        }, unref(attrs), {\n          clearable: _ctx.clearable,\n          disabled: unref(disabled),\n          name: _ctx.name,\n          \"model-value\": _ctx.modelValue,\n          onInput: handleInput,\n          onChange: handleChange,\n          onFocus: handleFocus,\n          onBlur: handleBlur,\n          onClear: handleClear,\n          onKeydown: [_cache[0] || (_cache[0] = withKeys(withModifiers($event => highlight(highlightedIndex.value - 1), [\"prevent\"]), [\"up\"])), _cache[1] || (_cache[1] = withKeys(withModifiers($event => highlight(highlightedIndex.value + 1), [\"prevent\"]), [\"down\"])), withKeys(handleKeyEnter, [\"enter\"]), withKeys(close, [\"tab\"]), withKeys(handleKeyEscape, [\"esc\"])],\n          onMousedown: handleMouseDown\n        }), createSlots({\n          _: 2\n        }, [_ctx.$slots.prepend ? {\n          name: \"prepend\",\n          fn: withCtx(() => [renderSlot(_ctx.$slots, \"prepend\")])\n        } : void 0, _ctx.$slots.append ? {\n          name: \"append\",\n          fn: withCtx(() => [renderSlot(_ctx.$slots, \"append\")])\n        } : void 0, _ctx.$slots.prefix ? {\n          name: \"prefix\",\n          fn: withCtx(() => [renderSlot(_ctx.$slots, \"prefix\")])\n        } : void 0, _ctx.$slots.suffix ? {\n          name: \"suffix\",\n          fn: withCtx(() => [renderSlot(_ctx.$slots, \"suffix\")])\n        } : void 0]), 1040, [\"clearable\", \"disabled\", \"name\", \"model-value\", \"onKeydown\"])], 14, _hoisted_1)]),\n        _: 3\n      }, 8, [\"visible\", \"placement\", \"popper-class\", \"teleported\", \"transition\"]);\n    };\n  }\n});\nvar Autocomplete = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/autocomplete/src/autocomplete.vue\"]]);\nexport { Autocomplete as default };","map":{"version":3,"names":["name","COMPONENT_NAME","inheritAttrs","attrs","useAttrs","rawAttrs","useAttrs$1","disabled","useFormDisabled","ns","useNamespace","inputRef","ref","regionRef","popperRef","listboxRef","readonly","ignoreFocusEvent","suggestions","highlightedIndex","dropdownWidth","activated","suggestionDisabled","loading","listboxId","computed","b","String","generateId","styles","style","suggestionVisible","isValidData","value","length","suggestionLoading","props","hideLoading","refInput","Array","from","$el","querySelectorAll","onSuggestionShow","nextTick","offsetWidth","onHide","getData","queryString","cb","suggestionList","isArray","highlightFirstItem","throwError","fetchSuggestions","result","debouncedGetData","debounce","handleInput","valuePresented","emit","INPUT_EVENT","UPDATE_MODEL_EVENT","triggerOnFocus","handleMouseDown","event","_a","target","tagName","includes","document","activeElement","handleChange","CHANGE_EVENT","handleFocus","evt","modelValue","handleBlur","setTimeout","isFocusInsideContent","close","handleClear","handleKeyEnter","handleSelect","selectWhenUnmatched","handleKeyEscape","preventDefault","stopPropagation","focus","blur","item","valueKey","highlight","index","suggestion","querySelector","be","highlightItem","scrollTop","offsetTop","scrollHeight","clientHeight","setAttribute","onClickOutside","onMounted","hasAttribute","expose"],"sources":["../../../../../../packages/components/autocomplete/src/autocomplete.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"popperRef\"\n    :visible=\"suggestionVisible\"\n    :placement=\"placement\"\n    :fallback-placements=\"['bottom-start', 'top-start']\"\n    :popper-class=\"[ns.e('popper'), popperClass]\"\n    :teleported=\"teleported\"\n    :gpu-acceleration=\"false\"\n    pure\n    manual-mode\n    effect=\"light\"\n    trigger=\"click\"\n    :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n    persistent\n    @before-show=\"onSuggestionShow\"\n    @hide=\"onHide\"\n  >\n    <div\n      ref=\"listboxRef\"\n      :class=\"[ns.b(), $attrs.class]\"\n      :style=\"styles\"\n      role=\"combobox\"\n      aria-haspopup=\"listbox\"\n      :aria-expanded=\"suggestionVisible\"\n      :aria-owns=\"listboxId\"\n    >\n      <el-input\n        ref=\"inputRef\"\n        v-bind=\"attrs\"\n        :clearable=\"clearable\"\n        :disabled=\"disabled\"\n        :name=\"name\"\n        :model-value=\"modelValue\"\n        @input=\"handleInput\"\n        @change=\"handleChange\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @clear=\"handleClear\"\n        @keydown.up.prevent=\"highlight(highlightedIndex - 1)\"\n        @keydown.down.prevent=\"highlight(highlightedIndex + 1)\"\n        @keydown.enter=\"handleKeyEnter\"\n        @keydown.tab=\"close\"\n        @keydown.esc=\"handleKeyEscape\"\n        @mousedown=\"handleMouseDown\"\n      >\n        <template v-if=\"$slots.prepend\" #prepend>\n          <slot name=\"prepend\" />\n        </template>\n        <template v-if=\"$slots.append\" #append>\n          <slot name=\"append\" />\n        </template>\n        <template v-if=\"$slots.prefix\" #prefix>\n          <slot name=\"prefix\" />\n        </template>\n        <template v-if=\"$slots.suffix\" #suffix>\n          <slot name=\"suffix\" />\n        </template>\n      </el-input>\n    </div>\n    <template #content>\n      <div\n        ref=\"regionRef\"\n        :class=\"[ns.b('suggestion'), ns.is('loading', suggestionLoading)]\"\n        :style=\"{\n          [fitInputWidth ? 'width' : 'minWidth']: dropdownWidth,\n          outline: 'none',\n        }\"\n        role=\"region\"\n      >\n        <el-scrollbar\n          :id=\"listboxId\"\n          tag=\"ul\"\n          :wrap-class=\"ns.be('suggestion', 'wrap')\"\n          :view-class=\"ns.be('suggestion', 'list')\"\n          role=\"listbox\"\n        >\n          <li v-if=\"suggestionLoading\">\n            <el-icon :class=\"ns.is('loading')\">\n              <Loading />\n            </el-icon>\n          </li>\n          <template v-else>\n            <li\n              v-for=\"(item, index) in suggestions\"\n              :id=\"`${listboxId}-item-${index}`\"\n              :key=\"index\"\n              :class=\"{ highlighted: highlightedIndex === index }\"\n              role=\"option\"\n              :aria-selected=\"highlightedIndex === index\"\n              @click=\"handleSelect(item)\"\n            >\n              <slot :item=\"item\">{{ item[valueKey] }}</slot>\n            </li>\n          </template>\n        </el-scrollbar>\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  ref,\n  useAttrs as useRawAttrs,\n} from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { onClickOutside } from '@vueuse/core'\nimport { Loading } from '@element-plus/icons-vue'\nimport { useAttrs, useNamespace } from '@element-plus/hooks'\nimport { generateId, isArray, throwError } from '@element-plus/utils'\nimport {\n  CHANGE_EVENT,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport ElInput from '@element-plus/components/input'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElIcon from '@element-plus/components/icon'\nimport { useFormDisabled } from '@element-plus/components/form'\nimport { autocompleteEmits, autocompleteProps } from './autocomplete'\nimport type { AutocompleteData } from './autocomplete'\n\nimport type { StyleValue } from 'vue'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\nimport type { InputInstance } from '@element-plus/components/input'\n\nconst COMPONENT_NAME = 'ElAutocomplete'\ndefineOptions({\n  name: COMPONENT_NAME,\n  inheritAttrs: false,\n})\n\nconst props = defineProps(autocompleteProps)\nconst emit = defineEmits(autocompleteEmits)\n\nconst attrs = useAttrs()\nconst rawAttrs = useRawAttrs()\nconst disabled = useFormDisabled()\nconst ns = useNamespace('autocomplete')\n\nconst inputRef = ref<InputInstance>()\nconst regionRef = ref<HTMLElement>()\nconst popperRef = ref<TooltipInstance>()\nconst listboxRef = ref<HTMLElement>()\n\nlet readonly = false\nlet ignoreFocusEvent = false\nconst suggestions = ref<AutocompleteData>([])\nconst highlightedIndex = ref(-1)\nconst dropdownWidth = ref('')\nconst activated = ref(false)\nconst suggestionDisabled = ref(false)\nconst loading = ref(false)\n\nconst listboxId = computed(() => ns.b(String(generateId())))\nconst styles = computed(() => rawAttrs.style as StyleValue)\n\nconst suggestionVisible = computed(() => {\n  const isValidData = suggestions.value.length > 0\n  return (isValidData || loading.value) && activated.value\n})\n\nconst suggestionLoading = computed(() => !props.hideLoading && loading.value)\n\nconst refInput = computed<HTMLInputElement[]>(() => {\n  if (inputRef.value) {\n    return Array.from<HTMLInputElement>(\n      inputRef.value.$el.querySelectorAll('input')\n    )\n  }\n  return []\n})\n\nconst onSuggestionShow = async () => {\n  await nextTick()\n  if (suggestionVisible.value) {\n    dropdownWidth.value = `${inputRef.value!.$el.offsetWidth}px`\n  }\n}\n\nconst onHide = () => {\n  highlightedIndex.value = -1\n}\n\nconst getData = async (queryString: string) => {\n  if (suggestionDisabled.value) return\n\n  const cb = (suggestionList: AutocompleteData) => {\n    loading.value = false\n    if (suggestionDisabled.value) return\n\n    if (isArray(suggestionList)) {\n      suggestions.value = suggestionList\n      highlightedIndex.value = props.highlightFirstItem ? 0 : -1\n    } else {\n      throwError(COMPONENT_NAME, 'autocomplete suggestions must be an array')\n    }\n  }\n\n  loading.value = true\n  if (isArray(props.fetchSuggestions)) {\n    cb(props.fetchSuggestions)\n  } else {\n    const result = await props.fetchSuggestions(queryString, cb)\n    if (isArray(result)) cb(result)\n  }\n}\nconst debouncedGetData = debounce(getData, props.debounce)\n\nconst handleInput = (value: string) => {\n  const valuePresented = !!value\n\n  emit(INPUT_EVENT, value)\n  emit(UPDATE_MODEL_EVENT, value)\n\n  suggestionDisabled.value = false\n  activated.value ||= valuePresented\n\n  if (!props.triggerOnFocus && !value) {\n    suggestionDisabled.value = true\n    suggestions.value = []\n    return\n  }\n\n  debouncedGetData(value)\n}\n\nconst handleMouseDown = (event: MouseEvent) => {\n  if (disabled.value) return\n  if (\n    (event.target as HTMLElement)?.tagName !== 'INPUT' ||\n    refInput.value.includes(document.activeElement as HTMLInputElement)\n  ) {\n    activated.value = true\n  }\n}\n\nconst handleChange = (value: string) => {\n  emit(CHANGE_EVENT, value)\n}\n\nconst handleFocus = (evt: FocusEvent) => {\n  if (!ignoreFocusEvent) {\n    activated.value = true\n    emit('focus', evt)\n\n    if (props.triggerOnFocus && !readonly) {\n      debouncedGetData(String(props.modelValue))\n    }\n  } else {\n    ignoreFocusEvent = false\n  }\n}\n\nconst handleBlur = (evt: FocusEvent) => {\n  setTimeout(() => {\n    // validate current focus event is inside el-tooltip-content\n    // if so, ignore the blur event and the next focus event\n    if (popperRef.value?.isFocusInsideContent()) {\n      ignoreFocusEvent = true\n      return\n    }\n    activated.value && close()\n    emit('blur', evt)\n  })\n}\n\nconst handleClear = () => {\n  activated.value = false\n  emit(UPDATE_MODEL_EVENT, '')\n  emit('clear')\n}\n\nconst handleKeyEnter = async () => {\n  if (\n    suggestionVisible.value &&\n    highlightedIndex.value >= 0 &&\n    highlightedIndex.value < suggestions.value.length\n  ) {\n    handleSelect(suggestions.value[highlightedIndex.value])\n  } else if (props.selectWhenUnmatched) {\n    emit('select', { value: props.modelValue })\n    suggestions.value = []\n    highlightedIndex.value = -1\n  }\n}\n\nconst handleKeyEscape = (evt: Event) => {\n  if (suggestionVisible.value) {\n    evt.preventDefault()\n    evt.stopPropagation()\n    close()\n  }\n}\n\nconst close = () => {\n  activated.value = false\n}\n\nconst focus = () => {\n  inputRef.value?.focus()\n}\n\nconst blur = () => {\n  inputRef.value?.blur()\n}\n\nconst handleSelect = async (item: any) => {\n  emit(INPUT_EVENT, item[props.valueKey])\n  emit(UPDATE_MODEL_EVENT, item[props.valueKey])\n  emit('select', item)\n  suggestions.value = []\n  highlightedIndex.value = -1\n}\n\nconst highlight = (index: number) => {\n  if (!suggestionVisible.value || loading.value) return\n\n  if (index < 0) {\n    highlightedIndex.value = -1\n    return\n  }\n\n  if (index >= suggestions.value.length) {\n    index = suggestions.value.length - 1\n  }\n  const suggestion = regionRef.value!.querySelector(\n    `.${ns.be('suggestion', 'wrap')}`\n  )!\n  const suggestionList = suggestion.querySelectorAll<HTMLElement>(\n    `.${ns.be('suggestion', 'list')} li`\n  )!\n  const highlightItem = suggestionList[index]\n  const scrollTop = suggestion.scrollTop\n  const { offsetTop, scrollHeight } = highlightItem\n\n  if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {\n    suggestion.scrollTop += scrollHeight\n  }\n  if (offsetTop < scrollTop) {\n    suggestion.scrollTop -= scrollHeight\n  }\n  highlightedIndex.value = index\n  // TODO: use Volar generate dts to fix it.\n  ;(inputRef.value as any).ref!.setAttribute(\n    'aria-activedescendant',\n    `${listboxId.value}-item-${highlightedIndex.value}`\n  )\n}\n\nonClickOutside(listboxRef, () => {\n  suggestionVisible.value && close()\n})\n\nonMounted(() => {\n  // TODO: use Volar generate dts to fix it.\n  ;(inputRef.value as any).ref!.setAttribute('role', 'textbox')\n  ;(inputRef.value as any).ref!.setAttribute('aria-autocomplete', 'list')\n  ;(inputRef.value as any).ref!.setAttribute('aria-controls', 'id')\n  ;(inputRef.value as any).ref!.setAttribute(\n    'aria-activedescendant',\n    `${listboxId.value}-item-${highlightedIndex.value}`\n  )\n  // get readonly attr\n  readonly = (inputRef.value as any).ref!.hasAttribute('readonly')\n})\n\ndefineExpose({\n  /** @description the index of the currently highlighted item */\n  highlightedIndex,\n  /** @description autocomplete whether activated */\n  activated,\n  /** @description remote search loading status */\n  loading,\n  /** @description el-input component instance */\n  inputRef,\n  /** @description el-tooltip component instance */\n  popperRef,\n  /** @description fetch suggestions result */\n  suggestions,\n  /** @description triggers when a suggestion is clicked */\n  handleSelect,\n  /** @description handle keyboard enter event */\n  handleKeyEnter,\n  /** @description focus the input element */\n  focus,\n  /** @description blur the input element */\n  blur,\n  /** @description close suggestion */\n  close,\n  /** @description highlight an item in a suggestion */\n  highlight,\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}