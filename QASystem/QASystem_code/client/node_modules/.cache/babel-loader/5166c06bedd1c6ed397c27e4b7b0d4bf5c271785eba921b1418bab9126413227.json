{"ast":null,"code":"import '../../cascader-panel/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../tooltip/index.mjs';\nimport '../../tag/index.mjs';\nimport '../../../constants/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { CommonProps } from '../../cascader-panel/src/config.mjs';\nimport { useSizeProp } from '../../../hooks/use-size/index.mjs';\nimport { useTooltipContentProps } from '../../tooltip/src/content.mjs';\nimport { tagProps } from '../../tag/src/tag.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { isBoolean } from '@vueuse/core';\nconst cascaderProps = buildProps({\n  ...CommonProps,\n  size: useSizeProp,\n  placeholder: String,\n  disabled: Boolean,\n  clearable: Boolean,\n  filterable: Boolean,\n  filterMethod: {\n    type: definePropType(Function),\n    default: (node, keyword) => node.text.includes(keyword)\n  },\n  separator: {\n    type: String,\n    default: \" / \"\n  },\n  showAllLevels: {\n    type: Boolean,\n    default: true\n  },\n  collapseTags: Boolean,\n  collapseTagsTooltip: {\n    type: Boolean,\n    default: false\n  },\n  debounce: {\n    type: Number,\n    default: 300\n  },\n  beforeFilter: {\n    type: definePropType(Function),\n    default: () => true\n  },\n  popperClass: {\n    type: String,\n    default: \"\"\n  },\n  teleported: useTooltipContentProps.teleported,\n  tagType: {\n    ...tagProps.type,\n    default: \"info\"\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true\n  }\n});\nconst cascaderEmits = {\n  [UPDATE_MODEL_EVENT]: val => !!val || val === null,\n  [CHANGE_EVENT]: val => !!val || val === null,\n  focus: evt => evt instanceof FocusEvent,\n  blur: evt => evt instanceof FocusEvent,\n  visibleChange: val => isBoolean(val),\n  expandChange: val => !!val,\n  removeTag: val => !!val\n};\nexport { cascaderEmits, cascaderProps };","map":{"version":3,"names":["cascaderProps","buildProps","CommonProps","size","useSizeProp","placeholder","String","disabled","Boolean","clearable","filterable","filterMethod","type","definePropType","Function","default","node","keyword","text","includes","separator","showAllLevels","collapseTags","collapseTagsTooltip","debounce","Number","beforeFilter","popperClass","teleported","useTooltipContentProps","tagType","tagProps","validateEvent","cascaderEmits","UPDATE_MODEL_EVENT","val","CHANGE_EVENT","focus","evt","FocusEvent","blur","visibleChange","isBoolean","expandChange","removeTag"],"sources":["../../../../../../packages/components/cascader/src/cascader.ts"],"sourcesContent":["import { CommonProps } from '@element-plus/components/cascader-panel'\nimport { buildProps, definePropType, isBoolean } from '@element-plus/utils'\nimport { useSizeProp } from '@element-plus/hooks'\nimport { useTooltipContentProps } from '@element-plus/components/tooltip'\nimport { tagProps } from '@element-plus/components/tag'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport type {\n  CascaderNode,\n  CascaderValue,\n} from '@element-plus/components/cascader-panel'\n\nexport const cascaderProps = buildProps({\n  ...CommonProps,\n  /**\n   * @description size of input\n   */\n  size: useSizeProp,\n  /**\n   * @description placeholder of input\n   */\n  placeholder: String,\n  /**\n   * @description whether Cascader is disabled\n   */\n  disabled: Boolean,\n  /**\n   * @description whether selected value can be cleared\n   */\n  clearable: Boolean,\n  /**\n   * @description whether the options can be searched\n   */\n  filterable: Boolean,\n  /**\n   * @description customize search logic, the first parameter is `node`, the second is `keyword`, and need return a boolean value indicating whether it hits.\n   */\n  filterMethod: {\n    type: definePropType<(node: CascaderNode, keyword: string) => boolean>(\n      Function\n    ),\n    default: (node: CascaderNode, keyword: string) =>\n      node.text.includes(keyword),\n  },\n  /**\n   * @description option label separator\n   */\n  separator: {\n    type: String,\n    default: ' / ',\n  },\n  /**\n   * @description whether to display all levels of the selected value in the input\n   */\n  showAllLevels: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description whether to collapse tags in multiple selection mode\n   */\n  collapseTags: Boolean,\n  /**\n   * @description native input id\n   */\n  collapseTagsTooltip: {\n    type: Boolean,\n    default: false,\n  },\n  /**\n   * @description debounce delay when typing filter keyword, in milliseconds\n   */\n  debounce: {\n    type: Number,\n    default: 300,\n  },\n  /**\n   * @description hook function before filtering with the value to be filtered as its parameter. If `false` is returned or a `Promise` is returned and then is rejected, filtering will be aborted\n   */\n  beforeFilter: {\n    type: definePropType<(value: string) => boolean | Promise<any>>(Function),\n    default: () => true,\n  },\n  /**\n   * @description custom class name for Cascader's dropdown\n   */\n  popperClass: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description whether cascader popup is teleported\n   */\n  teleported: useTooltipContentProps.teleported,\n  /**\n   * @description tag type\n   */\n  // eslint-disable-next-line vue/require-prop-types\n  tagType: { ...tagProps.type, default: 'info' },\n  /**\n   * @description whether to trigger form validation\n   */\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n})\n\nexport const cascaderEmits = {\n  [UPDATE_MODEL_EVENT]: (val: CascaderValue) => !!val || val === null,\n  [CHANGE_EVENT]: (val: CascaderValue) => !!val || val === null,\n  focus: (evt: FocusEvent) => evt instanceof FocusEvent,\n  blur: (evt: FocusEvent) => evt instanceof FocusEvent,\n  visibleChange: (val: boolean) => isBoolean(val),\n  expandChange: (val: CascaderValue) => !!val,\n  removeTag: (val: CascaderNode['valueByOption']) => !!val,\n}\n\n// Type name is taken(cascader-panel/src/node), needs discussion\n// export type CascaderProps = ExtractPropTypes<typeof cascaderProps>\n\nexport type CascaderEmits = typeof cascaderEmits\n"],"mappings":";;;;;;;;;;;;;AAMY,MAACA,aAAa,GAAGC,UAAU,CAAC;EACtC,GAAGC,WAAW;EACdC,IAAI,EAAEC,WAAW;EACjBC,WAAW,EAAEC,MAAM;EACnBC,QAAQ,EAAEC,OAAO;EACjBC,SAAS,EAAED,OAAO;EAClBE,UAAU,EAAEF,OAAO;EACnBG,YAAY,EAAE;IACZC,IAAI,EAAEC,cAAc,CAACC,QAAQ,CAAC;IAC9BC,OAAO,EAAEA,CAACC,IAAI,EAAEC,OAAO,KAAKD,IAAI,CAACE,IAAI,CAACC,QAAQ,CAACF,OAAO;EAC1D,CAAG;EACDG,SAAS,EAAE;IACTR,IAAI,EAAEN,MAAM;IACZS,OAAO,EAAE;EACb,CAAG;EACDM,aAAa,EAAE;IACbT,IAAI,EAAEJ,OAAO;IACbO,OAAO,EAAE;EACb,CAAG;EACDO,YAAY,EAAEd,OAAO;EACrBe,mBAAmB,EAAE;IACnBX,IAAI,EAAEJ,OAAO;IACbO,OAAO,EAAE;EACb,CAAG;EACDS,QAAQ,EAAE;IACRZ,IAAI,EAAEa,MAAM;IACZV,OAAO,EAAE;EACb,CAAG;EACDW,YAAY,EAAE;IACZd,IAAI,EAAEC,cAAc,CAACC,QAAQ,CAAC;IAC9BC,OAAO,EAAEA,CAAA,KAAM;EACnB,CAAG;EACDY,WAAW,EAAE;IACXf,IAAI,EAAEN,MAAM;IACZS,OAAO,EAAE;EACb,CAAG;EACDa,UAAU,EAAEC,sBAAsB,CAACD,UAAU;EAC7CE,OAAO,EAAE;IAAE,GAAGC,QAAQ,CAACnB,IAAI;IAAEG,OAAO,EAAE;EAAM,CAAE;EAC9CiB,aAAa,EAAE;IACbpB,IAAI,EAAEJ,OAAO;IACbO,OAAO,EAAE;EACb;AACA,CAAC;AACW,MAACkB,aAAa,GAAG;EAC3B,CAACC,kBAAkB,GAAIC,GAAG,IAAK,CAAC,CAACA,GAAG,IAAIA,GAAG,KAAK,IAAI;EACpD,CAACC,YAAY,GAAID,GAAG,IAAK,CAAC,CAACA,GAAG,IAAIA,GAAG,KAAK,IAAI;EAC9CE,KAAK,EAAGC,GAAG,IAAKA,GAAG,YAAYC,UAAU;EACzCC,IAAI,EAAGF,GAAG,IAAKA,GAAG,YAAYC,UAAU;EACxCE,aAAa,EAAGN,GAAG,IAAKO,SAAS,CAACP,GAAG,CAAC;EACtCQ,YAAY,EAAGR,GAAG,IAAK,CAAC,CAACA,GAAG;EAC5BS,SAAS,EAAGT,GAAG,IAAK,CAAC,CAACA;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}