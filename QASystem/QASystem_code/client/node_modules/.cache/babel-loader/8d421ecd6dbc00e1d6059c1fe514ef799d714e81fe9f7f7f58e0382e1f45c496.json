{"ast":null,"code":"import { defineComponent, inject, ref, getCurrentInstance, provide, watch, nextTick, resolveComponent, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createVNode, Fragment, renderList, vShow } from 'vue';\nimport { isFunction, isString } from '@vue/shared';\nimport _CollapseTransition from '../../collapse-transition/index.mjs';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Loading, CaretRight } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport NodeContent from './tree-node-content.mjs';\nimport { getNodeKey, handleCurrentChange } from './model/util.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { dragEventsKey } from './model/useDragNode.mjs';\nimport Node from './model/node.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElTreeNode\",\n  components: {\n    ElCollapseTransition: _CollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({})\n    },\n    props: {\n      type: Object,\n      default: () => ({})\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"node-expand\"],\n  setup(props, ctx) {\n    const ns = useNamespace(\"tree\");\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast(props);\n    const tree = inject(\"RootTree\");\n    const expanded = ref(false);\n    const childNodeRendered = ref(false);\n    const oldChecked = ref(null);\n    const oldIndeterminate = ref(null);\n    const node$ = ref(null);\n    const dragEvents = inject(dragEventsKey);\n    const instance = getCurrentInstance();\n    provide(\"NodeInstance\", instance);\n    if (!tree) {\n      debugWarn(\"Tree\", \"Can not find node's tree.\");\n    }\n    if (props.node.expanded) {\n      expanded.value = true;\n      childNodeRendered.value = true;\n    }\n    const childrenKey = tree.props[\"children\"] || \"children\";\n    watch(() => {\n      const children = props.node.data[childrenKey];\n      return children && [...children];\n    }, () => {\n      props.node.updateChildren();\n    });\n    watch(() => props.node.indeterminate, val => {\n      handleSelectChange(props.node.checked, val);\n    });\n    watch(() => props.node.checked, val => {\n      handleSelectChange(val, props.node.indeterminate);\n    });\n    watch(() => props.node.expanded, val => {\n      nextTick(() => expanded.value = val);\n      if (val) {\n        childNodeRendered.value = true;\n      }\n    });\n    const getNodeKey$1 = node => {\n      return getNodeKey(tree.props.nodeKey, node.data);\n    };\n    const getNodeClass = node => {\n      const nodeClassFunc = props.props.class;\n      if (!nodeClassFunc) {\n        return {};\n      }\n      let className;\n      if (isFunction(nodeClassFunc)) {\n        const {\n          data\n        } = node;\n        className = nodeClassFunc(data, node);\n      } else {\n        className = nodeClassFunc;\n      }\n      if (isString(className)) {\n        return {\n          [className]: true\n        };\n      } else {\n        return className;\n      }\n    };\n    const handleSelectChange = (checked, indeterminate) => {\n      if (oldChecked.value !== checked || oldIndeterminate.value !== indeterminate) {\n        tree.ctx.emit(\"check-change\", props.node.data, checked, indeterminate);\n      }\n      oldChecked.value = checked;\n      oldIndeterminate.value = indeterminate;\n    };\n    const handleClick = e => {\n      handleCurrentChange(tree.store, tree.ctx.emit, () => tree.store.value.setCurrentNode(props.node));\n      tree.currentNode.value = props.node;\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick();\n      }\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: {\n            checked: !props.node.checked\n          }\n        });\n      }\n      tree.ctx.emit(\"node-click\", props.node.data, props.node, instance, e);\n    };\n    const handleContextMenu = event => {\n      if (tree.instance.vnode.props[\"onNodeContextmenu\"]) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n      tree.ctx.emit(\"node-contextmenu\", event, props.node.data, props.node, instance);\n    };\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return;\n      if (expanded.value) {\n        tree.ctx.emit(\"node-collapse\", props.node.data, props.node, instance);\n        props.node.collapse();\n      } else {\n        props.node.expand();\n        ctx.emit(\"node-expand\", props.node.data, props.node, instance);\n      }\n    };\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly);\n      nextTick(() => {\n        const store = tree.store.value;\n        tree.ctx.emit(\"check\", props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys()\n        });\n      });\n    };\n    const handleChildNodeExpand = (nodeData, node, instance2) => {\n      broadcastExpanded(node);\n      tree.ctx.emit(\"node-expand\", nodeData, node, instance2);\n    };\n    const handleDragStart = event => {\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragStart({\n        event,\n        treeNode: props\n      });\n    };\n    const handleDragOver = event => {\n      event.preventDefault();\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: {\n          $el: node$.value,\n          node: props.node\n        }\n      });\n    };\n    const handleDrop = event => {\n      event.preventDefault();\n    };\n    const handleDragEnd = event => {\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragEnd(event);\n    };\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey: getNodeKey$1,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight\n    };\n  }\n});\nconst _hoisted_1 = [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"draggable\", \"data-key\"];\nconst _hoisted_2 = [\"aria-expanded\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n  const _component_loading = resolveComponent(\"loading\");\n  const _component_node_content = resolveComponent(\"node-content\");\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  const _component_el_collapse_transition = resolveComponent(\"el-collapse-transition\");\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    ref: \"node$\",\n    class: normalizeClass([_ctx.ns.b(\"node\"), _ctx.ns.is(\"expanded\", _ctx.expanded), _ctx.ns.is(\"current\", _ctx.node.isCurrent), _ctx.ns.is(\"hidden\", !_ctx.node.visible), _ctx.ns.is(\"focusable\", !_ctx.node.disabled), _ctx.ns.is(\"checked\", !_ctx.node.disabled && _ctx.node.checked), _ctx.getNodeClass(_ctx.node)]),\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.node.disabled,\n    \"aria-checked\": _ctx.node.checked,\n    draggable: _ctx.tree.props.draggable,\n    \"data-key\": _ctx.getNodeKey(_ctx.node),\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), [\"stop\"])),\n    onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args)),\n    onDragstart: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.handleDragStart && _ctx.handleDragStart(...args), [\"stop\"])),\n    onDragover: _cache[4] || (_cache[4] = withModifiers((...args) => _ctx.handleDragOver && _ctx.handleDragOver(...args), [\"stop\"])),\n    onDragend: _cache[5] || (_cache[5] = withModifiers((...args) => _ctx.handleDragEnd && _ctx.handleDragEnd(...args), [\"stop\"])),\n    onDrop: _cache[6] || (_cache[6] = withModifiers((...args) => _ctx.handleDrop && _ctx.handleDrop(...args), [\"stop\"]))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.be(\"node\", \"content\")),\n    style: normalizeStyle({\n      paddingLeft: (_ctx.node.level - 1) * _ctx.tree.props.indent + \"px\"\n    })\n  }, [_ctx.tree.props.icon || _ctx.CaretRight ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass([_ctx.ns.be(\"node\", \"expand-icon\"), _ctx.ns.is(\"leaf\", _ctx.node.isLeaf), {\n      expanded: !_ctx.node.isLeaf && _ctx.expanded\n    }]),\n    onClick: withModifiers(_ctx.handleExpandIconClick, [\"stop\"])\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.tree.props.icon || _ctx.CaretRight)))]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 1,\n    \"model-value\": _ctx.node.checked,\n    indeterminate: _ctx.node.indeterminate,\n    disabled: !!_ctx.node.disabled,\n    onClick: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"stop\"])),\n    onChange: _ctx.handleCheckChange\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : createCommentVNode(\"v-if\", true), _ctx.node.loading ? (openBlock(), createBlock(_component_el_icon, {\n    key: 2,\n    class: normalizeClass([_ctx.ns.be(\"node\", \"loading-icon\"), _ctx.ns.is(\"loading\")])\n  }, {\n    default: withCtx(() => [createVNode(_component_loading)]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createVNode(_component_node_content, {\n    node: _ctx.node,\n    \"render-content\": _ctx.renderContent\n  }, null, 8, [\"node\", \"render-content\"])], 6), createVNode(_component_el_collapse_transition, null, {\n    default: withCtx(() => [!_ctx.renderAfterExpand || _ctx.childNodeRendered ? withDirectives((openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass(_ctx.ns.be(\"node\", \"children\")),\n      role: \"group\",\n      \"aria-expanded\": _ctx.expanded\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.node.childNodes, child => {\n      return openBlock(), createBlock(_component_el_tree_node, {\n        key: _ctx.getNodeKey(child),\n        \"render-content\": _ctx.renderContent,\n        \"render-after-expand\": _ctx.renderAfterExpand,\n        \"show-checkbox\": _ctx.showCheckbox,\n        node: child,\n        accordion: _ctx.accordion,\n        props: _ctx.props,\n        onNodeExpand: _ctx.handleChildNodeExpand\n      }, null, 8, [\"render-content\", \"render-after-expand\", \"show-checkbox\", \"node\", \"accordion\", \"props\", \"onNodeExpand\"]);\n    }), 128))], 10, _hoisted_2)), [[vShow, _ctx.expanded]]) : createCommentVNode(\"v-if\", true)]),\n    _: 1\n  })], 42, _hoisted_1)), [[vShow, _ctx.node.visible]]);\n}\nvar ElTreeNode = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree/src/tree-node.vue\"]]);\nexport { ElTreeNode as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","ElCollapseTransition","_CollapseTransition","ElCheckbox","NodeContent","ElIcon","Loading","props","node","type","Node","default","Object","accordion","Boolean","renderContent","Function","renderAfterExpand","showCheckbox","emits","setup","ctx","ns","useNamespace","broadcastExpanded","useNodeExpandEventBroadcast","tree","inject","expanded","ref","childNodeRendered","oldChecked","oldIndeterminate","node$","dragEvents","dragEventsKey","instance","getCurrentInstance","provide","debugWarn","value","childrenKey","watch","children","data","updateChildren","indeterminate","val","handleSelectChange","checked","nextTick","getNodeKey$1","getNodeKey","nodeKey","getNodeClass","nodeClassFunc","class","className","isFunction","isString","emit","handleClick","e","handleCurrentChange","store","setCurrentNode","currentNode","expandOnClickNode","handleExpandIconClick","checkOnClickNode","disabled","handleCheckChange","target","handleContextMenu","event","vnode","stopPropagation","preventDefault","isLeaf","collapse","expand","ev","setChecked","checkStrictly","checkedNodes","getCheckedNodes","checkedKeys","getCheckedKeys","halfCheckedNodes","getHalfCheckedNodes","halfCheckedKeys","getHalfCheckedKeys","handleChildNodeExpand","nodeData","instance2","handleDragStart","draggable","treeNodeDragStart","treeNode","handleDragOver","treeNodeDragOver","$el","handleDrop","handleDragEnd","treeNodeDragEnd","CaretRight","createElementBlock","normalizeClass","_ctx","b","is","isCurrent","visible","role","tabindex","onClick","_cache","withModifiers","args","onContextmenu","onDragstart","onDragover","onDragend","onDrop","createElementVNode","be","style","normalizeStyle","paddingLeft","level","indent","icon","openBlock","createBlock","_component_el_icon","key","resolveDynamicComponent","_component_el_checkbox","onChange","createCommentVNode","loading","createVNode","_component_loading","_component_node_content","_component_el_collapse_transition","withCtx","withDirectives","Fragment","renderList","childNodes","child","_component_el_tree_node","onNodeExpand","vShow"],"sources":["../../../../../../packages/components/tree/src/tree-node.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"node.visible\"\n    ref=\"node$\"\n    :class=\"[\n      ns.b('node'),\n      ns.is('expanded', expanded),\n      ns.is('current', node.isCurrent),\n      ns.is('hidden', !node.visible),\n      ns.is('focusable', !node.disabled),\n      ns.is('checked', !node.disabled && node.checked),\n      getNodeClass(node),\n    ]\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"node.disabled\"\n    :aria-checked=\"node.checked\"\n    :draggable=\"tree.props.draggable\"\n    :data-key=\"getNodeKey(node)\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n    @dragstart.stop=\"handleDragStart\"\n    @dragover.stop=\"handleDragOver\"\n    @dragend.stop=\"handleDragEnd\"\n    @drop.stop=\"handleDrop\"\n  >\n    <div\n      :class=\"ns.be('node', 'content')\"\n      :style=\"{ paddingLeft: (node.level - 1) * tree.props.indent + 'px' }\"\n    >\n      <el-icon\n        v-if=\"tree.props.icon || CaretRight\"\n        :class=\"[\n          ns.be('node', 'expand-icon'),\n          ns.is('leaf', node.isLeaf),\n          {\n            expanded: !node.isLeaf && expanded,\n          },\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"tree.props.icon || CaretRight\" />\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"node.checked\"\n        :indeterminate=\"node.indeterminate\"\n        :disabled=\"!!node.disabled\"\n        @click.stop\n        @change=\"handleCheckChange\"\n      />\n      <el-icon\n        v-if=\"node.loading\"\n        :class=\"[ns.be('node', 'loading-icon'), ns.is('loading')]\"\n      >\n        <loading />\n      </el-icon>\n      <node-content :node=\"node\" :render-content=\"renderContent\" />\n    </div>\n    <el-collapse-transition>\n      <div\n        v-if=\"!renderAfterExpand || childNodeRendered\"\n        v-show=\"expanded\"\n        :class=\"ns.be('node', 'children')\"\n        role=\"group\"\n        :aria-expanded=\"expanded\"\n      >\n        <el-tree-node\n          v-for=\"child in node.childNodes\"\n          :key=\"getNodeKey(child)\"\n          :render-content=\"renderContent\"\n          :render-after-expand=\"renderAfterExpand\"\n          :show-checkbox=\"showCheckbox\"\n          :node=\"child\"\n          :accordion=\"accordion\"\n          :props=\"props\"\n          @node-expand=\"handleChildNodeExpand\"\n        />\n      </div>\n    </el-collapse-transition>\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { isFunction, isString } from '@vue/shared'\nimport ElCollapseTransition from '@element-plus/components/collapse-transition'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CaretRight, Loading } from '@element-plus/icons-vue'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport NodeContent from './tree-node-content.vue'\nimport { getNodeKey as getNodeKeyUtil, handleCurrentChange } from './model/util'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { dragEventsKey } from './model/useDragNode'\nimport Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type { RootTreeType, TreeNodeData, TreeOptionProps } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNode',\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading,\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({}),\n    },\n    props: {\n      type: Object as PropType<TreeOptionProps>,\n      default: () => ({}),\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['node-expand'],\n  setup(props, ctx) {\n    const ns = useNamespace('tree')\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n    const tree = inject<RootTreeType>('RootTree')\n    const expanded = ref(false)\n    const childNodeRendered = ref(false)\n    const oldChecked = ref<boolean>(null)\n    const oldIndeterminate = ref<boolean>(null)\n    const node$ = ref<Nullable<HTMLElement>>(null)\n    const dragEvents = inject(dragEventsKey)\n    const instance = getCurrentInstance()\n\n    provide('NodeInstance', instance)\n    if (!tree) {\n      debugWarn('Tree', \"Can not find node's tree.\")\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true\n      childNodeRendered.value = true\n    }\n\n    const childrenKey = tree.props['children'] || 'children'\n    watch(\n      () => {\n        const children = props.node.data[childrenKey]\n        return children && [...children]\n      },\n      () => {\n        props.node.updateChildren()\n      }\n    )\n\n    watch(\n      () => props.node.indeterminate,\n      (val) => {\n        handleSelectChange(props.node.checked, val)\n      }\n    )\n\n    watch(\n      () => props.node.checked,\n      (val) => {\n        handleSelectChange(val, props.node.indeterminate)\n      }\n    )\n\n    watch(\n      () => props.node.expanded,\n      (val) => {\n        nextTick(() => (expanded.value = val))\n        if (val) {\n          childNodeRendered.value = true\n        }\n      }\n    )\n\n    const getNodeKey = (node: Node): any => {\n      return getNodeKeyUtil(tree.props.nodeKey, node.data)\n    }\n\n    const getNodeClass = (node: Node) => {\n      const nodeClassFunc = props.props.class\n      if (!nodeClassFunc) {\n        return {}\n      }\n      let className\n      if (isFunction(nodeClassFunc)) {\n        const { data } = node\n        className = nodeClassFunc(data, node)\n      } else {\n        className = nodeClassFunc\n      }\n\n      if (isString(className)) {\n        return { [className]: true }\n      } else {\n        return className\n      }\n    }\n\n    const handleSelectChange = (checked: boolean, indeterminate: boolean) => {\n      if (\n        oldChecked.value !== checked ||\n        oldIndeterminate.value !== indeterminate\n      ) {\n        tree.ctx.emit('check-change', props.node.data, checked, indeterminate)\n      }\n      oldChecked.value = checked\n      oldIndeterminate.value = indeterminate\n    }\n\n    const handleClick = (e: MouseEvent) => {\n      handleCurrentChange(tree.store, tree.ctx.emit, () =>\n        tree.store.value.setCurrentNode(props.node)\n      )\n      tree.currentNode.value = props.node\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick()\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: { checked: !props.node.checked },\n        })\n      }\n      tree.ctx.emit('node-click', props.node.data, props.node, instance, e)\n    }\n\n    const handleContextMenu = (event: Event) => {\n      if (tree.instance.vnode.props['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree.ctx.emit(\n        'node-contextmenu',\n        event,\n        props.node.data,\n        props.node,\n        instance\n      )\n    }\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return\n      if (expanded.value) {\n        tree.ctx.emit('node-collapse', props.node.data, props.node, instance)\n        props.node.collapse()\n      } else {\n        props.node.expand()\n        ctx.emit('node-expand', props.node.data, props.node, instance)\n      }\n    }\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly)\n      nextTick(() => {\n        const store = tree.store.value\n        tree.ctx.emit('check', props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys(),\n        })\n      })\n    }\n\n    const handleChildNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      tree.ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const handleDragStart = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragStart({ event, treeNode: props })\n    }\n\n    const handleDragOver = (event: DragEvent) => {\n      event.preventDefault()\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: { $el: node$.value, node: props.node },\n      })\n    }\n\n    const handleDrop = (event: DragEvent) => {\n      event.preventDefault()\n    }\n\n    const handleDragEnd = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragEnd(event)\n    }\n\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}