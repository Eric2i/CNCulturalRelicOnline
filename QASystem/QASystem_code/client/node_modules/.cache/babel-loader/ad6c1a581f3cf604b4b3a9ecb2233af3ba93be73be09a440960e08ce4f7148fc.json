{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, useSlots, provide, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, renderSlot, createTextVNode, toDisplayString, createCommentVNode, Fragment, renderList, createBlock } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../form/index.mjs';\nimport ElDescriptionsRow from './descriptions-row2.mjs';\nimport { descriptionsKey } from './token.mjs';\nimport { descriptionProps } from './description.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormSize } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { flattedChildren } from '../../../utils/vue/vnode.mjs';\nconst __default__ = defineComponent({\n  name: \"ElDescriptions\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: descriptionProps,\n  setup(__props) {\n    const props = __props;\n    const ns = useNamespace(\"descriptions\");\n    const descriptionsSize = useFormSize();\n    const slots = useSlots();\n    provide(descriptionsKey, props);\n    const descriptionKls = computed(() => [ns.b(), ns.m(descriptionsSize.value)]);\n    const filledNode = (node, span, count, isLast = false) => {\n      if (!node.props) {\n        node.props = {};\n      }\n      if (span > count) {\n        node.props.span = count;\n      }\n      if (isLast) {\n        node.props.span = span;\n      }\n      return node;\n    };\n    const getRows = () => {\n      var _a;\n      const children = flattedChildren((_a = slots.default) == null ? void 0 : _a.call(slots)).filter(node => {\n        var _a2;\n        return ((_a2 = node == null ? void 0 : node.type) == null ? void 0 : _a2.name) === \"ElDescriptionsItem\";\n      });\n      const rows = [];\n      let temp = [];\n      let count = props.column;\n      let totalSpan = 0;\n      children.forEach((node, index) => {\n        var _a2;\n        const span = ((_a2 = node.props) == null ? void 0 : _a2.span) || 1;\n        if (index < children.length - 1) {\n          totalSpan += span > count ? count : span;\n        }\n        if (index === children.length - 1) {\n          const lastSpan = props.column - totalSpan % props.column;\n          temp.push(filledNode(node, lastSpan, count, true));\n          rows.push(temp);\n          return;\n        }\n        if (span < count) {\n          count -= span;\n          temp.push(node);\n        } else {\n          temp.push(filledNode(node, span, count));\n          rows.push(temp);\n          count = props.column;\n          temp = [];\n        }\n      });\n      return rows;\n    };\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass(unref(descriptionKls))\n      }, [_ctx.title || _ctx.extra || _ctx.$slots.title || _ctx.$slots.extra ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(ns).e(\"header\"))\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"title\"))\n      }, [renderSlot(_ctx.$slots, \"title\", {}, () => [createTextVNode(toDisplayString(_ctx.title), 1)])], 2), createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"extra\"))\n      }, [renderSlot(_ctx.$slots, \"extra\", {}, () => [createTextVNode(toDisplayString(_ctx.extra), 1)])], 2)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"body\"))\n      }, [createElementVNode(\"table\", {\n        class: normalizeClass([unref(ns).e(\"table\"), unref(ns).is(\"bordered\", _ctx.border)])\n      }, [createElementVNode(\"tbody\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(getRows(), (row, index) => {\n        return openBlock(), createBlock(ElDescriptionsRow, {\n          key: index,\n          row\n        }, null, 8, [\"row\"]);\n      }), 128))])], 2)], 2)], 2);\n    };\n  }\n});\nvar Descriptions = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/descriptions/src/description.vue\"]]);\nexport { Descriptions as default };","map":{"version":3,"names":["name","ns","useNamespace","descriptionsSize","useFormSize","slots","useSlots","provide","descriptionsKey","props","descriptionKls","computed","b","m","value","filledNode","node","span","count","isLast","getRows","_a","children","flattedChildren","default","call","filter","_a2","type","rows","temp","column","totalSpan","forEach","index","length","lastSpan","push"],"sources":["../../../../../../packages/components/descriptions/src/description.vue"],"sourcesContent":["<template>\n  <div :class=\"descriptionKls\">\n    <div\n      v-if=\"title || extra || $slots.title || $slots.extra\"\n      :class=\"ns.e('header')\"\n    >\n      <div :class=\"ns.e('title')\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div :class=\"ns.e('extra')\">\n        <slot name=\"extra\">{{ extra }}</slot>\n      </div>\n    </div>\n\n    <div :class=\"ns.e('body')\">\n      <table :class=\"[ns.e('table'), ns.is('bordered', border)]\">\n        <tbody>\n          <template v-for=\"(row, index) in getRows()\" :key=\"index\">\n            <el-descriptions-row :row=\"row\" />\n          </template>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\n// @ts-nocheck\nimport { computed, provide, useSlots } from 'vue'\nimport { flattedChildren } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormSize } from '@element-plus/components/form'\nimport ElDescriptionsRow from './descriptions-row.vue'\nimport { descriptionsKey } from './token'\nimport { descriptionProps } from './description'\n\ndefineOptions({\n  name: 'ElDescriptions',\n})\n\nconst props = defineProps(descriptionProps)\n\nconst ns = useNamespace('descriptions')\n\nconst descriptionsSize = useFormSize()\n\nconst slots = useSlots()\n\nprovide(descriptionsKey, props)\n\nconst descriptionKls = computed(() => [ns.b(), ns.m(descriptionsSize.value)])\n\nconst filledNode = (node, span, count, isLast = false) => {\n  if (!node.props) {\n    node.props = {}\n  }\n  if (span > count) {\n    node.props.span = count\n  }\n  if (isLast) {\n    // set the last span\n    node.props.span = span\n  }\n  return node\n}\n\nconst getRows = () => {\n  const children = flattedChildren(slots.default?.()).filter(\n    (node) => node?.type?.name === 'ElDescriptionsItem'\n  )\n  const rows = []\n  let temp = []\n  let count = props.column\n  let totalSpan = 0 // all spans number of item\n\n  children.forEach((node, index) => {\n    const span = node.props?.span || 1\n\n    if (index < children.length - 1) {\n      totalSpan += span > count ? count : span\n    }\n\n    if (index === children.length - 1) {\n      // calculate the last item span\n      const lastSpan = props.column - (totalSpan % props.column)\n      temp.push(filledNode(node, lastSpan, count, true))\n      rows.push(temp)\n      return\n    }\n\n    if (span < count) {\n      count -= span\n      temp.push(node)\n    } else {\n      temp.push(filledNode(node, span, count))\n      rows.push(temp)\n      count = props.column\n      temp = []\n    }\n  })\n\n  return rows\n}\n</script>\n"],"mappings":";;;;;;;;;;;;mCAoCc;EACZA,IAAM;AACR;;;;;;IAIM,MAAAC,EAAA,GAAKC,YAAA,CAAa,cAAc;IAEtC,MAAMC,gBAAA,GAAmBC,WAAY;IAErC,MAAMC,KAAA,GAAQC,QAAS;IAEvBC,OAAA,CAAQC,eAAA,EAAiBC,KAAK;IAE9B,MAAMC,cAAiB,GAAAC,QAAA,CAAS,MAAM,CAACV,EAAG,CAAAW,CAAA,EAAK,EAAAX,EAAA,CAAGY,CAAE,CAAAV,gBAAA,CAAiBW,KAAK,CAAC,CAAC;IAE5E,MAAMC,UAAA,GAAaA,CAACC,IAAA,EAAMC,IAAM,EAAAC,KAAA,EAAOC,MAAA,GAAS,KAAU;MACpD,KAACH,IAAA,CAAKP,KAAO;QACfO,IAAA,CAAKP,KAAA,GAAQ,EAAC;MAAA;MAEhB,IAAIQ,IAAA,GAAOC,KAAO;QAChBF,IAAA,CAAKP,KAAA,CAAMQ,IAAO,GAAAC,KAAA;MAAA;MAEpB,IAAIC,MAAQ;QAEVH,IAAA,CAAKP,KAAA,CAAMQ,IAAO,GAAAA,IAAA;MAAA;MAEb,OAAAD,IAAA;IAAA,CACT;IAEA,MAAMI,OAAA,GAAUA,CAAA,KAAM;MACpB,IAAAC,EAAM;MAGN,MAAMC,QAAQ,GAAAC,eAAA,EAAAF,EAAA,GAAAhB,KAAA,CAAAmB,OAAA,qBAAAH,EAAA,CAAAI,IAAA,CAAApB,KAAA,GAAAqB,MAAA,CAAAV,IAAA;QACd,IAAAW,GAAA;QACA,SAAAA,GAAkB,GAAAX,IAAA,oBAAAA,IAAA,CAAAY,IAAA,qBAAAD,GAAA,CAAA3B,IAAA;MAClB;MAES,MAAA6B,IAAA;MACD,IAAAC,IAAA;MAEF,IAAAZ,KAAA,GAAAT,KAAiB,CAAAsB,MAAA;MACN,IAAAC,SAAA;MACfV,QAAA,CAAAW,OAAA,EAAAjB,IAAA,EAAAkB,KAAA;QAEI,IAAAP,GAAA;QAEF,MAAAV,IAAiB,KAAAU,GAAA,GAAAX,IAAM,CAAUP,KAAA,iBAAkB,IAAAkB,GAAA,CAAAV,IAAA;QACnD,IAAAiB,KAAA,GAAUZ,QAAW,CAAAa,MAAA,GAAgB;UACrCH,SAAA,IAAcf,IAAA,GAAAC,KAAA,GAAAA,KAAA,GAAAD,IAAA;QACd;QACF,IAAAiB,KAAA,KAAAZ,QAAA,CAAAa,MAAA;UAEA,MAAAC,QAAkB,GAAA3B,KAAA,CAAAsB,MAAA,GAAAC,SAAA,GAAAvB,KAAA,CAAAsB,MAAA;UACPD,IAAA,CAAAO,IAAA,CAAAtB,UAAA,CAAAC,IAAA,EAAAoB,QAAA,EAAAlB,KAAA;UACTW,IAAA,CAAKQ,IAAA,CAAKP,IAAI;UACT;QACL;QACA,IAAAb,IAAA,GAAAC,KAAc;UACdA,KAAA,IAAcD,IAAA;UACda,IAAA,CAAAO,IAAQ,CAAArB,IAAA;QAAA,CACV;UACDc,IAAA,CAAAO,IAAA,CAAAtB,UAAA,CAAAC,IAAA,EAAAC,IAAA,EAAAC,KAAA;UAEMW,IAAA,CAAAQ,IAAA,CAAAP,IAAA;UACTZ,KAAA,GAAAT,KAAA,CAAAsB,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}