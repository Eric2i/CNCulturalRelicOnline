{"ast":null,"code":"import { ref, provide } from 'vue';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { removeClass, addClass } from '../../../../utils/dom/style.mjs';\nconst dragEventsKey = Symbol(\"dragEvents\");\nfunction useDragNodeHandler({\n  props,\n  ctx,\n  el$,\n  dropIndicator$,\n  store\n}) {\n  const ns = useNamespace(\"tree\");\n  const dragState = ref({\n    showDropIndicator: false,\n    draggingNode: null,\n    dropNode: null,\n    allowDrop: true,\n    dropType: null\n  });\n  const treeNodeDragStart = ({\n    event,\n    treeNode\n  }) => {\n    if (typeof props.allowDrag === \"function\" && !props.allowDrag(treeNode.node)) {\n      event.preventDefault();\n      return false;\n    }\n    event.dataTransfer.effectAllowed = \"move\";\n    try {\n      event.dataTransfer.setData(\"text/plain\", \"\");\n    } catch (e) {}\n    dragState.value.draggingNode = treeNode;\n    ctx.emit(\"node-drag-start\", treeNode.node, event);\n  };\n  const treeNodeDragOver = ({\n    event,\n    treeNode\n  }) => {\n    const dropNode = treeNode;\n    const oldDropNode = dragState.value.dropNode;\n    if (oldDropNode && oldDropNode !== dropNode) {\n      removeClass(oldDropNode.$el, ns.is(\"drop-inner\"));\n    }\n    const draggingNode = dragState.value.draggingNode;\n    if (!draggingNode || !dropNode) return;\n    let dropPrev = true;\n    let dropInner = true;\n    let dropNext = true;\n    let userAllowDropInner = true;\n    if (typeof props.allowDrop === \"function\") {\n      dropPrev = props.allowDrop(draggingNode.node, dropNode.node, \"prev\");\n      userAllowDropInner = dropInner = props.allowDrop(draggingNode.node, dropNode.node, \"inner\");\n      dropNext = props.allowDrop(draggingNode.node, dropNode.node, \"next\");\n    }\n    event.dataTransfer.dropEffect = dropInner || dropPrev || dropNext ? \"move\" : \"none\";\n    if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {\n      if (oldDropNode) {\n        ctx.emit(\"node-drag-leave\", draggingNode.node, oldDropNode.node, event);\n      }\n      ctx.emit(\"node-drag-enter\", draggingNode.node, dropNode.node, event);\n    }\n    if (dropPrev || dropInner || dropNext) {\n      dragState.value.dropNode = dropNode;\n    }\n    if (dropNode.node.nextSibling === draggingNode.node) {\n      dropNext = false;\n    }\n    if (dropNode.node.previousSibling === draggingNode.node) {\n      dropPrev = false;\n    }\n    if (dropNode.node.contains(draggingNode.node, false)) {\n      dropInner = false;\n    }\n    if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {\n      dropPrev = false;\n      dropInner = false;\n      dropNext = false;\n    }\n    const targetPosition = dropNode.$el.getBoundingClientRect();\n    const treePosition = el$.value.getBoundingClientRect();\n    let dropType;\n    const prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;\n    const nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;\n    let indicatorTop = -9999;\n    const distance = event.clientY - targetPosition.top;\n    if (distance < targetPosition.height * prevPercent) {\n      dropType = \"before\";\n    } else if (distance > targetPosition.height * nextPercent) {\n      dropType = \"after\";\n    } else if (dropInner) {\n      dropType = \"inner\";\n    } else {\n      dropType = \"none\";\n    }\n    const iconPosition = dropNode.$el.querySelector(`.${ns.be(\"node\", \"expand-icon\")}`).getBoundingClientRect();\n    const dropIndicator = dropIndicator$.value;\n    if (dropType === \"before\") {\n      indicatorTop = iconPosition.top - treePosition.top;\n    } else if (dropType === \"after\") {\n      indicatorTop = iconPosition.bottom - treePosition.top;\n    }\n    dropIndicator.style.top = `${indicatorTop}px`;\n    dropIndicator.style.left = `${iconPosition.right - treePosition.left}px`;\n    if (dropType === \"inner\") {\n      addClass(dropNode.$el, ns.is(\"drop-inner\"));\n    } else {\n      removeClass(dropNode.$el, ns.is(\"drop-inner\"));\n    }\n    dragState.value.showDropIndicator = dropType === \"before\" || dropType === \"after\";\n    dragState.value.allowDrop = dragState.value.showDropIndicator || userAllowDropInner;\n    dragState.value.dropType = dropType;\n    ctx.emit(\"node-drag-over\", draggingNode.node, dropNode.node, event);\n  };\n  const treeNodeDragEnd = event => {\n    const {\n      draggingNode,\n      dropType,\n      dropNode\n    } = dragState.value;\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"move\";\n    if (draggingNode && dropNode) {\n      const draggingNodeCopy = {\n        data: draggingNode.node.data\n      };\n      if (dropType !== \"none\") {\n        draggingNode.node.remove();\n      }\n      if (dropType === \"before\") {\n        dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);\n      } else if (dropType === \"after\") {\n        dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);\n      } else if (dropType === \"inner\") {\n        dropNode.node.insertChild(draggingNodeCopy);\n      }\n      if (dropType !== \"none\") {\n        store.value.registerNode(draggingNodeCopy);\n      }\n      removeClass(dropNode.$el, ns.is(\"drop-inner\"));\n      ctx.emit(\"node-drag-end\", draggingNode.node, dropNode.node, dropType, event);\n      if (dropType !== \"none\") {\n        ctx.emit(\"node-drop\", draggingNode.node, dropNode.node, dropType, event);\n      }\n    }\n    if (draggingNode && !dropNode) {\n      ctx.emit(\"node-drag-end\", draggingNode.node, null, dropType, event);\n    }\n    dragState.value.showDropIndicator = false;\n    dragState.value.draggingNode = null;\n    dragState.value.dropNode = null;\n    dragState.value.allowDrop = true;\n  };\n  provide(dragEventsKey, {\n    treeNodeDragStart,\n    treeNodeDragOver,\n    treeNodeDragEnd\n  });\n  return {\n    dragState\n  };\n}\nexport { dragEventsKey, useDragNodeHandler };","map":{"version":3,"names":["dragEventsKey","Symbol","useDragNodeHandler","props","ctx","el$","dropIndicator$","store","ns","useNamespace","dragState","ref","showDropIndicator","draggingNode","dropNode","allowDrop","dropType","treeNodeDragStart","event","treeNode","allowDrag","node","preventDefault","dataTransfer","effectAllowed","setData","e","value","emit","treeNodeDragOver","oldDropNode","removeClass","$el","is","dropPrev","dropInner","dropNext","userAllowDropInner","dropEffect","nextSibling","previousSibling","contains","targetPosition","getBoundingClientRect","treePosition","prevPercent","nextPercent","indicatorTop","distance","clientY","top","height","iconPosition","querySelector","be","dropIndicator","bottom","style","left","right","addClass","treeNodeDragEnd","draggingNodeCopy","data","remove","parent","insertBefore","insertAfter","insertChild","registerNode","provide"],"sources":["../../../../../../../packages/components/tree/src/model/useDragNode.ts"],"sourcesContent":["// @ts-nocheck\nimport { provide, ref } from 'vue'\nimport { addClass, removeClass } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport type { InjectionKey } from 'vue'\nimport type Node from './node'\nimport type { NodeDropType } from '../tree.type'\n\ninterface TreeNode {\n  node: Node\n  $el?: HTMLElement\n}\n\ninterface DragOptions {\n  event: DragEvent\n  treeNode: TreeNode\n}\n\nexport interface DragEvents {\n  treeNodeDragStart: (options: DragOptions) => void\n  treeNodeDragOver: (options: DragOptions) => void\n  treeNodeDragEnd: (event: DragEvent) => void\n}\n\nexport const dragEventsKey: InjectionKey<DragEvents> = Symbol('dragEvents')\n\nexport function useDragNodeHandler({ props, ctx, el$, dropIndicator$, store }) {\n  const ns = useNamespace('tree')\n  const dragState = ref({\n    showDropIndicator: false,\n    draggingNode: null,\n    dropNode: null,\n    allowDrop: true,\n    dropType: null,\n  })\n\n  const treeNodeDragStart = ({ event, treeNode }: DragOptions) => {\n    if (\n      typeof props.allowDrag === 'function' &&\n      !props.allowDrag(treeNode.node)\n    ) {\n      event.preventDefault()\n      return false\n    }\n    event.dataTransfer.effectAllowed = 'move'\n\n    // wrap in try catch to address IE's error when first param is 'text/plain'\n    try {\n      // setData is required for draggable to work in FireFox\n      // the content has to be '' so dragging a node out of the tree won't open a new tab in FireFox\n      event.dataTransfer.setData('text/plain', '')\n    } catch {}\n    dragState.value.draggingNode = treeNode\n    ctx.emit('node-drag-start', treeNode.node, event)\n  }\n\n  const treeNodeDragOver = ({ event, treeNode }: DragOptions) => {\n    const dropNode = treeNode\n    const oldDropNode = dragState.value.dropNode\n    if (oldDropNode && oldDropNode !== dropNode) {\n      removeClass(oldDropNode.$el, ns.is('drop-inner'))\n    }\n    const draggingNode = dragState.value.draggingNode\n    if (!draggingNode || !dropNode) return\n\n    let dropPrev = true\n    let dropInner = true\n    let dropNext = true\n    let userAllowDropInner = true\n    if (typeof props.allowDrop === 'function') {\n      dropPrev = props.allowDrop(draggingNode.node, dropNode.node, 'prev')\n      userAllowDropInner = dropInner = props.allowDrop(\n        draggingNode.node,\n        dropNode.node,\n        'inner'\n      )\n      dropNext = props.allowDrop(draggingNode.node, dropNode.node, 'next')\n    }\n    event.dataTransfer.dropEffect =\n      dropInner || dropPrev || dropNext ? 'move' : 'none'\n    if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {\n      if (oldDropNode) {\n        ctx.emit('node-drag-leave', draggingNode.node, oldDropNode.node, event)\n      }\n      ctx.emit('node-drag-enter', draggingNode.node, dropNode.node, event)\n    }\n\n    if (dropPrev || dropInner || dropNext) {\n      dragState.value.dropNode = dropNode\n    }\n\n    if (dropNode.node.nextSibling === draggingNode.node) {\n      dropNext = false\n    }\n    if (dropNode.node.previousSibling === draggingNode.node) {\n      dropPrev = false\n    }\n    if (dropNode.node.contains(draggingNode.node, false)) {\n      dropInner = false\n    }\n    if (\n      draggingNode.node === dropNode.node ||\n      draggingNode.node.contains(dropNode.node)\n    ) {\n      dropPrev = false\n      dropInner = false\n      dropNext = false\n    }\n\n    const targetPosition = dropNode.$el.getBoundingClientRect()\n    const treePosition = el$.value.getBoundingClientRect()\n\n    let dropType: NodeDropType\n    const prevPercent = dropPrev ? (dropInner ? 0.25 : dropNext ? 0.45 : 1) : -1\n    const nextPercent = dropNext ? (dropInner ? 0.75 : dropPrev ? 0.55 : 0) : 1\n\n    let indicatorTop = -9999\n    const distance = event.clientY - targetPosition.top\n    if (distance < targetPosition.height * prevPercent) {\n      dropType = 'before'\n    } else if (distance > targetPosition.height * nextPercent) {\n      dropType = 'after'\n    } else if (dropInner) {\n      dropType = 'inner'\n    } else {\n      dropType = 'none'\n    }\n\n    const iconPosition = dropNode.$el\n      .querySelector(`.${ns.be('node', 'expand-icon')}`)\n      .getBoundingClientRect()\n    const dropIndicator = dropIndicator$.value\n    if (dropType === 'before') {\n      indicatorTop = iconPosition.top - treePosition.top\n    } else if (dropType === 'after') {\n      indicatorTop = iconPosition.bottom - treePosition.top\n    }\n    dropIndicator.style.top = `${indicatorTop}px`\n    dropIndicator.style.left = `${iconPosition.right - treePosition.left}px`\n\n    if (dropType === 'inner') {\n      addClass(dropNode.$el, ns.is('drop-inner'))\n    } else {\n      removeClass(dropNode.$el, ns.is('drop-inner'))\n    }\n\n    dragState.value.showDropIndicator =\n      dropType === 'before' || dropType === 'after'\n    dragState.value.allowDrop =\n      dragState.value.showDropIndicator || userAllowDropInner\n    dragState.value.dropType = dropType\n    ctx.emit('node-drag-over', draggingNode.node, dropNode.node, event)\n  }\n\n  const treeNodeDragEnd = (event: DragEvent) => {\n    const { draggingNode, dropType, dropNode } = dragState.value\n    event.preventDefault()\n    event.dataTransfer.dropEffect = 'move'\n\n    if (draggingNode && dropNode) {\n      const draggingNodeCopy = { data: draggingNode.node.data }\n      if (dropType !== 'none') {\n        draggingNode.node.remove()\n      }\n      if (dropType === 'before') {\n        dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node)\n      } else if (dropType === 'after') {\n        dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node)\n      } else if (dropType === 'inner') {\n        dropNode.node.insertChild(draggingNodeCopy)\n      }\n      if (dropType !== 'none') {\n        store.value.registerNode(draggingNodeCopy)\n      }\n\n      removeClass(dropNode.$el, ns.is('drop-inner'))\n\n      ctx.emit(\n        'node-drag-end',\n        draggingNode.node,\n        dropNode.node,\n        dropType,\n        event\n      )\n      if (dropType !== 'none') {\n        ctx.emit('node-drop', draggingNode.node, dropNode.node, dropType, event)\n      }\n    }\n    if (draggingNode && !dropNode) {\n      ctx.emit('node-drag-end', draggingNode.node, null, dropType, event)\n    }\n\n    dragState.value.showDropIndicator = false\n    dragState.value.draggingNode = null\n    dragState.value.dropNode = null\n    dragState.value.allowDrop = true\n  }\n\n  provide(dragEventsKey, {\n    treeNodeDragStart,\n    treeNodeDragOver,\n    treeNodeDragEnd,\n  })\n\n  return {\n    dragState,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}