{"ast":null,"code":"import { defineComponent, ref, watch, computed, openBlock, createElementBlock, normalizeClass, unref, createVNode, withCtx, Fragment, renderList, createBlock } from 'vue';\nimport { isEqual } from 'lodash-unified';\nimport { ElSelect, ElOption } from '../../../select/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { usePagination } from '../usePagination.mjs';\nimport { paginationSizesProps } from './sizes.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nconst __default__ = defineComponent({\n  name: \"ElPaginationSizes\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: paginationSizesProps,\n  emits: [\"page-size-change\"],\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"pagination\");\n    const pagination = usePagination();\n    const innerPageSize = ref(props.pageSize);\n    watch(() => props.pageSizes, (newVal, oldVal) => {\n      if (isEqual(newVal, oldVal)) return;\n      if (Array.isArray(newVal)) {\n        const pageSize = newVal.includes(props.pageSize) ? props.pageSize : props.pageSizes[0];\n        emit(\"page-size-change\", pageSize);\n      }\n    });\n    watch(() => props.pageSize, newVal => {\n      innerPageSize.value = newVal;\n    });\n    const innerPageSizes = computed(() => props.pageSizes);\n    function handleChange(val) {\n      var _a;\n      if (val !== innerPageSize.value) {\n        innerPageSize.value = val;\n        (_a = pagination.handleSizeChange) == null ? void 0 : _a.call(pagination, Number(val));\n      }\n    }\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"span\", {\n        class: normalizeClass(unref(ns).e(\"sizes\"))\n      }, [createVNode(unref(ElSelect), {\n        \"model-value\": innerPageSize.value,\n        disabled: _ctx.disabled,\n        \"popper-class\": _ctx.popperClass,\n        size: _ctx.size,\n        \"validate-event\": false,\n        onChange: handleChange\n      }, {\n        default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(innerPageSizes), item => {\n          return openBlock(), createBlock(unref(ElOption), {\n            key: item,\n            value: item,\n            label: item + unref(t)(\"el.pagination.pagesize\")\n          }, null, 8, [\"value\", \"label\"]);\n        }), 128))]),\n        _: 1\n      }, 8, [\"model-value\", \"disabled\", \"popper-class\", \"size\"])], 2);\n    };\n  }\n});\nvar Sizes = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/sizes.vue\"]]);\nexport { Sizes as default };","map":{"version":3,"names":["name","t","useLocale","ns","useNamespace","pagination","usePagination","innerPageSize","ref","props","pageSize","watch","pageSizes","newVal","oldVal","isEqual","Array","isArray","includes","emit","value","innerPageSizes","computed","handleChange","val","_a","handleSizeChange","call","Number"],"sources":["../../../../../../../packages/components/pagination/src/components/sizes.vue"],"sourcesContent":["<template>\n  <span :class=\"ns.e('sizes')\">\n    <el-select\n      :model-value=\"innerPageSize\"\n      :disabled=\"disabled\"\n      :popper-class=\"popperClass\"\n      :size=\"size\"\n      :validate-event=\"false\"\n      @change=\"handleChange\"\n    >\n      <el-option\n        v-for=\"item in innerPageSizes\"\n        :key=\"item\"\n        :value=\"item\"\n        :label=\"item + t('el.pagination.pagesize')\"\n      />\n    </el-select>\n  </span>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref, watch } from 'vue'\nimport { isEqual } from 'lodash-unified'\nimport { ElOption, ElSelect } from '@element-plus/components/select'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { usePagination } from '../usePagination'\nimport { paginationSizesProps } from './sizes'\n\ndefineOptions({\n  name: 'ElPaginationSizes',\n})\n\nconst props = defineProps(paginationSizesProps)\nconst emit = defineEmits(['page-size-change'])\nconst { t } = useLocale()\nconst ns = useNamespace('pagination')\nconst pagination = usePagination()\nconst innerPageSize = ref<number>(props.pageSize!)\n\nwatch(\n  () => props.pageSizes,\n  (newVal, oldVal) => {\n    if (isEqual(newVal, oldVal)) return\n    if (Array.isArray(newVal)) {\n      const pageSize = newVal.includes(props.pageSize!)\n        ? props.pageSize\n        : props.pageSizes[0]\n      emit('page-size-change', pageSize)\n    }\n  }\n)\n\nwatch(\n  () => props.pageSize,\n  (newVal) => {\n    innerPageSize.value = newVal!\n  }\n)\n\nconst innerPageSizes = computed(() => props.pageSizes)\nfunction handleChange(val: number) {\n  if (val !== innerPageSize.value) {\n    innerPageSize.value = val\n    pagination.handleSizeChange?.(Number(val))\n  }\n}\n</script>\n"],"mappings":";;;;;;;;;mCA4Bc;EACZA,IAAM;AACR;;;;;;;;;IAIM;MAAEC;IAAA,IAAMC,SAAU;IAClB,MAAAC,EAAA,GAAKC,YAAA,CAAa,YAAY;IACpC,MAAMC,UAAA,GAAaC,aAAc;IAC3B,MAAAC,aAAA,GAAgBC,GAAY,CAAAC,KAAA,CAAMC,QAAS;IAEjDC,KAAA,CACE,MAAMF,KAAA,CAAMG,SACZ,GAACC,MAAA,EAAQC,MAAW;MACd,IAAAC,OAAA,CAAQF,MAAA,EAAQC,MAAM,GAAG;MACzB,IAAAE,KAAA,CAAMC,OAAQ,CAAAJ,MAAM,CAAG;QACnB,MAAAH,QAAA,GAAWG,MAAA,CAAOK,QAAS,CAAAT,KAAA,CAAMC,QAAS,CAC5C,GAAAD,KAAA,CAAMC,QACN,GAAAD,KAAA,CAAMG,SAAU;QACpBO,IAAA,CAAK,oBAAoBT,QAAQ;MAAA;IACnC,CAEJ;IAEAC,KAAA,CACE,MAAMF,KAAA,CAAMC,QACZ,EAACG,MAAW;MACVN,aAAA,CAAca,KAAQ,GAAAP,MAAA;IAAA,CAE1B;IAEA,MAAMQ,cAAiB,GAAAC,QAAA,CAAS,MAAMb,KAAA,CAAMG,SAAS;IACrD,SAAAW,aAAsBC,GAAa;MAC7B,IAAAC,EAAA;MACF,IAAAD,GAAA,KAAAjB,aAAsB,CAAAa,KAAA;QACXb,aAAA,CAAAa,KAAA,GAAAI,GAAA;QACb,CAAAC,EAAA,GAAApB,UAAA,CAAAqB,gBAAA,qBAAAD,EAAA,CAAAE,IAAA,CAAAtB,UAAA,EAAAuB,MAAA,CAAAJ,GAAA;MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}