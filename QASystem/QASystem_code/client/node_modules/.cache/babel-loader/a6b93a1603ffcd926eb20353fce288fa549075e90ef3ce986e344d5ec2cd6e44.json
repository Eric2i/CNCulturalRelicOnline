{"ast":null,"code":"import { defineComponent, computed, openBlock, createBlock, resolveDynamicComponent, normalizeClass, unref, withCtx, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../form/index.mjs';\nimport { textProps } from './text.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useFormSize } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst __default__ = defineComponent({\n  name: \"ElText\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: textProps,\n  setup(__props) {\n    const props = __props;\n    const textSize = useFormSize();\n    const ns = useNamespace(\"text\");\n    const textKls = computed(() => [ns.b(), ns.m(props.type), ns.m(textSize.value), ns.is(\"truncated\", props.truncated)]);\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {\n        class: normalizeClass(unref(textKls))\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"class\"]);\n    };\n  }\n});\nvar Text = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/text/src/text.vue\"]]);\nexport { Text as default };","map":{"version":3,"names":["name","textSize","useFormSize","ns","useNamespace","textKls","computed","b","m","props","type","value","is","truncated"],"sources":["../../../../../../packages/components/text/src/text.vue"],"sourcesContent":["<template>\n  <component :is=\"tag\" :class=\"textKls\">\n    <slot />\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormSize } from '@element-plus/components/form'\nimport { textProps } from './text'\n\ndefineOptions({\n  name: 'ElText',\n})\n\nconst props = defineProps(textProps)\n\nconst textSize = useFormSize()\nconst ns = useNamespace('text')\n\nconst textKls = computed(() => [\n  ns.b(),\n  ns.m(props.type),\n  ns.m(textSize.value),\n  ns.is('truncated', props.truncated),\n])\n</script>\n"],"mappings":";;;;;;;mCAYc;EACZA,IAAM;AACR;;;;;;IAIA,MAAMC,QAAA,GAAWC,WAAY;IACvB,MAAAC,EAAA,GAAKC,YAAA,CAAa,MAAM;IAExB,MAAAC,OAAA,GAAUC,QAAA,CAAS,MAAM,CAC7BH,EAAA,CAAGI,CAAE,IACLJ,EAAA,CAAGK,CAAE,CAAAC,KAAA,CAAMC,IAAI,GACfP,EAAA,CAAGK,CAAE,CAAAP,QAAA,CAASU,KAAK,GACnBR,EAAG,CAAAS,EAAA,CAAG,WAAa,EAAAH,KAAA,CAAMI,SAAS,EACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}