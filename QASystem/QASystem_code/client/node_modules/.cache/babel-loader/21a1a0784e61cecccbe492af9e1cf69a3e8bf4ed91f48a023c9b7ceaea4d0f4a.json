{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref, computed, unref, watch, nextTick, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, toDisplayString, createCommentVNode, Fragment, renderList, createVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport { flatten } from 'lodash-unified';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport { basicDateTableProps } from '../props/basic-date-table.mjs';\nimport { buildPickerTable } from '../utils.mjs';\nimport ElDatePickerCell from './basic-cell-render.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { castArray } from '../../../../utils/arrays.mjs';\nconst _hoisted_1 = [\"aria-label\", \"onMousedown\"];\nconst _hoisted_2 = {\n  key: 0,\n  scope: \"col\"\n};\nconst _hoisted_3 = [\"aria-label\"];\nconst _hoisted_4 = [\"aria-current\", \"aria-selected\", \"tabindex\"];\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"basic-date-table\",\n  props: basicDateTableProps,\n  emits: [\"changerange\", \"pick\", \"select\"],\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"date-table\");\n    const {\n      t,\n      lang\n    } = useLocale();\n    const tbodyRef = ref();\n    const currentCellRef = ref();\n    const lastRow = ref();\n    const lastColumn = ref();\n    const tableRows = ref([[], [], [], [], [], []]);\n    let focusWithClick = false;\n    const firstDayOfWeek = props.date.$locale().weekStart || 7;\n    const WEEKS_CONSTANT = props.date.locale(\"en\").localeData().weekdaysShort().map(_ => _.toLowerCase());\n    const offsetDay = computed(() => {\n      return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek;\n    });\n    const startDate = computed(() => {\n      const startDayOfMonth = props.date.startOf(\"month\");\n      return startDayOfMonth.subtract(startDayOfMonth.day() || 7, \"day\");\n    });\n    const WEEKS = computed(() => {\n      return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(firstDayOfWeek, firstDayOfWeek + 7);\n    });\n    const hasCurrent = computed(() => {\n      return flatten(rows.value).some(row => {\n        return row.isCurrent;\n      });\n    });\n    const days = computed(() => {\n      const startOfMonth = props.date.startOf(\"month\");\n      const startOfMonthDay = startOfMonth.day() || 7;\n      const dateCountOfMonth = startOfMonth.daysInMonth();\n      const dateCountOfLastMonth = startOfMonth.subtract(1, \"month\").daysInMonth();\n      return {\n        startOfMonthDay,\n        dateCountOfMonth,\n        dateCountOfLastMonth\n      };\n    });\n    const selectedDate = computed(() => {\n      return props.selectionMode === \"dates\" ? castArray(props.parsedValue) : [];\n    });\n    const setDateText = (cell, {\n      count,\n      rowIndex,\n      columnIndex\n    }) => {\n      const {\n        startOfMonthDay,\n        dateCountOfMonth,\n        dateCountOfLastMonth\n      } = unref(days);\n      const offset = unref(offsetDay);\n      if (rowIndex >= 0 && rowIndex <= 1) {\n        const numberOfDaysFromPreviousMonth = startOfMonthDay + offset < 0 ? 7 + startOfMonthDay + offset : startOfMonthDay + offset;\n        if (columnIndex + rowIndex * 7 >= numberOfDaysFromPreviousMonth) {\n          cell.text = count;\n          return true;\n        } else {\n          cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - columnIndex % 7) + 1 + rowIndex * 7;\n          cell.type = \"prev-month\";\n        }\n      } else {\n        if (count <= dateCountOfMonth) {\n          cell.text = count;\n        } else {\n          cell.text = count - dateCountOfMonth;\n          cell.type = \"next-month\";\n        }\n        return true;\n      }\n      return false;\n    };\n    const setCellMetadata = (cell, {\n      columnIndex,\n      rowIndex\n    }, count) => {\n      const {\n        disabledDate,\n        cellClassName\n      } = props;\n      const _selectedDate = unref(selectedDate);\n      const shouldIncrement = setDateText(cell, {\n        count,\n        rowIndex,\n        columnIndex\n      });\n      const cellDate = cell.dayjs.toDate();\n      cell.selected = _selectedDate.find(d => d.valueOf() === cell.dayjs.valueOf());\n      cell.isSelected = !!cell.selected;\n      cell.isCurrent = isCurrent(cell);\n      cell.disabled = disabledDate == null ? void 0 : disabledDate(cellDate);\n      cell.customClass = cellClassName == null ? void 0 : cellClassName(cellDate);\n      return shouldIncrement;\n    };\n    const setRowMetadata = row => {\n      if (props.selectionMode === \"week\") {\n        const [start, end] = props.showWeekNumber ? [1, 7] : [0, 6];\n        const isActive = isWeekActive(row[start + 1]);\n        row[start].inRange = isActive;\n        row[start].start = isActive;\n        row[end].inRange = isActive;\n        row[end].end = isActive;\n      }\n    };\n    const rows = computed(() => {\n      const {\n        minDate,\n        maxDate,\n        rangeState,\n        showWeekNumber\n      } = props;\n      const offset = offsetDay.value;\n      const rows_ = tableRows.value;\n      const dateUnit = \"day\";\n      let count = 1;\n      if (showWeekNumber) {\n        for (let rowIndex = 0; rowIndex < 6; rowIndex++) {\n          if (!rows_[rowIndex][0]) {\n            rows_[rowIndex][0] = {\n              type: \"week\",\n              text: startDate.value.add(rowIndex * 7 + 1, dateUnit).week()\n            };\n          }\n        }\n      }\n      buildPickerTable({\n        row: 6,\n        column: 7\n      }, rows_, {\n        startDate: minDate,\n        columnIndexOffset: showWeekNumber ? 1 : 0,\n        nextEndDate: rangeState.endDate || maxDate || rangeState.selecting && minDate || null,\n        now: dayjs().locale(unref(lang)).startOf(dateUnit),\n        unit: dateUnit,\n        relativeDateGetter: idx => startDate.value.add(idx - offset, dateUnit),\n        setCellMetadata: (...args) => {\n          if (setCellMetadata(...args, count)) {\n            count += 1;\n          }\n        },\n        setRowMetadata\n      });\n      return rows_;\n    });\n    watch(() => props.date, async () => {\n      var _a, _b;\n      if ((_a = tbodyRef.value) == null ? void 0 : _a.contains(document.activeElement)) {\n        await nextTick();\n        (_b = currentCellRef.value) == null ? void 0 : _b.focus();\n      }\n    });\n    const focus = async () => {\n      var _a;\n      (_a = currentCellRef.value) == null ? void 0 : _a.focus();\n    };\n    const isNormalDay = (type = \"\") => {\n      return [\"normal\", \"today\"].includes(type);\n    };\n    const isCurrent = cell => {\n      return props.selectionMode === \"date\" && isNormalDay(cell.type) && cellMatchesDate(cell, props.parsedValue);\n    };\n    const cellMatchesDate = (cell, date) => {\n      if (!date) return false;\n      return dayjs(date).locale(lang.value).isSame(props.date.date(Number(cell.text)), \"day\");\n    };\n    const getCellClasses = cell => {\n      const classes = [];\n      if (isNormalDay(cell.type) && !cell.disabled) {\n        classes.push(\"available\");\n        if (cell.type === \"today\") {\n          classes.push(\"today\");\n        }\n      } else {\n        classes.push(cell.type);\n      }\n      if (isCurrent(cell)) {\n        classes.push(\"current\");\n      }\n      if (cell.inRange && (isNormalDay(cell.type) || props.selectionMode === \"week\")) {\n        classes.push(\"in-range\");\n        if (cell.start) {\n          classes.push(\"start-date\");\n        }\n        if (cell.end) {\n          classes.push(\"end-date\");\n        }\n      }\n      if (cell.disabled) {\n        classes.push(\"disabled\");\n      }\n      if (cell.selected) {\n        classes.push(\"selected\");\n      }\n      if (cell.customClass) {\n        classes.push(cell.customClass);\n      }\n      return classes.join(\" \");\n    };\n    const getDateOfCell = (row, column) => {\n      const offsetFromStart = row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - offsetDay.value;\n      return startDate.value.add(offsetFromStart, \"day\");\n    };\n    const handleMouseMove = event => {\n      var _a;\n      if (!props.rangeState.selecting) return;\n      let target = event.target;\n      if (target.tagName === \"SPAN\") {\n        target = (_a = target.parentNode) == null ? void 0 : _a.parentNode;\n      }\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n      if (target.tagName !== \"TD\") return;\n      const row = target.parentNode.rowIndex - 1;\n      const column = target.cellIndex;\n      if (rows.value[row][column].disabled) return;\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row;\n        lastColumn.value = column;\n        emit(\"changerange\", {\n          selecting: true,\n          endDate: getDateOfCell(row, column)\n        });\n      }\n    };\n    const isSelectedCell = cell => {\n      return !hasCurrent.value && (cell == null ? void 0 : cell.text) === 1 && cell.type === \"normal\" || cell.isCurrent;\n    };\n    const handleFocus = event => {\n      if (focusWithClick || hasCurrent.value || props.selectionMode !== \"date\") return;\n      handlePickDate(event, true);\n    };\n    const handleMouseDown = event => {\n      const target = event.target.closest(\"td\");\n      if (!target) return;\n      focusWithClick = true;\n    };\n    const handleMouseUp = event => {\n      const target = event.target.closest(\"td\");\n      if (!target) return;\n      focusWithClick = false;\n    };\n    const handlePickDate = (event, isKeyboardMovement = false) => {\n      const target = event.target.closest(\"td\");\n      if (!target) return;\n      const row = target.parentNode.rowIndex - 1;\n      const column = target.cellIndex;\n      const cell = rows.value[row][column];\n      if (cell.disabled || cell.type === \"week\") return;\n      const newDate = getDateOfCell(row, column);\n      if (props.selectionMode === \"range\") {\n        if (!props.rangeState.selecting || !props.minDate) {\n          emit(\"pick\", {\n            minDate: newDate,\n            maxDate: null\n          });\n          emit(\"select\", true);\n        } else {\n          if (newDate >= props.minDate) {\n            emit(\"pick\", {\n              minDate: props.minDate,\n              maxDate: newDate\n            });\n          } else {\n            emit(\"pick\", {\n              minDate: newDate,\n              maxDate: props.minDate\n            });\n          }\n          emit(\"select\", false);\n        }\n      } else if (props.selectionMode === \"date\") {\n        emit(\"pick\", newDate, isKeyboardMovement);\n      } else if (props.selectionMode === \"week\") {\n        const weekNumber = newDate.week();\n        const value = `${newDate.year()}w${weekNumber}`;\n        emit(\"pick\", {\n          year: newDate.year(),\n          week: weekNumber,\n          value,\n          date: newDate.startOf(\"week\")\n        });\n      } else if (props.selectionMode === \"dates\") {\n        const newValue = cell.selected ? castArray(props.parsedValue).filter(d => (d == null ? void 0 : d.valueOf()) !== newDate.valueOf()) : castArray(props.parsedValue).concat([newDate]);\n        emit(\"pick\", newValue);\n      }\n    };\n    const isWeekActive = cell => {\n      if (props.selectionMode !== \"week\") return false;\n      let newDate = props.date.startOf(\"day\");\n      if (cell.type === \"prev-month\") {\n        newDate = newDate.subtract(1, \"month\");\n      }\n      if (cell.type === \"next-month\") {\n        newDate = newDate.add(1, \"month\");\n      }\n      newDate = newDate.date(Number.parseInt(cell.text, 10));\n      if (props.parsedValue && !Array.isArray(props.parsedValue)) {\n        const dayOffset = (props.parsedValue.day() - firstDayOfWeek + 7) % 7 - 1;\n        const weekDate = props.parsedValue.subtract(dayOffset, \"day\");\n        return weekDate.isSame(newDate, \"day\");\n      }\n      return false;\n    };\n    expose({\n      focus\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"table\", {\n        role: \"grid\",\n        \"aria-label\": unref(t)(\"el.datepicker.dateTablePrompt\"),\n        cellspacing: \"0\",\n        cellpadding: \"0\",\n        class: normalizeClass([unref(ns).b(), {\n          \"is-week-mode\": _ctx.selectionMode === \"week\"\n        }]),\n        onClick: handlePickDate,\n        onMousemove: handleMouseMove,\n        onMousedown: withModifiers(handleMouseDown, [\"prevent\"]),\n        onMouseup: handleMouseUp\n      }, [createElementVNode(\"tbody\", {\n        ref_key: \"tbodyRef\",\n        ref: tbodyRef\n      }, [createElementVNode(\"tr\", null, [_ctx.showWeekNumber ? (openBlock(), createElementBlock(\"th\", _hoisted_2, toDisplayString(unref(t)(\"el.datepicker.week\")), 1)) : createCommentVNode(\"v-if\", true), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(WEEKS), (week, key) => {\n        return openBlock(), createElementBlock(\"th\", {\n          key,\n          scope: \"col\",\n          \"aria-label\": unref(t)(\"el.datepicker.weeksFull.\" + week)\n        }, toDisplayString(unref(t)(\"el.datepicker.weeks.\" + week)), 9, _hoisted_3);\n      }), 128))]), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(rows), (row, rowKey) => {\n        return openBlock(), createElementBlock(\"tr\", {\n          key: rowKey,\n          class: normalizeClass([unref(ns).e(\"row\"), {\n            current: isWeekActive(row[1])\n          }])\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, columnKey) => {\n          return openBlock(), createElementBlock(\"td\", {\n            key: `${rowKey}.${columnKey}`,\n            ref_for: true,\n            ref: el => isSelectedCell(cell) && (currentCellRef.value = el),\n            class: normalizeClass(getCellClasses(cell)),\n            \"aria-current\": cell.isCurrent ? \"date\" : void 0,\n            \"aria-selected\": cell.isCurrent,\n            tabindex: isSelectedCell(cell) ? 0 : -1,\n            onFocus: handleFocus\n          }, [createVNode(unref(ElDatePickerCell), {\n            cell\n          }, null, 8, [\"cell\"])], 42, _hoisted_4);\n        }), 128))], 2);\n      }), 128))], 512)], 42, _hoisted_1);\n    };\n  }\n});\nvar DateTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-date-table.vue\"]]);\nexport { DateTable as default };","map":{"version":3,"names":["ns","useNamespace","t","lang","useLocale","tbodyRef","ref","currentCellRef","lastRow","lastColumn","tableRows","focusWithClick","firstDayOfWeek","props","date","$locale","weekStart","WEEKS_CONSTANT","locale","localeData","weekdaysShort","map","_","toLowerCase","offsetDay","computed","startDate","startDayOfMonth","startOf","subtract","day","WEEKS","concat","slice","hasCurrent","flatten","rows","value","some","row","isCurrent","days","startOfMonth","startOfMonthDay","dateCountOfMonth","daysInMonth","dateCountOfLastMonth","selectedDate","selectionMode","castArray","parsedValue","setDateText","cell","count","rowIndex","columnIndex","unref","offset","numberOfDaysFromPreviousMonth","text","type","setCellMetadata","disabledDate","cellClassName","_selectedDate","shouldIncrement","cellDate","dayjs","toDate","selected","find","d","valueOf","isSelected","disabled","customClass","setRowMetadata","start","end","showWeekNumber","isActive","isWeekActive","inRange","minDate","maxDate","rangeState","rows_","dateUnit","add","week","buildPickerTable","column","columnIndexOffset","nextEndDate","endDate","selecting","now","unit","relativeDateGetter","idx","args","watch","_a","_b","contains","document","activeElement","nextTick","focus","isNormalDay","includes","cellMatchesDate","isSame","Number","getCellClasses","classes","push","join","getDateOfCell","offsetFromStart","handleMouseMove","event","target","tagName","parentNode","cellIndex","emit","isSelectedCell","handleFocus","handlePickDate","handleMouseDown","closest","handleMouseUp","isKeyboardMovement","newDate","weekNumber","year","newValue","filter","parseInt","Array","isArray","dayOffset","weekDate"],"sources":["../../../../../../../packages/components/date-picker/src/date-picker-com/basic-date-table.vue"],"sourcesContent":["<template>\n  <table\n    role=\"grid\"\n    :aria-label=\"t('el.datepicker.dateTablePrompt')\"\n    cellspacing=\"0\"\n    cellpadding=\"0\"\n    :class=\"[ns.b(), { 'is-week-mode': selectionMode === 'week' }]\"\n    @click=\"handlePickDate\"\n    @mousemove=\"handleMouseMove\"\n    @mousedown.prevent=\"handleMouseDown\"\n    @mouseup=\"handleMouseUp\"\n  >\n    <tbody ref=\"tbodyRef\">\n      <tr>\n        <th v-if=\"showWeekNumber\" scope=\"col\">{{ t('el.datepicker.week') }}</th>\n        <th\n          v-for=\"(week, key) in WEEKS\"\n          :key=\"key\"\n          scope=\"col\"\n          :aria-label=\"t('el.datepicker.weeksFull.' + week)\"\n        >\n          {{ t('el.datepicker.weeks.' + week) }}\n        </th>\n      </tr>\n      <tr\n        v-for=\"(row, rowKey) in rows\"\n        :key=\"rowKey\"\n        :class=\"[ns.e('row'), { current: isWeekActive(row[1]) }]\"\n      >\n        <td\n          v-for=\"(cell, columnKey) in row\"\n          :key=\"`${rowKey}.${columnKey}`\"\n          :ref=\"(el) => isSelectedCell(cell) && (currentCellRef = el as HTMLElement)\"\n          :class=\"getCellClasses(cell)\"\n          :aria-current=\"cell.isCurrent ? 'date' : undefined\"\n          :aria-selected=\"cell.isCurrent\"\n          :tabindex=\"isSelectedCell(cell) ? 0 : -1\"\n          @focus=\"handleFocus\"\n        >\n          <el-date-picker-cell :cell=\"cell\" />\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, ref, unref, watch } from 'vue'\nimport dayjs from 'dayjs'\nimport { flatten } from 'lodash-unified'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { castArray } from '@element-plus/utils'\nimport { basicDateTableProps } from '../props/basic-date-table'\nimport { buildPickerTable } from '../utils'\nimport ElDatePickerCell from './basic-cell-render'\n\nimport type { Dayjs } from 'dayjs'\nimport type { DateCell } from '../date-picker.type'\n\nconst props = defineProps(basicDateTableProps)\nconst emit = defineEmits(['changerange', 'pick', 'select'])\n\nconst ns = useNamespace('date-table')\n\nconst { t, lang } = useLocale()\n\nconst tbodyRef = ref<HTMLElement>()\nconst currentCellRef = ref<HTMLElement>()\n// data\nconst lastRow = ref<number>()\nconst lastColumn = ref<number>()\nconst tableRows = ref<DateCell[][]>([[], [], [], [], [], []])\n\nlet focusWithClick = false\n\n// todo better way to get Day.js locale object\nconst firstDayOfWeek = (props.date as any).$locale().weekStart || 7\nconst WEEKS_CONSTANT = props.date\n  .locale('en')\n  .localeData()\n  .weekdaysShort()\n  .map((_) => _.toLowerCase())\n\nconst offsetDay = computed(() => {\n  // Sunday 7(0), cal the left and right offset days, 3217654, such as Monday is -1, the is to adjust the position of the first two rows of dates\n  return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek\n})\n\nconst startDate = computed(() => {\n  const startDayOfMonth = props.date.startOf('month')\n  return startDayOfMonth.subtract(startDayOfMonth.day() || 7, 'day')\n})\n\nconst WEEKS = computed(() => {\n  return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(\n    firstDayOfWeek,\n    firstDayOfWeek + 7\n  )\n})\n\nconst hasCurrent = computed<boolean>(() => {\n  return flatten(rows.value).some((row) => {\n    return row.isCurrent\n  })\n})\n\nconst days = computed(() => {\n  const startOfMonth = props.date.startOf('month')\n  const startOfMonthDay = startOfMonth.day() || 7 // day of first day\n  const dateCountOfMonth = startOfMonth.daysInMonth()\n\n  const dateCountOfLastMonth = startOfMonth.subtract(1, 'month').daysInMonth()\n\n  return {\n    startOfMonthDay,\n    dateCountOfMonth,\n    dateCountOfLastMonth,\n  }\n})\n\nconst selectedDate = computed(() => {\n  return props.selectionMode === 'dates'\n    ? (castArray(props.parsedValue) as Dayjs[])\n    : ([] as Dayjs[])\n})\n\n// Return value indicates should the counter be incremented\nconst setDateText = (\n  cell: DateCell,\n  {\n    count,\n    rowIndex,\n    columnIndex,\n  }: {\n    count: number\n    rowIndex: number\n    columnIndex: number\n  }\n): boolean => {\n  const { startOfMonthDay, dateCountOfMonth, dateCountOfLastMonth } =\n    unref(days)\n  const offset = unref(offsetDay)\n  if (rowIndex >= 0 && rowIndex <= 1) {\n    const numberOfDaysFromPreviousMonth =\n      startOfMonthDay + offset < 0\n        ? 7 + startOfMonthDay + offset\n        : startOfMonthDay + offset\n\n    if (columnIndex + rowIndex * 7 >= numberOfDaysFromPreviousMonth) {\n      cell.text = count\n      return true\n    } else {\n      cell.text =\n        dateCountOfLastMonth -\n        (numberOfDaysFromPreviousMonth - (columnIndex % 7)) +\n        1 +\n        rowIndex * 7\n      cell.type = 'prev-month'\n    }\n  } else {\n    if (count <= dateCountOfMonth) {\n      cell.text = count\n    } else {\n      cell.text = count - dateCountOfMonth\n      cell.type = 'next-month'\n    }\n    return true\n  }\n  return false\n}\n\nconst setCellMetadata = (\n  cell: DateCell,\n  {\n    columnIndex,\n    rowIndex,\n  }: {\n    columnIndex: number\n    rowIndex: number\n  },\n  count: number\n) => {\n  const { disabledDate, cellClassName } = props\n  const _selectedDate = unref(selectedDate)\n  const shouldIncrement = setDateText(cell, { count, rowIndex, columnIndex })\n\n  const cellDate = cell.dayjs!.toDate()\n  cell.selected = _selectedDate.find(\n    (d) => d.valueOf() === cell.dayjs!.valueOf()\n  )\n  cell.isSelected = !!cell.selected\n  cell.isCurrent = isCurrent(cell)\n  cell.disabled = disabledDate?.(cellDate)\n  cell.customClass = cellClassName?.(cellDate)\n  return shouldIncrement\n}\n\nconst setRowMetadata = (row: DateCell[]) => {\n  if (props.selectionMode === 'week') {\n    const [start, end] = props.showWeekNumber ? [1, 7] : [0, 6]\n    const isActive = isWeekActive(row[start + 1])\n    row[start].inRange = isActive\n    row[start].start = isActive\n    row[end].inRange = isActive\n    row[end].end = isActive\n  }\n}\n\nconst rows = computed(() => {\n  const { minDate, maxDate, rangeState, showWeekNumber } = props\n\n  const offset = offsetDay.value\n  const rows_ = tableRows.value\n  const dateUnit = 'day'\n  let count = 1\n\n  if (showWeekNumber) {\n    for (let rowIndex = 0; rowIndex < 6; rowIndex++) {\n      if (!rows_[rowIndex][0]) {\n        rows_[rowIndex][0] = {\n          type: 'week',\n          text: startDate.value.add(rowIndex * 7 + 1, dateUnit).week(),\n        }\n      }\n    }\n  }\n\n  buildPickerTable({ row: 6, column: 7 }, rows_, {\n    startDate: minDate,\n    columnIndexOffset: showWeekNumber ? 1 : 0,\n    nextEndDate:\n      rangeState.endDate ||\n      maxDate ||\n      (rangeState.selecting && minDate) ||\n      null,\n    now: dayjs().locale(unref(lang)).startOf(dateUnit),\n    unit: dateUnit,\n    relativeDateGetter: (idx: number) =>\n      startDate.value.add(idx - offset, dateUnit),\n    setCellMetadata: (...args) => {\n      if (setCellMetadata(...args, count)) {\n        count += 1\n      }\n    },\n\n    setRowMetadata,\n  })\n\n  return rows_\n})\n\nwatch(\n  () => props.date,\n  async () => {\n    if (tbodyRef.value?.contains(document.activeElement)) {\n      await nextTick()\n      currentCellRef.value?.focus()\n    }\n  }\n)\n\nconst focus = async () => {\n  currentCellRef.value?.focus()\n}\n\nconst isNormalDay = (type = '') => {\n  return ['normal', 'today'].includes(type)\n}\n\nconst isCurrent = (cell: DateCell): boolean => {\n  return (\n    props.selectionMode === 'date' &&\n    isNormalDay(cell.type) &&\n    cellMatchesDate(cell, props.parsedValue as Dayjs)\n  )\n}\n\nconst cellMatchesDate = (cell: DateCell, date: Dayjs) => {\n  if (!date) return false\n  return dayjs(date)\n    .locale(lang.value)\n    .isSame(props.date.date(Number(cell.text)), 'day')\n}\n\nconst getCellClasses = (cell: DateCell) => {\n  const classes: string[] = []\n  if (isNormalDay(cell.type) && !cell.disabled) {\n    classes.push('available')\n    if (cell.type === 'today') {\n      classes.push('today')\n    }\n  } else {\n    classes.push(cell.type!)\n  }\n\n  if (isCurrent(cell)) {\n    classes.push('current')\n  }\n\n  if (\n    cell.inRange &&\n    (isNormalDay(cell.type) || props.selectionMode === 'week')\n  ) {\n    classes.push('in-range')\n\n    if (cell.start) {\n      classes.push('start-date')\n    }\n\n    if (cell.end) {\n      classes.push('end-date')\n    }\n  }\n\n  if (cell.disabled) {\n    classes.push('disabled')\n  }\n\n  if (cell.selected) {\n    classes.push('selected')\n  }\n\n  if (cell.customClass) {\n    classes.push(cell.customClass)\n  }\n\n  return classes.join(' ')\n}\n\nconst getDateOfCell = (row: number, column: number) => {\n  const offsetFromStart =\n    row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - offsetDay.value\n  return startDate.value.add(offsetFromStart, 'day')\n}\n\nconst handleMouseMove = (event: MouseEvent) => {\n  if (!props.rangeState.selecting) return\n\n  let target = event.target as HTMLElement\n  if (target.tagName === 'SPAN') {\n    target = target.parentNode?.parentNode as HTMLElement\n  }\n  if (target.tagName === 'DIV') {\n    target = target.parentNode as HTMLElement\n  }\n  if (target.tagName !== 'TD') return\n\n  const row = (target.parentNode as HTMLTableRowElement).rowIndex - 1\n  const column = (target as HTMLTableCellElement).cellIndex\n\n  // can not select disabled date\n  if (rows.value[row][column].disabled) return\n\n  // only update rangeState when mouse moves to a new cell\n  // this avoids frequent Date object creation and improves performance\n  if (row !== lastRow.value || column !== lastColumn.value) {\n    lastRow.value = row\n    lastColumn.value = column\n    emit('changerange', {\n      selecting: true,\n      endDate: getDateOfCell(row, column),\n    })\n  }\n}\n\nconst isSelectedCell = (cell: DateCell) => {\n  return (\n    (!hasCurrent.value && cell?.text === 1 && cell.type === 'normal') ||\n    cell.isCurrent\n  )\n}\n\nconst handleFocus = (event: FocusEvent) => {\n  if (focusWithClick || hasCurrent.value || props.selectionMode !== 'date')\n    return\n  handlePickDate(event, true)\n}\n\nconst handleMouseDown = (event: MouseEvent) => {\n  const target = (event.target as HTMLElement).closest('td')\n  if (!target) return\n  focusWithClick = true\n}\n\nconst handleMouseUp = (event: MouseEvent) => {\n  const target = (event.target as HTMLElement).closest('td')\n  if (!target) return\n  focusWithClick = false\n}\n\nconst handlePickDate = (\n  event: FocusEvent | MouseEvent,\n  isKeyboardMovement = false\n) => {\n  const target = (event.target as HTMLElement).closest('td')\n\n  if (!target) return\n\n  const row = (target.parentNode as HTMLTableRowElement).rowIndex - 1\n  const column = (target as HTMLTableCellElement).cellIndex\n  const cell = rows.value[row][column]\n\n  if (cell.disabled || cell.type === 'week') return\n\n  const newDate = getDateOfCell(row, column)\n\n  if (props.selectionMode === 'range') {\n    if (!props.rangeState.selecting || !props.minDate) {\n      emit('pick', { minDate: newDate, maxDate: null })\n      emit('select', true)\n    } else {\n      if (newDate >= props.minDate) {\n        emit('pick', { minDate: props.minDate, maxDate: newDate })\n      } else {\n        emit('pick', { minDate: newDate, maxDate: props.minDate })\n      }\n      emit('select', false)\n    }\n  } else if (props.selectionMode === 'date') {\n    emit('pick', newDate, isKeyboardMovement)\n  } else if (props.selectionMode === 'week') {\n    const weekNumber = newDate.week()\n    const value = `${newDate.year()}w${weekNumber}`\n    emit('pick', {\n      year: newDate.year(),\n      week: weekNumber,\n      value,\n      date: newDate.startOf('week'),\n    })\n  } else if (props.selectionMode === 'dates') {\n    const newValue = cell.selected\n      ? castArray(props.parsedValue).filter(\n          (d) => d?.valueOf() !== newDate.valueOf()\n        )\n      : castArray(props.parsedValue).concat([newDate])\n    emit('pick', newValue)\n  }\n}\n\nconst isWeekActive = (cell: DateCell) => {\n  if (props.selectionMode !== 'week') return false\n  let newDate = props.date.startOf('day')\n\n  if (cell.type === 'prev-month') {\n    newDate = newDate.subtract(1, 'month')\n  }\n\n  if (cell.type === 'next-month') {\n    newDate = newDate.add(1, 'month')\n  }\n\n  newDate = newDate.date(Number.parseInt(cell.text as any, 10))\n\n  if (props.parsedValue && !Array.isArray(props.parsedValue)) {\n    const dayOffset = ((props.parsedValue.day() - firstDayOfWeek + 7) % 7) - 1\n    const weekDate = props.parsedValue.subtract(dayOffset, 'day')\n    return weekDate.isSame(newDate, 'day')\n  }\n  return false\n}\n\ndefineExpose({\n  /**\n   * @description focus on current cell\n   */\n  focus,\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}