{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref, computed, nextTick, provide, reactive, watch, onBeforeUpdate, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock } from 'vue';\nimport { isEqual, flattenDeep, cloneDeep } from 'lodash-unified';\nimport { isClient } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport ElCascaderMenu from './menu.mjs';\nimport Store from './store.mjs';\nimport Node from './node.mjs';\nimport { CommonProps, useCascaderConfig } from './config.mjs';\nimport { sortByOriginalOrder, checkNode, getMenuIndex } from './utils.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isEmpty } from '../../../utils/types.mjs';\nimport { unique, castArray } from '../../../utils/arrays.mjs';\nimport { scrollIntoView } from '../../../utils/dom/scroll.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElCascaderPanel\",\n  components: {\n    ElCascaderMenu\n  },\n  props: {\n    ...CommonProps,\n    border: {\n      type: Boolean,\n      default: true\n    },\n    renderLabel: Function\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, \"close\", \"expand-change\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    let manualChecked = false;\n    const ns = useNamespace(\"cascader\");\n    const config = useCascaderConfig(props);\n    let store = null;\n    const initialLoaded = ref(true);\n    const menuList = ref([]);\n    const checkedValue = ref(null);\n    const menus = ref([]);\n    const expandingNode = ref(null);\n    const checkedNodes = ref([]);\n    const isHoverMenu = computed(() => config.value.expandTrigger === \"hover\");\n    const renderLabelFn = computed(() => props.renderLabel || slots.default);\n    const initStore = () => {\n      const {\n        options\n      } = props;\n      const cfg = config.value;\n      manualChecked = false;\n      store = new Store(options, cfg);\n      menus.value = [store.getNodes()];\n      if (cfg.lazy && isEmpty(props.options)) {\n        initialLoaded.value = false;\n        lazyLoad(void 0, list => {\n          if (list) {\n            store = new Store(list, cfg);\n            menus.value = [store.getNodes()];\n          }\n          initialLoaded.value = true;\n          syncCheckedValue(false, true);\n        });\n      } else {\n        syncCheckedValue(false, true);\n      }\n    };\n    const lazyLoad = (node, cb) => {\n      const cfg = config.value;\n      node = node || new Node({}, cfg, void 0, true);\n      node.loading = true;\n      const resolve = dataList => {\n        const _node = node;\n        const parent = _node.root ? null : _node;\n        dataList && (store == null ? void 0 : store.appendNodes(dataList, parent));\n        _node.loading = false;\n        _node.loaded = true;\n        _node.childrenData = _node.childrenData || [];\n        cb && cb(dataList);\n      };\n      cfg.lazyLoad(node, resolve);\n    };\n    const expandNode = (node, silent) => {\n      var _a;\n      const {\n        level\n      } = node;\n      const newMenus = menus.value.slice(0, level);\n      let newExpandingNode;\n      if (node.isLeaf) {\n        newExpandingNode = node.pathNodes[level - 2];\n      } else {\n        newExpandingNode = node;\n        newMenus.push(node.children);\n      }\n      if (((_a = expandingNode.value) == null ? void 0 : _a.uid) !== (newExpandingNode == null ? void 0 : newExpandingNode.uid)) {\n        expandingNode.value = node;\n        menus.value = newMenus;\n        !silent && emit(\"expand-change\", (node == null ? void 0 : node.pathValues) || []);\n      }\n    };\n    const handleCheckChange = (node, checked, emitClose = true) => {\n      const {\n        checkStrictly,\n        multiple\n      } = config.value;\n      const oldNode = checkedNodes.value[0];\n      manualChecked = true;\n      !multiple && (oldNode == null ? void 0 : oldNode.doCheck(false));\n      node.doCheck(checked);\n      calculateCheckedValue();\n      emitClose && !multiple && !checkStrictly && emit(\"close\");\n      !emitClose && !multiple && !checkStrictly && expandParentNode(node);\n    };\n    const expandParentNode = node => {\n      if (!node) return;\n      node = node.parent;\n      expandParentNode(node);\n      node && expandNode(node);\n    };\n    const getFlattedNodes = leafOnly => {\n      return store == null ? void 0 : store.getFlattedNodes(leafOnly);\n    };\n    const getCheckedNodes = leafOnly => {\n      var _a;\n      return (_a = getFlattedNodes(leafOnly)) == null ? void 0 : _a.filter(node => node.checked !== false);\n    };\n    const clearCheckedNodes = () => {\n      checkedNodes.value.forEach(node => node.doCheck(false));\n      calculateCheckedValue();\n      menus.value = menus.value.slice(0, 1);\n      expandingNode.value = null;\n      emit(\"expand-change\", []);\n    };\n    const calculateCheckedValue = () => {\n      var _a;\n      const {\n        checkStrictly,\n        multiple\n      } = config.value;\n      const oldNodes = checkedNodes.value;\n      const newNodes = getCheckedNodes(!checkStrictly);\n      const nodes = sortByOriginalOrder(oldNodes, newNodes);\n      const values = nodes.map(node => node.valueByOption);\n      checkedNodes.value = nodes;\n      checkedValue.value = multiple ? values : (_a = values[0]) != null ? _a : null;\n    };\n    const syncCheckedValue = (loaded = false, forced = false) => {\n      const {\n        modelValue\n      } = props;\n      const {\n        lazy,\n        multiple,\n        checkStrictly\n      } = config.value;\n      const leafOnly = !checkStrictly;\n      if (!initialLoaded.value || manualChecked || !forced && isEqual(modelValue, checkedValue.value)) return;\n      if (lazy && !loaded) {\n        const values = unique(flattenDeep(castArray(modelValue)));\n        const nodes = values.map(val => store == null ? void 0 : store.getNodeByValue(val)).filter(node => !!node && !node.loaded && !node.loading);\n        if (nodes.length) {\n          nodes.forEach(node => {\n            lazyLoad(node, () => syncCheckedValue(false, forced));\n          });\n        } else {\n          syncCheckedValue(true, forced);\n        }\n      } else {\n        const values = multiple ? castArray(modelValue) : [modelValue];\n        const nodes = unique(values.map(val => store == null ? void 0 : store.getNodeByValue(val, leafOnly)));\n        syncMenuState(nodes, forced);\n        checkedValue.value = cloneDeep(modelValue);\n      }\n    };\n    const syncMenuState = (newCheckedNodes, reserveExpandingState = true) => {\n      const {\n        checkStrictly\n      } = config.value;\n      const oldNodes = checkedNodes.value;\n      const newNodes = newCheckedNodes.filter(node => !!node && (checkStrictly || node.isLeaf));\n      const oldExpandingNode = store == null ? void 0 : store.getSameNode(expandingNode.value);\n      const newExpandingNode = reserveExpandingState && oldExpandingNode || newNodes[0];\n      if (newExpandingNode) {\n        newExpandingNode.pathNodes.forEach(node => expandNode(node, true));\n      } else {\n        expandingNode.value = null;\n      }\n      oldNodes.forEach(node => node.doCheck(false));\n      newNodes.forEach(node => node.doCheck(true));\n      checkedNodes.value = newNodes;\n      nextTick(scrollToExpandingNode);\n    };\n    const scrollToExpandingNode = () => {\n      if (!isClient) return;\n      menuList.value.forEach(menu => {\n        const menuElement = menu == null ? void 0 : menu.$el;\n        if (menuElement) {\n          const container = menuElement.querySelector(`.${ns.namespace.value}-scrollbar__wrap`);\n          const activeNode = menuElement.querySelector(`.${ns.b(\"node\")}.${ns.is(\"active\")}`) || menuElement.querySelector(`.${ns.b(\"node\")}.in-active-path`);\n          scrollIntoView(container, activeNode);\n        }\n      });\n    };\n    const handleKeyDown = e => {\n      const target = e.target;\n      const {\n        code\n      } = e;\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            e.preventDefault();\n            const distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, `.${ns.b(\"node\")}[tabindex=\"-1\"]`));\n            break;\n          }\n        case EVENT_CODE.left:\n          {\n            e.preventDefault();\n            const preMenu = menuList.value[getMenuIndex(target) - 1];\n            const expandedNode = preMenu == null ? void 0 : preMenu.$el.querySelector(`.${ns.b(\"node\")}[aria-expanded=\"true\"]`);\n            focusNode(expandedNode);\n            break;\n          }\n        case EVENT_CODE.right:\n          {\n            e.preventDefault();\n            const nextMenu = menuList.value[getMenuIndex(target) + 1];\n            const firstNode = nextMenu == null ? void 0 : nextMenu.$el.querySelector(`.${ns.b(\"node\")}[tabindex=\"-1\"]`);\n            focusNode(firstNode);\n            break;\n          }\n        case EVENT_CODE.enter:\n          checkNode(target);\n          break;\n      }\n    };\n    provide(CASCADER_PANEL_INJECTION_KEY, reactive({\n      config,\n      expandingNode,\n      checkedNodes,\n      isHoverMenu,\n      initialLoaded,\n      renderLabelFn,\n      lazyLoad,\n      expandNode,\n      handleCheckChange\n    }));\n    watch([config, () => props.options], initStore, {\n      deep: true,\n      immediate: true\n    });\n    watch(() => props.modelValue, () => {\n      manualChecked = false;\n      syncCheckedValue();\n    }, {\n      deep: true\n    });\n    watch(() => checkedValue.value, val => {\n      if (!isEqual(val, props.modelValue)) {\n        emit(UPDATE_MODEL_EVENT, val);\n        emit(CHANGE_EVENT, val);\n      }\n    });\n    onBeforeUpdate(() => menuList.value = []);\n    onMounted(() => !isEmpty(props.modelValue) && syncCheckedValue());\n    return {\n      ns,\n      menuList,\n      menus,\n      checkedNodes,\n      handleKeyDown,\n      handleCheckChange,\n      getFlattedNodes,\n      getCheckedNodes,\n      clearCheckedNodes,\n      calculateCheckedValue,\n      scrollToExpandingNode\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_cascader_menu = resolveComponent(\"el-cascader-menu\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(\"panel\"), _ctx.ns.is(\"bordered\", _ctx.border)]),\n    onKeydown: _cache[0] || (_cache[0] = (...args) => _ctx.handleKeyDown && _ctx.handleKeyDown(...args))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.menus, (menu, index) => {\n    return openBlock(), createBlock(_component_el_cascader_menu, {\n      key: index,\n      ref_for: true,\n      ref: item => _ctx.menuList[index] = item,\n      index,\n      nodes: [...menu]\n    }, null, 8, [\"index\", \"nodes\"]);\n  }), 128))], 34);\n}\nvar CascaderPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/index.vue\"]]);\nexport { CascaderPanel as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","ElCascaderMenu","props","CommonProps","border","type","Boolean","default","renderLabel","Function","emits","UPDATE_MODEL_EVENT","CHANGE_EVENT","setup","emit","slots","manualChecked","ns","useNamespace","config","useCascaderConfig","store","initialLoaded","ref","menuList","checkedValue","menus","expandingNode","checkedNodes","isHoverMenu","computed","value","expandTrigger","renderLabelFn","initStore","options","cfg","Store","getNodes","lazy","isEmpty","lazyLoad","list","syncCheckedValue","node","cb","Node","loading","resolve","dataList","_node","parent","root","appendNodes","loaded","childrenData","expandNode","silent","_a","level","newMenus","slice","newExpandingNode","isLeaf","pathNodes","push","children","uid","pathValues","handleCheckChange","checked","emitClose","checkStrictly","multiple","oldNode","doCheck","calculateCheckedValue","expandParentNode","getFlattedNodes","leafOnly","getCheckedNodes","filter","clearCheckedNodes","forEach","oldNodes","newNodes","nodes","sortByOriginalOrder","values","map","valueByOption","forced","modelValue","isEqual","unique","flattenDeep","castArray","val","getNodeByValue","length","syncMenuState","cloneDeep","newCheckedNodes","reserveExpandingState","oldExpandingNode","getSameNode","nextTick","scrollToExpandingNode","isClient","menu","menuElement","$el","container","querySelector","namespace","activeNode","b","is","scrollIntoView","handleKeyDown","e","target","code","EVENT_CODE","up","down","preventDefault","distance","focusNode","getSibling","left","preMenu","getMenuIndex","expandedNode","right","nextMenu","firstNode","enter","checkNode","provide","CASCADER_PANEL_INJECTION_KEY","reactive","watch","deep","immediate","onBeforeUpdate","onMounted","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_component_el_cascader_menu","resolveComponent","openBlock","createElementBlock","class","normalizeClass","args","Fragment","renderList","index","createBlock","key","ref_for","item"],"sources":["../../../../../../packages/components/cascader-panel/src/index.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b('panel'), ns.is('bordered', border)]\"\n    @keydown=\"handleKeyDown\"\n  >\n    <el-cascader-menu\n      v-for=\"(menu, index) in menus\"\n      :key=\"index\"\n      :ref=\"(item) => (menuList[index] = item)\"\n      :index=\"index\"\n      :nodes=\"[...menu]\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  nextTick,\n  onBeforeUpdate,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { cloneDeep, flattenDeep, isEqual } from 'lodash-unified'\nimport { isClient } from '@vueuse/core'\nimport {\n  castArray,\n  focusNode,\n  getSibling,\n  isEmpty,\n  scrollIntoView,\n  unique,\n} from '@element-plus/utils'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\n\nimport ElCascaderMenu from './menu.vue'\nimport Store from './store'\nimport Node from './node'\nimport { CommonProps, useCascaderConfig } from './config'\nimport { checkNode, getMenuIndex, sortByOriginalOrder } from './utils'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  default as CascaderNode,\n  CascaderNodeValue,\n  CascaderOption,\n  CascaderValue,\n  RenderLabel,\n} from './node'\n\nimport type { ElCascaderPanelContext } from './types'\n\nexport default defineComponent({\n  name: 'ElCascaderPanel',\n\n  components: {\n    ElCascaderMenu,\n  },\n\n  props: {\n    ...CommonProps,\n    border: {\n      type: Boolean,\n      default: true,\n    },\n    renderLabel: Function as PropType<RenderLabel>,\n  },\n\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, 'close', 'expand-change'],\n\n  setup(props, { emit, slots }) {\n    // for interrupt sync check status in lazy mode\n    let manualChecked = false\n\n    const ns = useNamespace('cascader')\n    const config = useCascaderConfig(props)\n\n    let store: Nullable<Store> = null\n    const initialLoaded = ref(true)\n    const menuList = ref<any[]>([])\n    const checkedValue = ref<Nullable<CascaderValue>>(null)\n    const menus = ref<CascaderNode[][]>([])\n    const expandingNode = ref<Nullable<CascaderNode>>(null)\n    const checkedNodes = ref<CascaderNode[]>([])\n\n    const isHoverMenu = computed(() => config.value.expandTrigger === 'hover')\n    const renderLabelFn = computed(() => props.renderLabel || slots.default)\n\n    const initStore = () => {\n      const { options } = props\n      const cfg = config.value\n\n      manualChecked = false\n      store = new Store(options, cfg)\n      menus.value = [store.getNodes()]\n\n      if (cfg.lazy && isEmpty(props.options)) {\n        initialLoaded.value = false\n        lazyLoad(undefined, (list) => {\n          if (list) {\n            store = new Store(list, cfg)\n            menus.value = [store.getNodes()]\n          }\n          initialLoaded.value = true\n          syncCheckedValue(false, true)\n        })\n      } else {\n        syncCheckedValue(false, true)\n      }\n    }\n\n    const lazyLoad: ElCascaderPanelContext['lazyLoad'] = (node, cb) => {\n      const cfg = config.value\n      node! = node || new Node({}, cfg, undefined, true)\n      node.loading = true\n\n      const resolve = (dataList: CascaderOption[]) => {\n        const _node = node as Node\n        const parent = _node.root ? null : _node\n        dataList && store?.appendNodes(dataList, parent as any)\n        _node.loading = false\n        _node.loaded = true\n        _node.childrenData = _node.childrenData || []\n        cb && cb(dataList)\n      }\n\n      cfg.lazyLoad(node, resolve as any)\n    }\n\n    const expandNode: ElCascaderPanelContext['expandNode'] = (node, silent) => {\n      const { level } = node\n      const newMenus = menus.value.slice(0, level)\n      let newExpandingNode: Nullable<CascaderNode>\n\n      if (node.isLeaf) {\n        newExpandingNode = node.pathNodes[level - 2]\n      } else {\n        newExpandingNode = node\n        newMenus.push(node.children)\n      }\n\n      if (expandingNode.value?.uid !== newExpandingNode?.uid) {\n        expandingNode.value = node\n        menus.value = newMenus\n        !silent && emit('expand-change', node?.pathValues || [])\n      }\n    }\n\n    const handleCheckChange: ElCascaderPanelContext['handleCheckChange'] = (\n      node,\n      checked,\n      emitClose = true\n    ) => {\n      const { checkStrictly, multiple } = config.value\n      const oldNode = checkedNodes.value[0]\n      manualChecked = true\n\n      !multiple && oldNode?.doCheck(false)\n      node.doCheck(checked)\n      calculateCheckedValue()\n      emitClose && !multiple && !checkStrictly && emit('close')\n      !emitClose && !multiple && !checkStrictly && expandParentNode(node)\n    }\n\n    const expandParentNode = (node) => {\n      if (!node) return\n      node = node.parent\n      expandParentNode(node)\n      node && expandNode(node)\n    }\n\n    const getFlattedNodes = (leafOnly: boolean) => {\n      return store?.getFlattedNodes(leafOnly)\n    }\n\n    const getCheckedNodes = (leafOnly: boolean) => {\n      return getFlattedNodes(leafOnly)?.filter((node) => node.checked !== false)\n    }\n\n    const clearCheckedNodes = () => {\n      checkedNodes.value.forEach((node) => node.doCheck(false))\n      calculateCheckedValue()\n      menus.value = menus.value.slice(0, 1)\n      expandingNode.value = null\n      emit('expand-change', [])\n    }\n\n    const calculateCheckedValue = () => {\n      const { checkStrictly, multiple } = config.value\n      const oldNodes = checkedNodes.value\n      const newNodes = getCheckedNodes(!checkStrictly)!\n      // ensure the original order\n      const nodes = sortByOriginalOrder(oldNodes, newNodes)\n      const values = nodes.map((node) => node.valueByOption)\n      checkedNodes.value = nodes\n      checkedValue.value = multiple ? values : values[0] ?? null\n    }\n\n    const syncCheckedValue = (loaded = false, forced = false) => {\n      const { modelValue } = props\n      const { lazy, multiple, checkStrictly } = config.value\n      const leafOnly = !checkStrictly\n\n      if (\n        !initialLoaded.value ||\n        manualChecked ||\n        (!forced && isEqual(modelValue, checkedValue.value))\n      )\n        return\n\n      if (lazy && !loaded) {\n        const values: CascaderNodeValue[] = unique(\n          flattenDeep(castArray(modelValue))\n        )\n        const nodes = values\n          .map((val) => store?.getNodeByValue(val))\n          .filter((node) => !!node && !node.loaded && !node.loading) as Node[]\n\n        if (nodes.length) {\n          nodes.forEach((node) => {\n            lazyLoad(node, () => syncCheckedValue(false, forced))\n          })\n        } else {\n          syncCheckedValue(true, forced)\n        }\n      } else {\n        const values = multiple ? castArray(modelValue) : [modelValue]\n        const nodes = unique(\n          values.map((val) => store?.getNodeByValue(val, leafOnly))\n        ) as Node[]\n        syncMenuState(nodes, forced)\n        checkedValue.value = cloneDeep(modelValue)\n      }\n    }\n\n    const syncMenuState = (\n      newCheckedNodes: CascaderNode[],\n      reserveExpandingState = true\n    ) => {\n      const { checkStrictly } = config.value\n      const oldNodes = checkedNodes.value\n      const newNodes = newCheckedNodes.filter(\n        (node) => !!node && (checkStrictly || node.isLeaf)\n      )\n      const oldExpandingNode = store?.getSameNode(expandingNode.value!)\n      const newExpandingNode =\n        (reserveExpandingState && oldExpandingNode) || newNodes[0]\n\n      if (newExpandingNode) {\n        newExpandingNode.pathNodes.forEach((node) => expandNode(node, true))\n      } else {\n        expandingNode.value = null\n      }\n\n      oldNodes.forEach((node) => node.doCheck(false))\n      newNodes.forEach((node) => node.doCheck(true))\n\n      checkedNodes.value = newNodes\n      nextTick(scrollToExpandingNode)\n    }\n\n    const scrollToExpandingNode = () => {\n      if (!isClient) return\n\n      menuList.value.forEach((menu) => {\n        const menuElement = menu?.$el\n        if (menuElement) {\n          const container = menuElement.querySelector(\n            `.${ns.namespace.value}-scrollbar__wrap`\n          )\n          const activeNode =\n            menuElement.querySelector(`.${ns.b('node')}.${ns.is('active')}`) ||\n            menuElement.querySelector(`.${ns.b('node')}.in-active-path`)\n          scrollIntoView(container, activeNode)\n        }\n      })\n    }\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const target = e.target as HTMLElement\n      const { code } = e\n\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down: {\n          e.preventDefault()\n          const distance = code === EVENT_CODE.up ? -1 : 1\n          focusNode(\n            getSibling(target, distance, `.${ns.b('node')}[tabindex=\"-1\"]`)\n          )\n          break\n        }\n        case EVENT_CODE.left: {\n          e.preventDefault()\n          const preMenu = menuList.value[getMenuIndex(target) - 1]\n          const expandedNode = preMenu?.$el.querySelector(\n            `.${ns.b('node')}[aria-expanded=\"true\"]`\n          )\n          focusNode(expandedNode)\n          break\n        }\n        case EVENT_CODE.right: {\n          e.preventDefault()\n          const nextMenu = menuList.value[getMenuIndex(target) + 1]\n          const firstNode = nextMenu?.$el.querySelector(\n            `.${ns.b('node')}[tabindex=\"-1\"]`\n          )\n          focusNode(firstNode)\n          break\n        }\n        case EVENT_CODE.enter:\n          checkNode(target)\n          break\n      }\n    }\n\n    provide(\n      CASCADER_PANEL_INJECTION_KEY,\n      reactive({\n        config,\n        expandingNode,\n        checkedNodes,\n        isHoverMenu,\n        initialLoaded,\n        renderLabelFn,\n        lazyLoad,\n        expandNode,\n        handleCheckChange,\n      })\n    )\n\n    watch([config, () => props.options], initStore, {\n      deep: true,\n      immediate: true,\n    })\n\n    watch(\n      () => props.modelValue,\n      () => {\n        manualChecked = false\n        syncCheckedValue()\n      },\n      {\n        deep: true,\n      }\n    )\n\n    watch(\n      () => checkedValue.value,\n      (val) => {\n        if (!isEqual(val, props.modelValue)) {\n          emit(UPDATE_MODEL_EVENT, val)\n          emit(CHANGE_EVENT, val)\n        }\n      }\n    )\n\n    onBeforeUpdate(() => (menuList.value = []))\n\n    onMounted(() => !isEmpty(props.modelValue) && syncCheckedValue())\n\n    return {\n      ns,\n      menuList,\n      menus,\n      checkedNodes,\n      handleKeyDown,\n      handleCheckChange,\n      getFlattedNodes,\n      /**\n       * @description get an array of currently selected node,(leafOnly) whether only return the leaf checked nodes, default is `false`\n       */\n      getCheckedNodes,\n      /**\n       * @description clear checked nodes\n       */\n      clearCheckedNodes,\n      calculateCheckedValue,\n      scrollToExpandingNode,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}