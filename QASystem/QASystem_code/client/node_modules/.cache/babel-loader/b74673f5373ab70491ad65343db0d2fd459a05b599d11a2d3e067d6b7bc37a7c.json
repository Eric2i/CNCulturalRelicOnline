{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\nconst min = Math.min;\nconst max = Math.max;\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = options || {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements\n    } = state;\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n});\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = alignment !== undefined || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[main], overflow[cross]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = options;\n      const {\n        rects\n      } = state;\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getSideObjectFromPadding(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\nasync function convertValueToCoords(state, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(state) : value;\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n  return {\n    name: 'offset',\n    options: value,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(state) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const axis = getMainAxisFromPlacement(placement);\n      const isXAxis = axis === 'x';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isXAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isXAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };","map":{"version":3,"names":["getAlignment","placement","split","getLengthFromAxis","axis","getSide","getMainAxisFromPlacement","includes","computeCoordsFromPlacement","_ref","rtl","reference","floating","commonX","x","width","commonY","y","height","mainAxis","length","commonAlign","side","isVertical","coords","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","name","fn","nextX","nextY","data","reset","initialPlacement","elements","expandPaddingObject","padding","top","right","bottom","left","getSideObjectFromPadding","rectToClientRect","rect","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","min","Math","max","within","min$1","value","max$1","arrow","arrowDimensions","getDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","center","offset","shouldAddOffset","alignmentOffset","centerOffset","sides","allPlacements","reduce","acc","concat","oppositeSideMap","getOppositePlacement","replace","getAlignmentSides","alignment","mainAlignmentSide","main","cross","oppositeAlignmentMap","start","end","getOppositeAlignmentPlacement","getPlacementList","autoAlignment","allowedPlacements","allowedPlacementsSortedByAlignment","autoPlacement","_middlewareData$autoP","_middlewareData$autoP2","_placementsThatFitOnE","crossAxis","detectOverflowOptions","placements","undefined","overflow","currentIndex","index","currentPlacement","currentOverflows","allOverflows","overflows","nextPlacement","placementsSortedByMostSpace","map","d","slice","v","sort","a","b","placementsThatFitOnEachSide","every","resetPlacement","getExpandedPlacements","oppositePlacement","getSideList","isStart","lr","rl","tb","bt","getOppositeAxisPlacements","flipAlignment","direction","list","flip","_middlewareData$flip","checkMainAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","isBasePlacement","push","overflowsData","_middlewareData$flip2","_overflowsData$filter","nextIndex","_overflowsData$map$so","getSideOffsets","isAnySideFullyClipped","some","hide","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","getBoundingRect","minX","minY","maxX","maxY","getRectsByLine","sortedRects","groups","prevRect","inline","nativeClientRects","Array","from","getClientRects","clientRects","fallback","getBoundingClientRect","find","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","resetRects","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","alignmentAxis","diffCoords","getCrossAxis","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","isOriginSide","size","apply","isXAxis","heightSide","widthSide","overflowAvailableHeight","overflowAvailableWidth","noShift","availableHeight","availableWidth","maximumClippingWidth","maximumClippingHeight","xMin","xMax","yMin","yMax","nextDimensions"],"sources":["D:/2023/CNCulturalRelicOnline/QASystem/QASystem_code/client/node_modules/@floating-ui/core/dist/floating-ui.core.browser.mjs"],"sourcesContent":["function getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = options || {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements\n    } = state;\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n});\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\n\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = alignment !== undefined || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[main], overflow[cross]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = options;\n      const {\n        rects\n      } = state;\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getSideObjectFromPadding(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nasync function convertValueToCoords(state, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(state) : value;\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n  return {\n    name: 'offset',\n    options: value,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(state) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const axis = getMainAxisFromPlacement(placement);\n      const isXAxis = axis === 'x';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isXAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isXAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}