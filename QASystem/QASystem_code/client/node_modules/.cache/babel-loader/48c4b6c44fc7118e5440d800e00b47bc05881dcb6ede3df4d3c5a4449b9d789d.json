{"ast":null,"code":"import { defineComponent, inject, computed, openBlock, createElementBlock, unref, normalizeClass, normalizeStyle, createElementVNode, renderSlot, toDisplayString, createVNode, withCtx, createBlock, resolveDynamicComponent, createCommentVNode } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../focus-trap/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { dialogInjectionKey } from './constants.mjs';\nimport { dialogContentProps, dialogContentEmits } from './dialog-content.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { CloseComponents } from '../../../utils/vue/icon.mjs';\nimport { FOCUS_TRAP_INJECTION_KEY } from '../../focus-trap/src/tokens.mjs';\nimport { composeRefs } from '../../../utils/vue/refs.mjs';\nimport { useDraggable } from '../../../hooks/use-draggable/index.mjs';\nconst _hoisted_1 = [\"aria-label\"];\nconst _hoisted_2 = [\"id\"];\nconst __default__ = defineComponent({\n  name: \"ElDialogContent\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: dialogContentProps,\n  emits: dialogContentEmits,\n  setup(__props) {\n    const props = __props;\n    const {\n      t\n    } = useLocale();\n    const {\n      Close\n    } = CloseComponents;\n    const {\n      dialogRef,\n      headerRef,\n      bodyId,\n      ns,\n      style\n    } = inject(dialogInjectionKey);\n    const {\n      focusTrapRef\n    } = inject(FOCUS_TRAP_INJECTION_KEY);\n    const composedDialogRef = composeRefs(focusTrapRef, dialogRef);\n    const draggable = computed(() => props.draggable);\n    useDraggable(dialogRef, headerRef, draggable);\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref: unref(composedDialogRef),\n        class: normalizeClass([unref(ns).b(), unref(ns).is(\"fullscreen\", _ctx.fullscreen), unref(ns).is(\"draggable\", unref(draggable)), unref(ns).is(\"align-center\", _ctx.alignCenter), {\n          [unref(ns).m(\"center\")]: _ctx.center\n        }, _ctx.customClass]),\n        style: normalizeStyle(unref(style)),\n        tabindex: \"-1\"\n      }, [createElementVNode(\"header\", {\n        ref_key: \"headerRef\",\n        ref: headerRef,\n        class: normalizeClass(unref(ns).e(\"header\"))\n      }, [renderSlot(_ctx.$slots, \"header\", {}, () => [createElementVNode(\"span\", {\n        role: \"heading\",\n        class: normalizeClass(unref(ns).e(\"title\"))\n      }, toDisplayString(_ctx.title), 3)]), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n        key: 0,\n        \"aria-label\": unref(t)(\"el.dialog.close\"),\n        class: normalizeClass(unref(ns).e(\"headerbtn\")),\n        type: \"button\",\n        onClick: _cache[0] || (_cache[0] = $event => _ctx.$emit(\"close\"))\n      }, [createVNode(unref(ElIcon), {\n        class: normalizeClass(unref(ns).e(\"close\"))\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.closeIcon || unref(Close))))]),\n        _: 1\n      }, 8, [\"class\"])], 10, _hoisted_1)) : createCommentVNode(\"v-if\", true)], 2), createElementVNode(\"div\", {\n        id: unref(bodyId),\n        class: normalizeClass(unref(ns).e(\"body\"))\n      }, [renderSlot(_ctx.$slots, \"default\")], 10, _hoisted_2), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"footer\", {\n        key: 0,\n        class: normalizeClass(unref(ns).e(\"footer\"))\n      }, [renderSlot(_ctx.$slots, \"footer\")], 2)) : createCommentVNode(\"v-if\", true)], 6);\n    };\n  }\n});\nvar ElDialogContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog-content.vue\"]]);\nexport { ElDialogContent as default };","map":{"version":3,"names":["name","t","useLocale","Close","CloseComponents","dialogRef","headerRef","bodyId","ns","style","inject","dialogInjectionKey","focusTrapRef","FOCUS_TRAP_INJECTION_KEY","composedDialogRef","composeRefs","draggable","computed","props","useDraggable"],"sources":["../../../../../../packages/components/dialog/src/dialog-content.vue"],"sourcesContent":["<template>\n  <div\n    :ref=\"composedDialogRef\"\n    :class=\"[\n      ns.b(),\n      ns.is('fullscreen', fullscreen),\n      ns.is('draggable', draggable),\n      ns.is('align-center', alignCenter),\n      { [ns.m('center')]: center },\n      customClass,\n    ]\"\n    :style=\"style\"\n    tabindex=\"-1\"\n  >\n    <header ref=\"headerRef\" :class=\"ns.e('header')\">\n      <slot name=\"header\">\n        <span role=\"heading\" :class=\"ns.e('title')\">\n          {{ title }}\n        </span>\n      </slot>\n      <button\n        v-if=\"showClose\"\n        :aria-label=\"t('el.dialog.close')\"\n        :class=\"ns.e('headerbtn')\"\n        type=\"button\"\n        @click=\"$emit('close')\"\n      >\n        <el-icon :class=\"ns.e('close')\">\n          <component :is=\"closeIcon || Close\" />\n        </el-icon>\n      </button>\n    </header>\n    <div :id=\"bodyId\" :class=\"ns.e('body')\">\n      <slot />\n    </div>\n    <footer v-if=\"$slots.footer\" :class=\"ns.e('footer')\">\n      <slot name=\"footer\" />\n    </footer>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { FOCUS_TRAP_INJECTION_KEY } from '@element-plus/components/focus-trap'\nimport { useDraggable, useLocale } from '@element-plus/hooks'\nimport { CloseComponents, composeRefs } from '@element-plus/utils'\nimport { dialogInjectionKey } from './constants'\nimport { dialogContentEmits, dialogContentProps } from './dialog-content'\n\nconst { t } = useLocale()\nconst { Close } = CloseComponents\n\ndefineOptions({ name: 'ElDialogContent' })\nconst props = defineProps(dialogContentProps)\ndefineEmits(dialogContentEmits)\n\nconst { dialogRef, headerRef, bodyId, ns, style } = inject(dialogInjectionKey)!\nconst { focusTrapRef } = inject(FOCUS_TRAP_INJECTION_KEY)!\n\nconst composedDialogRef = composeRefs(focusTrapRef, dialogRef)\n\nconst draggable = computed(() => props.draggable)\nuseDraggable(dialogRef, headerRef, draggable)\n</script>\n"],"mappings":";;;;;;;;;;;;;;;mCAqDc;EAAEA,IAAM;AAAA,CAAkB;;;;;;;IAHlC;MAAEC;IAAA,IAAMC,SAAU;IACxB,MAAM;MAAEC;IAAU,IAAAC,eAAA;IAMlB,MAAM;MAAEC,SAAW;MAAAC,SAAA;MAAWC,MAAA;MAAQC,EAAI;MAAAC;IAAA,IAAUC,MAAA,CAAOC,kBAAkB;IACvE;MAAEC;IAAiB,IAAAF,MAAA,CAAOG,wBAAwB;IAElD,MAAAC,iBAAA,GAAoBC,WAAY,CAAAH,YAAA,EAAcP,SAAS;IAE7D,MAAMW,SAAY,GAAAC,QAAA,CAAS,MAAMC,KAAA,CAAMF,SAAS;IACnCG,YAAA,CAAAd,SAAA,EAAWC,SAAA,EAAWU,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}