{"ast":null,"code":"import { defineComponent, useAttrs, useSlots, computed, shallowRef, ref, nextTick, watch, onMounted, toRef, withDirectives, openBlock, createElementBlock, mergeProps, unref, createCommentVNode, Fragment, normalizeClass, renderSlot, createElementVNode, createBlock, withCtx, resolveDynamicComponent, withModifiers, createVNode, toDisplayString, normalizeStyle, vShow } from 'vue';\nimport { useResizeObserver, isClient } from '@vueuse/core';\nimport { isNil } from 'lodash-unified';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { View, Hide, CircleClose } from '@element-plus/icons-vue';\nimport '../../form/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport { calcTextareaHeight } from './utils.mjs';\nimport { inputProps, inputEmits } from './input.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useAttrs as useAttrs$1 } from '../../../hooks/use-attrs/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { useFormSize, useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { ValidateComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { useCursor } from '../../../hooks/use-cursor/index.mjs';\nimport { isObject, NOOP } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { isKorean } from '../../../utils/i18n.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst _hoisted_1 = [\"role\"];\nconst _hoisted_2 = [\"id\", \"type\", \"disabled\", \"formatter\", \"parser\", \"readonly\", \"autocomplete\", \"tabindex\", \"aria-label\", \"placeholder\", \"form\"];\nconst _hoisted_3 = [\"id\", \"tabindex\", \"disabled\", \"readonly\", \"autocomplete\", \"aria-label\", \"placeholder\", \"form\"];\nconst __default__ = defineComponent({\n  name: \"ElInput\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: inputProps,\n  emits: inputEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const rawAttrs = useAttrs();\n    const slots = useSlots();\n    const containerAttrs = computed(() => {\n      const comboBoxAttrs = {};\n      if (props.containerRole === \"combobox\") {\n        comboBoxAttrs[\"aria-haspopup\"] = rawAttrs[\"aria-haspopup\"];\n        comboBoxAttrs[\"aria-owns\"] = rawAttrs[\"aria-owns\"];\n        comboBoxAttrs[\"aria-expanded\"] = rawAttrs[\"aria-expanded\"];\n      }\n      return comboBoxAttrs;\n    });\n    const containerKls = computed(() => [props.type === \"textarea\" ? nsTextarea.b() : nsInput.b(), nsInput.m(inputSize.value), nsInput.is(\"disabled\", inputDisabled.value), nsInput.is(\"exceed\", inputExceed.value), {\n      [nsInput.b(\"group\")]: slots.prepend || slots.append,\n      [nsInput.bm(\"group\", \"append\")]: slots.append,\n      [nsInput.bm(\"group\", \"prepend\")]: slots.prepend,\n      [nsInput.m(\"prefix\")]: slots.prefix || props.prefixIcon,\n      [nsInput.m(\"suffix\")]: slots.suffix || props.suffixIcon || props.clearable || props.showPassword,\n      [nsInput.bm(\"suffix\", \"password-clear\")]: showClear.value && showPwdVisible.value\n    }, rawAttrs.class]);\n    const wrapperKls = computed(() => [nsInput.e(\"wrapper\"), nsInput.is(\"focus\", focused.value)]);\n    const attrs = useAttrs$1({\n      excludeKeys: computed(() => {\n        return Object.keys(containerAttrs.value);\n      })\n    });\n    const {\n      form,\n      formItem\n    } = useFormItem();\n    const {\n      inputId\n    } = useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const inputSize = useFormSize();\n    const inputDisabled = useFormDisabled();\n    const nsInput = useNamespace(\"input\");\n    const nsTextarea = useNamespace(\"textarea\");\n    const input = shallowRef();\n    const textarea = shallowRef();\n    const focused = ref(false);\n    const hovering = ref(false);\n    const isComposing = ref(false);\n    const passwordVisible = ref(false);\n    const countStyle = ref();\n    const textareaCalcStyle = shallowRef(props.inputStyle);\n    const _ref = computed(() => input.value || textarea.value);\n    const needStatusIcon = computed(() => {\n      var _a;\n      return (_a = form == null ? void 0 : form.statusIcon) != null ? _a : false;\n    });\n    const validateState = computed(() => (formItem == null ? void 0 : formItem.validateState) || \"\");\n    const validateIcon = computed(() => validateState.value && ValidateComponentsMap[validateState.value]);\n    const passwordIcon = computed(() => passwordVisible.value ? View : Hide);\n    const containerStyle = computed(() => [rawAttrs.style, props.inputStyle]);\n    const textareaStyle = computed(() => [props.inputStyle, textareaCalcStyle.value, {\n      resize: props.resize\n    }]);\n    const nativeInputValue = computed(() => isNil(props.modelValue) ? \"\" : String(props.modelValue));\n    const showClear = computed(() => props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (focused.value || hovering.value));\n    const showPwdVisible = computed(() => props.showPassword && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (!!nativeInputValue.value || focused.value));\n    const isWordLimitVisible = computed(() => props.showWordLimit && !!attrs.value.maxlength && (props.type === \"text\" || props.type === \"textarea\") && !inputDisabled.value && !props.readonly && !props.showPassword);\n    const textLength = computed(() => nativeInputValue.value.length);\n    const inputExceed = computed(() => !!isWordLimitVisible.value && textLength.value > Number(attrs.value.maxlength));\n    const suffixVisible = computed(() => !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);\n    const [recordCursor, setCursor] = useCursor(input);\n    useResizeObserver(textarea, entries => {\n      onceInitSizeTextarea();\n      if (!isWordLimitVisible.value || props.resize !== \"both\") return;\n      const entry = entries[0];\n      const {\n        width\n      } = entry.contentRect;\n      countStyle.value = {\n        right: `calc(100% - ${width + 15 + 6}px)`\n      };\n    });\n    const resizeTextarea = () => {\n      const {\n        type,\n        autosize\n      } = props;\n      if (!isClient || type !== \"textarea\" || !textarea.value) return;\n      if (autosize) {\n        const minRows = isObject(autosize) ? autosize.minRows : void 0;\n        const maxRows = isObject(autosize) ? autosize.maxRows : void 0;\n        const textareaStyle2 = calcTextareaHeight(textarea.value, minRows, maxRows);\n        textareaCalcStyle.value = {\n          overflowY: \"hidden\",\n          ...textareaStyle2\n        };\n        nextTick(() => {\n          textarea.value.offsetHeight;\n          textareaCalcStyle.value = textareaStyle2;\n        });\n      } else {\n        textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value).minHeight\n        };\n      }\n    };\n    const createOnceInitResize = resizeTextarea2 => {\n      let isInit = false;\n      return () => {\n        var _a;\n        if (isInit || !props.autosize) return;\n        const isElHidden = ((_a = textarea.value) == null ? void 0 : _a.offsetParent) === null;\n        if (!isElHidden) {\n          resizeTextarea2();\n          isInit = true;\n        }\n      };\n    };\n    const onceInitSizeTextarea = createOnceInitResize(resizeTextarea);\n    const setNativeInputValue = () => {\n      const input2 = _ref.value;\n      if (!input2 || input2.value === nativeInputValue.value) return;\n      input2.value = nativeInputValue.value;\n    };\n    const handleInput = async event => {\n      recordCursor();\n      let {\n        value\n      } = event.target;\n      if (props.formatter) {\n        value = props.parser ? props.parser(value) : value;\n        value = props.formatter(value);\n      }\n      if (isComposing.value) return;\n      if (value === nativeInputValue.value) {\n        setNativeInputValue();\n        return;\n      }\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"input\", value);\n      await nextTick();\n      setNativeInputValue();\n      setCursor();\n    };\n    const handleChange = event => {\n      emit(\"change\", event.target.value);\n    };\n    const handleCompositionStart = event => {\n      emit(\"compositionstart\", event);\n      isComposing.value = true;\n    };\n    const handleCompositionUpdate = event => {\n      var _a;\n      emit(\"compositionupdate\", event);\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n      const lastCharacter = text[text.length - 1] || \"\";\n      isComposing.value = !isKorean(lastCharacter);\n    };\n    const handleCompositionEnd = event => {\n      emit(\"compositionend\", event);\n      if (isComposing.value) {\n        isComposing.value = false;\n        handleInput(event);\n      }\n    };\n    const handlePasswordVisible = () => {\n      passwordVisible.value = !passwordVisible.value;\n      focus();\n    };\n    const focus = async () => {\n      var _a;\n      await nextTick();\n      (_a = _ref.value) == null ? void 0 : _a.focus();\n    };\n    const blur = () => {\n      var _a;\n      return (_a = _ref.value) == null ? void 0 : _a.blur();\n    };\n    const handleFocus = event => {\n      focused.value = true;\n      emit(\"focus\", event);\n    };\n    const handleBlur = event => {\n      var _a;\n      focused.value = false;\n      emit(\"blur\", event);\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\").catch(err => debugWarn(err));\n      }\n    };\n    const handleMouseLeave = evt => {\n      hovering.value = false;\n      emit(\"mouseleave\", evt);\n    };\n    const handleMouseEnter = evt => {\n      hovering.value = true;\n      emit(\"mouseenter\", evt);\n    };\n    const handleKeydown = evt => {\n      emit(\"keydown\", evt);\n    };\n    const select = () => {\n      var _a;\n      (_a = _ref.value) == null ? void 0 : _a.select();\n    };\n    const clear = () => {\n      emit(UPDATE_MODEL_EVENT, \"\");\n      emit(\"change\", \"\");\n      emit(\"clear\");\n      emit(\"input\", \"\");\n    };\n    watch(() => props.modelValue, () => {\n      var _a;\n      nextTick(() => resizeTextarea());\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => debugWarn(err));\n      }\n    });\n    watch(nativeInputValue, () => setNativeInputValue());\n    watch(() => props.type, async () => {\n      await nextTick();\n      setNativeInputValue();\n      resizeTextarea();\n    });\n    onMounted(() => {\n      if (!props.formatter && props.parser) {\n        debugWarn(\"ElInput\", \"If you set the parser, you also need to set the formatter.\");\n      }\n      setNativeInputValue();\n      nextTick(resizeTextarea);\n    });\n    expose({\n      input,\n      textarea,\n      ref: _ref,\n      textareaStyle,\n      autosize: toRef(props, \"autosize\"),\n      focus,\n      blur,\n      select,\n      clear,\n      resizeTextarea\n    });\n    return (_ctx, _cache) => {\n      return withDirectives((openBlock(), createElementBlock(\"div\", mergeProps(unref(containerAttrs), {\n        class: unref(containerKls),\n        style: unref(containerStyle),\n        role: _ctx.containerRole,\n        onMouseenter: handleMouseEnter,\n        onMouseleave: handleMouseLeave\n      }), [createCommentVNode(\" input \"), _ctx.type !== \"textarea\" ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [createCommentVNode(\" prepend slot \"), _ctx.$slots.prepend ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(nsInput).be(\"group\", \"prepend\"))\n      }, [renderSlot(_ctx.$slots, \"prepend\")], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n        class: normalizeClass(unref(wrapperKls))\n      }, [createCommentVNode(\" prefix slot \"), _ctx.$slots.prefix || _ctx.prefixIcon ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        class: normalizeClass(unref(nsInput).e(\"prefix\"))\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass(unref(nsInput).e(\"prefix-inner\")),\n        onClick: focus\n      }, [renderSlot(_ctx.$slots, \"prefix\"), _ctx.prefixIcon ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 0,\n        class: normalizeClass(unref(nsInput).e(\"icon\"))\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"input\", mergeProps({\n        id: unref(inputId),\n        ref_key: \"input\",\n        ref: input,\n        class: unref(nsInput).e(\"inner\")\n      }, unref(attrs), {\n        type: _ctx.showPassword ? passwordVisible.value ? \"text\" : \"password\" : _ctx.type,\n        disabled: unref(inputDisabled),\n        formatter: _ctx.formatter,\n        parser: _ctx.parser,\n        readonly: _ctx.readonly,\n        autocomplete: _ctx.autocomplete,\n        tabindex: _ctx.tabindex,\n        \"aria-label\": _ctx.label,\n        placeholder: _ctx.placeholder,\n        style: _ctx.inputStyle,\n        form: props.form,\n        onCompositionstart: handleCompositionStart,\n        onCompositionupdate: handleCompositionUpdate,\n        onCompositionend: handleCompositionEnd,\n        onInput: handleInput,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        onChange: handleChange,\n        onKeydown: handleKeydown\n      }), null, 16, _hoisted_2), createCommentVNode(\" suffix slot \"), unref(suffixVisible) ? (openBlock(), createElementBlock(\"span\", {\n        key: 1,\n        class: normalizeClass(unref(nsInput).e(\"suffix\"))\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass(unref(nsInput).e(\"suffix-inner\")),\n        onClick: focus\n      }, [!unref(showClear) || !unref(showPwdVisible) || !unref(isWordLimitVisible) ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [renderSlot(_ctx.$slots, \"suffix\"), _ctx.suffixIcon ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 0,\n        class: normalizeClass(unref(nsInput).e(\"icon\"))\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 64)) : createCommentVNode(\"v-if\", true), unref(showClear) ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 1,\n        class: normalizeClass([unref(nsInput).e(\"icon\"), unref(nsInput).e(\"clear\")]),\n        onMousedown: withModifiers(unref(NOOP), [\"prevent\"]),\n        onClick: clear\n      }, {\n        default: withCtx(() => [createVNode(unref(CircleClose))]),\n        _: 1\n      }, 8, [\"class\", \"onMousedown\"])) : createCommentVNode(\"v-if\", true), unref(showPwdVisible) ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 2,\n        class: normalizeClass([unref(nsInput).e(\"icon\"), unref(nsInput).e(\"password\")]),\n        onClick: handlePasswordVisible\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(unref(passwordIcon))))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), unref(isWordLimitVisible) ? (openBlock(), createElementBlock(\"span\", {\n        key: 3,\n        class: normalizeClass(unref(nsInput).e(\"count\"))\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass(unref(nsInput).e(\"count-inner\"))\n      }, toDisplayString(unref(textLength)) + \" / \" + toDisplayString(unref(attrs).maxlength), 3)], 2)) : createCommentVNode(\"v-if\", true), unref(validateState) && unref(validateIcon) && unref(needStatusIcon) ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 4,\n        class: normalizeClass([unref(nsInput).e(\"icon\"), unref(nsInput).e(\"validateIcon\"), unref(nsInput).is(\"loading\", unref(validateState) === \"validating\")])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(unref(validateIcon))))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)], 2)) : createCommentVNode(\"v-if\", true)], 2), createCommentVNode(\" append slot \"), _ctx.$slots.append ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(unref(nsInput).be(\"group\", \"append\"))\n      }, [renderSlot(_ctx.$slots, \"append\")], 2)) : createCommentVNode(\"v-if\", true)], 64)) : (openBlock(), createElementBlock(Fragment, {\n        key: 1\n      }, [createCommentVNode(\" textarea \"), createElementVNode(\"textarea\", mergeProps({\n        id: unref(inputId),\n        ref_key: \"textarea\",\n        ref: textarea,\n        class: unref(nsTextarea).e(\"inner\")\n      }, unref(attrs), {\n        tabindex: _ctx.tabindex,\n        disabled: unref(inputDisabled),\n        readonly: _ctx.readonly,\n        autocomplete: _ctx.autocomplete,\n        style: unref(textareaStyle),\n        \"aria-label\": _ctx.label,\n        placeholder: _ctx.placeholder,\n        form: props.form,\n        onCompositionstart: handleCompositionStart,\n        onCompositionupdate: handleCompositionUpdate,\n        onCompositionend: handleCompositionEnd,\n        onInput: handleInput,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        onChange: handleChange,\n        onKeydown: handleKeydown\n      }), null, 16, _hoisted_3), unref(isWordLimitVisible) ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        style: normalizeStyle(countStyle.value),\n        class: normalizeClass(unref(nsInput).e(\"count\"))\n      }, toDisplayString(unref(textLength)) + \" / \" + toDisplayString(unref(attrs).maxlength), 7)) : createCommentVNode(\"v-if\", true)], 64))], 16, _hoisted_1)), [[vShow, _ctx.type !== \"hidden\"]]);\n    };\n  }\n});\nvar Input = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/input/src/input.vue\"]]);\nexport { Input as default };","map":{"version":3,"names":["name","inheritAttrs","rawAttrs","useAttrs","slots","useSlots","containerAttrs","computed","comboBoxAttrs","props","containerRole","containerKls","type","nsTextarea","b","nsInput","m","inputSize","value","is","inputDisabled","inputExceed","prepend","append","bm","prefix","prefixIcon","suffix","suffixIcon","clearable","showPassword","showClear","showPwdVisible","class","wrapperKls","e","focused","attrs","useAttrs$1","excludeKeys","Object","keys","form","formItem","useFormItem","inputId","useFormItemInputId","formItemContext","useFormSize","useFormDisabled","useNamespace","input","shallowRef","textarea","ref","hovering","isComposing","passwordVisible","countStyle","textareaCalcStyle","inputStyle","_ref","needStatusIcon","_a","statusIcon","validateState","validateIcon","ValidateComponentsMap","passwordIcon","View","Hide","containerStyle","style","textareaStyle","resize","nativeInputValue","isNil","modelValue","String","readonly","isWordLimitVisible","showWordLimit","maxlength","textLength","length","Number","suffixVisible","recordCursor","setCursor","useCursor","useResizeObserver","entries","onceInitSizeTextarea","entry","width","contentRect","right","resizeTextarea","autosize","isClient","minRows","isObject","maxRows","textareaStyle2","calcTextareaHeight","overflowY","nextTick","offsetHeight","minHeight","createOnceInitResize","resizeTextarea2","isInit","isElHidden","offsetParent","setNativeInputValue","input2","handleInput","event","target","formatter","parser","emit","UPDATE_MODEL_EVENT","handleChange","handleCompositionStart","handleCompositionUpdate","text","lastCharacter","isKorean","handleCompositionEnd","handlePasswordVisible","focus","blur","handleFocus","handleBlur","validateEvent","validate","call","catch","err","debugWarn","handleMouseLeave","evt","handleMouseEnter","handleKeydown","select","clear","watch","onMounted"],"sources":["../../../../../../packages/components/input/src/input.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"type !== 'hidden'\"\n    v-bind=\"containerAttrs\"\n    :class=\"containerKls\"\n    :style=\"containerStyle\"\n    :role=\"containerRole\"\n    @mouseenter=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n  >\n    <!-- input -->\n    <template v-if=\"type !== 'textarea'\">\n      <!-- prepend slot -->\n      <div v-if=\"$slots.prepend\" :class=\"nsInput.be('group', 'prepend')\">\n        <slot name=\"prepend\" />\n      </div>\n\n      <div :class=\"wrapperKls\">\n        <!-- prefix slot -->\n        <span v-if=\"$slots.prefix || prefixIcon\" :class=\"nsInput.e('prefix')\">\n          <span :class=\"nsInput.e('prefix-inner')\" @click=\"focus\">\n            <slot name=\"prefix\" />\n            <el-icon v-if=\"prefixIcon\" :class=\"nsInput.e('icon')\">\n              <component :is=\"prefixIcon\" />\n            </el-icon>\n          </span>\n        </span>\n\n        <input\n          :id=\"inputId\"\n          ref=\"input\"\n          :class=\"nsInput.e('inner')\"\n          v-bind=\"attrs\"\n          :type=\"showPassword ? (passwordVisible ? 'text' : 'password') : type\"\n          :disabled=\"inputDisabled\"\n          :formatter=\"formatter\"\n          :parser=\"parser\"\n          :readonly=\"readonly\"\n          :autocomplete=\"autocomplete\"\n          :tabindex=\"tabindex\"\n          :aria-label=\"label\"\n          :placeholder=\"placeholder\"\n          :style=\"inputStyle\"\n          :form=\"props.form\"\n          @compositionstart=\"handleCompositionStart\"\n          @compositionupdate=\"handleCompositionUpdate\"\n          @compositionend=\"handleCompositionEnd\"\n          @input=\"handleInput\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @change=\"handleChange\"\n          @keydown=\"handleKeydown\"\n        />\n\n        <!-- suffix slot -->\n        <span v-if=\"suffixVisible\" :class=\"nsInput.e('suffix')\">\n          <span :class=\"nsInput.e('suffix-inner')\" @click=\"focus\">\n            <template\n              v-if=\"!showClear || !showPwdVisible || !isWordLimitVisible\"\n            >\n              <slot name=\"suffix\" />\n              <el-icon v-if=\"suffixIcon\" :class=\"nsInput.e('icon')\">\n                <component :is=\"suffixIcon\" />\n              </el-icon>\n            </template>\n            <el-icon\n              v-if=\"showClear\"\n              :class=\"[nsInput.e('icon'), nsInput.e('clear')]\"\n              @mousedown.prevent=\"NOOP\"\n              @click=\"clear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-if=\"showPwdVisible\"\n              :class=\"[nsInput.e('icon'), nsInput.e('password')]\"\n              @click=\"handlePasswordVisible\"\n            >\n              <component :is=\"passwordIcon\" />\n            </el-icon>\n            <span v-if=\"isWordLimitVisible\" :class=\"nsInput.e('count')\">\n              <span :class=\"nsInput.e('count-inner')\">\n                {{ textLength }} / {{ attrs.maxlength }}\n              </span>\n            </span>\n            <el-icon\n              v-if=\"validateState && validateIcon && needStatusIcon\"\n              :class=\"[\n                nsInput.e('icon'),\n                nsInput.e('validateIcon'),\n                nsInput.is('loading', validateState === 'validating'),\n              ]\"\n            >\n              <component :is=\"validateIcon\" />\n            </el-icon>\n          </span>\n        </span>\n      </div>\n\n      <!-- append slot -->\n      <div v-if=\"$slots.append\" :class=\"nsInput.be('group', 'append')\">\n        <slot name=\"append\" />\n      </div>\n    </template>\n\n    <!-- textarea -->\n    <template v-else>\n      <textarea\n        :id=\"inputId\"\n        ref=\"textarea\"\n        :class=\"nsTextarea.e('inner')\"\n        v-bind=\"attrs\"\n        :tabindex=\"tabindex\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :style=\"textareaStyle\"\n        :aria-label=\"label\"\n        :placeholder=\"placeholder\"\n        :form=\"props.form\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n      <span\n        v-if=\"isWordLimitVisible\"\n        :style=\"countStyle\"\n        :class=\"nsInput.e('count')\"\n      >\n        {{ textLength }} / {{ attrs.maxlength }}\n      </span>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  ref,\n  shallowRef,\n  toRef,\n  useAttrs as useRawAttrs,\n  useSlots,\n  watch,\n} from 'vue'\nimport { isClient, useResizeObserver } from '@vueuse/core'\nimport { isNil } from 'lodash-unified'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  CircleClose,\n  Hide as IconHide,\n  View as IconView,\n} from '@element-plus/icons-vue'\nimport {\n  useFormDisabled,\n  useFormItem,\n  useFormItemInputId,\n  useFormSize,\n} from '@element-plus/components/form'\nimport {\n  NOOP,\n  ValidateComponentsMap,\n  debugWarn,\n  isKorean,\n  isObject,\n} from '@element-plus/utils'\nimport { useAttrs, useCursor, useNamespace } from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { calcTextareaHeight } from './utils'\nimport { inputEmits, inputProps } from './input'\nimport type { StyleValue } from 'vue'\n\ntype TargetElement = HTMLInputElement | HTMLTextAreaElement\n\ndefineOptions({\n  name: 'ElInput',\n  inheritAttrs: false,\n})\nconst props = defineProps(inputProps)\nconst emit = defineEmits(inputEmits)\n\nconst rawAttrs = useRawAttrs()\nconst slots = useSlots()\n\nconst containerAttrs = computed(() => {\n  const comboBoxAttrs: Record<string, unknown> = {}\n  if (props.containerRole === 'combobox') {\n    comboBoxAttrs['aria-haspopup'] = rawAttrs['aria-haspopup']\n    comboBoxAttrs['aria-owns'] = rawAttrs['aria-owns']\n    comboBoxAttrs['aria-expanded'] = rawAttrs['aria-expanded']\n  }\n  return comboBoxAttrs\n})\n\nconst containerKls = computed(() => [\n  props.type === 'textarea' ? nsTextarea.b() : nsInput.b(),\n  nsInput.m(inputSize.value),\n  nsInput.is('disabled', inputDisabled.value),\n  nsInput.is('exceed', inputExceed.value),\n  {\n    [nsInput.b('group')]: slots.prepend || slots.append,\n    [nsInput.bm('group', 'append')]: slots.append,\n    [nsInput.bm('group', 'prepend')]: slots.prepend,\n    [nsInput.m('prefix')]: slots.prefix || props.prefixIcon,\n    [nsInput.m('suffix')]:\n      slots.suffix || props.suffixIcon || props.clearable || props.showPassword,\n    [nsInput.bm('suffix', 'password-clear')]:\n      showClear.value && showPwdVisible.value,\n  },\n  rawAttrs.class,\n])\n\nconst wrapperKls = computed(() => [\n  nsInput.e('wrapper'),\n  nsInput.is('focus', focused.value),\n])\n\nconst attrs = useAttrs({\n  excludeKeys: computed<string[]>(() => {\n    return Object.keys(containerAttrs.value)\n  }),\n})\nconst { form, formItem } = useFormItem()\nconst { inputId } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\nconst inputSize = useFormSize()\nconst inputDisabled = useFormDisabled()\nconst nsInput = useNamespace('input')\nconst nsTextarea = useNamespace('textarea')\n\nconst input = shallowRef<HTMLInputElement>()\nconst textarea = shallowRef<HTMLTextAreaElement>()\n\nconst focused = ref(false)\nconst hovering = ref(false)\nconst isComposing = ref(false)\nconst passwordVisible = ref(false)\nconst countStyle = ref<StyleValue>()\nconst textareaCalcStyle = shallowRef(props.inputStyle)\n\nconst _ref = computed(() => input.value || textarea.value)\n\nconst needStatusIcon = computed(() => form?.statusIcon ?? false)\nconst validateState = computed(() => formItem?.validateState || '')\nconst validateIcon = computed(\n  () => validateState.value && ValidateComponentsMap[validateState.value]\n)\nconst passwordIcon = computed(() =>\n  passwordVisible.value ? IconView : IconHide\n)\nconst containerStyle = computed<StyleValue>(() => [\n  rawAttrs.style as StyleValue,\n  props.inputStyle,\n])\nconst textareaStyle = computed<StyleValue>(() => [\n  props.inputStyle,\n  textareaCalcStyle.value,\n  { resize: props.resize },\n])\nconst nativeInputValue = computed(() =>\n  isNil(props.modelValue) ? '' : String(props.modelValue)\n)\nconst showClear = computed(\n  () =>\n    props.clearable &&\n    !inputDisabled.value &&\n    !props.readonly &&\n    !!nativeInputValue.value &&\n    (focused.value || hovering.value)\n)\nconst showPwdVisible = computed(\n  () =>\n    props.showPassword &&\n    !inputDisabled.value &&\n    !props.readonly &&\n    !!nativeInputValue.value &&\n    (!!nativeInputValue.value || focused.value)\n)\nconst isWordLimitVisible = computed(\n  () =>\n    props.showWordLimit &&\n    !!attrs.value.maxlength &&\n    (props.type === 'text' || props.type === 'textarea') &&\n    !inputDisabled.value &&\n    !props.readonly &&\n    !props.showPassword\n)\nconst textLength = computed(() => nativeInputValue.value.length)\nconst inputExceed = computed(\n  () =>\n    // show exceed style if length of initial value greater then maxlength\n    !!isWordLimitVisible.value &&\n    textLength.value > Number(attrs.value.maxlength)\n)\nconst suffixVisible = computed(\n  () =>\n    !!slots.suffix ||\n    !!props.suffixIcon ||\n    showClear.value ||\n    props.showPassword ||\n    isWordLimitVisible.value ||\n    (!!validateState.value && needStatusIcon.value)\n)\n\nconst [recordCursor, setCursor] = useCursor(input)\n\nuseResizeObserver(textarea, (entries) => {\n  onceInitSizeTextarea()\n  if (!isWordLimitVisible.value || props.resize !== 'both') return\n  const entry = entries[0]\n  const { width } = entry.contentRect\n  countStyle.value = {\n    /** right: 100% - width + padding(15) + right(6) */\n    right: `calc(100% - ${width + 15 + 6}px)`,\n  }\n})\n\nconst resizeTextarea = () => {\n  const { type, autosize } = props\n\n  if (!isClient || type !== 'textarea' || !textarea.value) return\n\n  if (autosize) {\n    const minRows = isObject(autosize) ? autosize.minRows : undefined\n    const maxRows = isObject(autosize) ? autosize.maxRows : undefined\n    const textareaStyle = calcTextareaHeight(textarea.value, minRows, maxRows)\n\n    // If the scrollbar is displayed, the height of the textarea needs more space than the calculated height.\n    // If set textarea height in this case, the scrollbar will not hide.\n    // So we need to hide scrollbar first, and reset it in next tick.\n    // see https://github.com/element-plus/element-plus/issues/8825\n    textareaCalcStyle.value = {\n      overflowY: 'hidden',\n      ...textareaStyle,\n    }\n\n    nextTick(() => {\n      // NOTE: Force repaint to make sure the style set above is applied.\n      textarea.value!.offsetHeight\n      textareaCalcStyle.value = textareaStyle\n    })\n  } else {\n    textareaCalcStyle.value = {\n      minHeight: calcTextareaHeight(textarea.value).minHeight,\n    }\n  }\n}\n\nconst createOnceInitResize = (resizeTextarea: () => void) => {\n  let isInit = false\n  return () => {\n    if (isInit || !props.autosize) return\n    const isElHidden = textarea.value?.offsetParent === null\n    if (!isElHidden) {\n      resizeTextarea()\n      isInit = true\n    }\n  }\n}\n// fix: https://github.com/element-plus/element-plus/issues/12074\nconst onceInitSizeTextarea = createOnceInitResize(resizeTextarea)\n\nconst setNativeInputValue = () => {\n  const input = _ref.value\n  if (!input || input.value === nativeInputValue.value) return\n  input.value = nativeInputValue.value\n}\n\nconst handleInput = async (event: Event) => {\n  recordCursor()\n\n  let { value } = event.target as TargetElement\n\n  if (props.formatter) {\n    value = props.parser ? props.parser(value) : value\n    value = props.formatter(value)\n  }\n\n  // should not emit input during composition\n  // see: https://github.com/ElemeFE/element/issues/10516\n  if (isComposing.value) return\n\n  // hack for https://github.com/ElemeFE/element/issues/8548\n  // should remove the following line when we don't support IE\n  if (value === nativeInputValue.value) {\n    setNativeInputValue()\n    return\n  }\n\n  emit(UPDATE_MODEL_EVENT, value)\n  emit('input', value)\n\n  // ensure native input value is controlled\n  // see: https://github.com/ElemeFE/element/issues/12850\n  await nextTick()\n  setNativeInputValue()\n  setCursor()\n}\n\nconst handleChange = (event: Event) => {\n  emit('change', (event.target as TargetElement).value)\n}\n\nconst handleCompositionStart = (event: CompositionEvent) => {\n  emit('compositionstart', event)\n  isComposing.value = true\n}\n\nconst handleCompositionUpdate = (event: CompositionEvent) => {\n  emit('compositionupdate', event)\n  const text = (event.target as HTMLInputElement)?.value\n  const lastCharacter = text[text.length - 1] || ''\n  isComposing.value = !isKorean(lastCharacter)\n}\n\nconst handleCompositionEnd = (event: CompositionEvent) => {\n  emit('compositionend', event)\n  if (isComposing.value) {\n    isComposing.value = false\n    handleInput(event)\n  }\n}\n\nconst handlePasswordVisible = () => {\n  passwordVisible.value = !passwordVisible.value\n  focus()\n}\n\nconst focus = async () => {\n  // see: https://github.com/ElemeFE/element/issues/18573\n  await nextTick()\n  _ref.value?.focus()\n}\n\nconst blur = () => _ref.value?.blur()\n\nconst handleFocus = (event: FocusEvent) => {\n  focused.value = true\n  emit('focus', event)\n}\n\nconst handleBlur = (event: FocusEvent) => {\n  focused.value = false\n  emit('blur', event)\n  if (props.validateEvent) {\n    formItem?.validate?.('blur').catch((err) => debugWarn(err))\n  }\n}\n\nconst handleMouseLeave = (evt: MouseEvent) => {\n  hovering.value = false\n  emit('mouseleave', evt)\n}\n\nconst handleMouseEnter = (evt: MouseEvent) => {\n  hovering.value = true\n  emit('mouseenter', evt)\n}\n\nconst handleKeydown = (evt: KeyboardEvent) => {\n  emit('keydown', evt)\n}\n\nconst select = () => {\n  _ref.value?.select()\n}\n\nconst clear = () => {\n  emit(UPDATE_MODEL_EVENT, '')\n  emit('change', '')\n  emit('clear')\n  emit('input', '')\n}\n\nwatch(\n  () => props.modelValue,\n  () => {\n    nextTick(() => resizeTextarea())\n    if (props.validateEvent) {\n      formItem?.validate?.('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n\n// native input value is set explicitly\n// do not use v-model / :value in template\n// see: https://github.com/ElemeFE/element/issues/14521\nwatch(nativeInputValue, () => setNativeInputValue())\n\n// when change between <input> and <textarea>,\n// update DOM dependent value and styles\n// https://github.com/ElemeFE/element/issues/14857\nwatch(\n  () => props.type,\n  async () => {\n    await nextTick()\n    setNativeInputValue()\n    resizeTextarea()\n  }\n)\n\nonMounted(() => {\n  if (!props.formatter && props.parser) {\n    debugWarn(\n      'ElInput',\n      'If you set the parser, you also need to set the formatter.'\n    )\n  }\n  setNativeInputValue()\n  nextTick(resizeTextarea)\n})\n\ndefineExpose({\n  /** @description HTML input element */\n  input,\n  /** @description HTML textarea element */\n  textarea,\n  /** @description HTML element, input or textarea */\n  ref: _ref,\n  /** @description style of textarea. */\n  textareaStyle,\n\n  /** @description from props (used on unit test) */\n  autosize: toRef(props, 'autosize'),\n\n  /** @description HTML input element native method */\n  focus,\n  /** @description HTML input element native method */\n  blur,\n  /** @description HTML input element native method */\n  select,\n  /** @description clear input value */\n  clear,\n  /** @description resize textarea. */\n  resizeTextarea,\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}